-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_aesl_mux_load_4_1125 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    return_r : OUT STD_LOGIC_VECTOR (7 downto 0);
    return_r_ap_vld : OUT STD_LOGIC;
    label_local_V_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    label_local_V_0_ce0 : OUT STD_LOGIC;
    label_local_V_0_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    label_local_V_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    label_local_V_1_ce0 : OUT STD_LOGIC;
    label_local_V_1_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    label_local_V_2_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    label_local_V_2_ce0 : OUT STD_LOGIC;
    label_local_V_2_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    label_local_V_3_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    label_local_V_3_ce0 : OUT STD_LOGIC;
    label_local_V_3_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    training_id_dout : IN STD_LOGIC_VECTOR (12 downto 0);
    training_id_empty_n : IN STD_LOGIC;
    training_id_read : OUT STD_LOGIC );
end;


architecture behav of a0_aesl_mux_load_4_1125 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal training_id_blk_n : STD_LOGIC;
    signal tmp_fu_105_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_173 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal newIndex1_i_fu_119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal newIndex_i_fu_109_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal sel_tmp4_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_127_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_142_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel6_fu_156_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (training_id_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_173 <= tmp_fu_105_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, training_id_empty_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (training_id_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, training_id_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (training_id_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    label_local_V_0_address0 <= newIndex1_i_fu_119_p1(11 - 1 downto 0);

    label_local_V_0_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, training_id_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (training_id_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            label_local_V_0_ce0 <= ap_const_logic_1;
        else 
            label_local_V_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    label_local_V_1_address0 <= newIndex1_i_fu_119_p1(11 - 1 downto 0);

    label_local_V_1_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, training_id_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (training_id_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            label_local_V_1_ce0 <= ap_const_logic_1;
        else 
            label_local_V_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    label_local_V_2_address0 <= newIndex1_i_fu_119_p1(11 - 1 downto 0);

    label_local_V_2_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, training_id_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (training_id_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            label_local_V_2_ce0 <= ap_const_logic_1;
        else 
            label_local_V_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    label_local_V_3_address0 <= newIndex1_i_fu_119_p1(11 - 1 downto 0);

    label_local_V_3_ce0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, training_id_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (training_id_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            label_local_V_3_ce0 <= ap_const_logic_1;
        else 
            label_local_V_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    newIndex1_i_fu_119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_i_fu_109_p4),64));
    newIndex_i_fu_109_p4 <= training_id_dout(12 downto 2);
    newSel6_fu_156_p3 <= 
        label_local_V_0_q0 when (sel_tmp_fu_127_p2(0) = '1') else 
        label_local_V_3_q0;
    newSel_fu_142_p3 <= 
        label_local_V_2_q0 when (sel_tmp4_fu_137_p2(0) = '1') else 
        label_local_V_1_q0;
    or_cond_fu_150_p2 <= (sel_tmp4_fu_137_p2 or sel_tmp2_fu_132_p2);
    return_r <= 
        newSel_fu_142_p3 when (or_cond_fu_150_p2(0) = '1') else 
        newSel6_fu_156_p3;

    return_r_ap_vld_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            return_r_ap_vld <= ap_const_logic_1;
        else 
            return_r_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp2_fu_132_p2 <= "1" when (tmp_reg_173 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_137_p2 <= "1" when (tmp_reg_173 = ap_const_lv2_2) else "0";
    sel_tmp_fu_127_p2 <= "1" when (tmp_reg_173 = ap_const_lv2_0) else "0";
    tmp_fu_105_p1 <= training_id_dout(2 - 1 downto 0);

    training_id_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, training_id_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            training_id_blk_n <= training_id_empty_n;
        else 
            training_id_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    training_id_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, training_id_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (training_id_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            training_id_read <= ap_const_logic_1;
        else 
            training_id_read <= ap_const_logic_0;
        end if; 
    end process;

end behav;
