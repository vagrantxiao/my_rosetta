#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_start", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_done", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_idle", 1, hls_out, -1, "", "", 1),
	Port_Property("ap_ready", 1, hls_out, -1, "", "", 1),
	Port_Property("m_axi_label_r_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_label_r_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_label_r_AWADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_label_r_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_label_r_AWLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_label_r_AWSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_label_r_AWBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_label_r_AWLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_label_r_AWCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_label_r_AWPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_label_r_AWQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_label_r_AWREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_label_r_AWUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_label_r_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_label_r_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_label_r_WDATA", 32, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_label_r_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_label_r_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_label_r_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_label_r_WUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_label_r_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_label_r_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_label_r_ARADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_label_r_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_label_r_ARLEN", 8, hls_out, 0, "m_axi", "LEN", 1),
	Port_Property("m_axi_label_r_ARSIZE", 3, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_label_r_ARBURST", 2, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_label_r_ARLOCK", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_label_r_ARCACHE", 4, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_label_r_ARPROT", 3, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_label_r_ARQOS", 4, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_label_r_ARREGION", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_label_r_ARUSER", 1, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_label_r_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_label_r_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_label_r_RDATA", 32, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_label_r_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_label_r_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_label_r_RUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_label_r_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_label_r_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_label_r_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_label_r_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_label_r_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_label_r_BUSER", 1, hls_in, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_theta_AWVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_theta_AWREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_theta_AWADDR", 64, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_theta_AWID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_theta_AWLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_theta_AWSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_theta_AWBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_theta_AWLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_theta_AWCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_theta_AWPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_theta_AWQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_theta_AWREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_theta_AWUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_theta_WVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_theta_WREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_theta_WDATA", 64, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_theta_WSTRB", 8, hls_out, 1, "m_axi", "STRB", 1),
	Port_Property("m_axi_theta_WLAST", 1, hls_out, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_theta_WID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_theta_WUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_theta_ARVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_theta_ARREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_theta_ARADDR", 64, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_theta_ARID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_theta_ARLEN", 8, hls_out, 1, "m_axi", "LEN", 1),
	Port_Property("m_axi_theta_ARSIZE", 3, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_theta_ARBURST", 2, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_theta_ARLOCK", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_theta_ARCACHE", 4, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_theta_ARPROT", 3, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_theta_ARQOS", 4, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_theta_ARREGION", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_theta_ARUSER", 1, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_theta_RVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_theta_RREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_theta_RDATA", 64, hls_in, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_theta_RLAST", 1, hls_in, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_theta_RID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_theta_RUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_theta_RRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_theta_BVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_theta_BREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_theta_BRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_theta_BID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_theta_BUSER", 1, hls_in, 1, "m_axi", "USER", 1),
	Port_Property("data_V_dout", 64, hls_in, 2, "ap_fifo", "fifo_data", 1),
	Port_Property("data_V_empty_n", 1, hls_in, 2, "ap_fifo", "fifo_status", 1),
	Port_Property("data_V_read", 1, hls_out, 2, "ap_fifo", "fifo_update", 1),
	Port_Property("label_V", 64, hls_in, 3, "ap_none", "in_data", 1),
	Port_Property("theta_V", 64, hls_in, 4, "ap_none", "in_data", 1),
	Port_Property("readLabels", 1, hls_in, 5, "ap_none", "in_data", 1),
	Port_Property("writeOutput", 1, hls_in, 6, "ap_none", "in_data", 1),
};
const char* HLS_Design_Meta::dut_name = "SgdLR";
