// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a0_aesl_mux_load_4_1125.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic a0_aesl_mux_load_4_1125::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic a0_aesl_mux_load_4_1125::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> a0_aesl_mux_load_4_1125::ap_ST_fsm_state1 = "1";
const sc_lv<2> a0_aesl_mux_load_4_1125::ap_ST_fsm_state2 = "10";
const sc_lv<32> a0_aesl_mux_load_4_1125::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> a0_aesl_mux_load_4_1125::ap_const_lv32_1 = "1";
const sc_lv<32> a0_aesl_mux_load_4_1125::ap_const_lv32_2 = "10";
const sc_lv<32> a0_aesl_mux_load_4_1125::ap_const_lv32_C = "1100";
const sc_lv<2> a0_aesl_mux_load_4_1125::ap_const_lv2_0 = "00";
const sc_lv<2> a0_aesl_mux_load_4_1125::ap_const_lv2_1 = "1";
const sc_lv<2> a0_aesl_mux_load_4_1125::ap_const_lv2_2 = "10";
const bool a0_aesl_mux_load_4_1125::ap_const_boolean_1 = true;

a0_aesl_mux_load_4_1125::a0_aesl_mux_load_4_1125(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( training_id_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_label_local_V_0_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( newIndex1_i_fu_119_p1 );

    SC_METHOD(thread_label_local_V_0_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( training_id_empty_n );

    SC_METHOD(thread_label_local_V_1_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( newIndex1_i_fu_119_p1 );

    SC_METHOD(thread_label_local_V_1_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( training_id_empty_n );

    SC_METHOD(thread_label_local_V_2_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( newIndex1_i_fu_119_p1 );

    SC_METHOD(thread_label_local_V_2_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( training_id_empty_n );

    SC_METHOD(thread_label_local_V_3_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( newIndex1_i_fu_119_p1 );

    SC_METHOD(thread_label_local_V_3_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( training_id_empty_n );

    SC_METHOD(thread_newIndex1_i_fu_119_p1);
    sensitive << ( newIndex_i_fu_109_p4 );

    SC_METHOD(thread_newIndex_i_fu_109_p4);
    sensitive << ( training_id_dout );

    SC_METHOD(thread_newSel6_fu_156_p3);
    sensitive << ( label_local_V_0_q0 );
    sensitive << ( label_local_V_3_q0 );
    sensitive << ( sel_tmp_fu_127_p2 );

    SC_METHOD(thread_newSel_fu_142_p3);
    sensitive << ( label_local_V_1_q0 );
    sensitive << ( label_local_V_2_q0 );
    sensitive << ( sel_tmp4_fu_137_p2 );

    SC_METHOD(thread_or_cond_fu_150_p2);
    sensitive << ( sel_tmp4_fu_137_p2 );
    sensitive << ( sel_tmp2_fu_132_p2 );

    SC_METHOD(thread_return_r);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( or_cond_fu_150_p2 );
    sensitive << ( newSel_fu_142_p3 );
    sensitive << ( newSel6_fu_156_p3 );

    SC_METHOD(thread_return_r_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sel_tmp2_fu_132_p2);
    sensitive << ( tmp_reg_173 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sel_tmp4_fu_137_p2);
    sensitive << ( tmp_reg_173 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_sel_tmp_fu_127_p2);
    sensitive << ( tmp_reg_173 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_fu_105_p1);
    sensitive << ( training_id_dout );

    SC_METHOD(thread_training_id_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( training_id_empty_n );

    SC_METHOD(thread_training_id_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( training_id_empty_n );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( training_id_empty_n );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a0_aesl_mux_load_4_1125_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, return_r, "(port)return_r");
    sc_trace(mVcdFile, return_r_ap_vld, "(port)return_r_ap_vld");
    sc_trace(mVcdFile, label_local_V_0_address0, "(port)label_local_V_0_address0");
    sc_trace(mVcdFile, label_local_V_0_ce0, "(port)label_local_V_0_ce0");
    sc_trace(mVcdFile, label_local_V_0_q0, "(port)label_local_V_0_q0");
    sc_trace(mVcdFile, label_local_V_1_address0, "(port)label_local_V_1_address0");
    sc_trace(mVcdFile, label_local_V_1_ce0, "(port)label_local_V_1_ce0");
    sc_trace(mVcdFile, label_local_V_1_q0, "(port)label_local_V_1_q0");
    sc_trace(mVcdFile, label_local_V_2_address0, "(port)label_local_V_2_address0");
    sc_trace(mVcdFile, label_local_V_2_ce0, "(port)label_local_V_2_ce0");
    sc_trace(mVcdFile, label_local_V_2_q0, "(port)label_local_V_2_q0");
    sc_trace(mVcdFile, label_local_V_3_address0, "(port)label_local_V_3_address0");
    sc_trace(mVcdFile, label_local_V_3_ce0, "(port)label_local_V_3_ce0");
    sc_trace(mVcdFile, label_local_V_3_q0, "(port)label_local_V_3_q0");
    sc_trace(mVcdFile, training_id_dout, "(port)training_id_dout");
    sc_trace(mVcdFile, training_id_empty_n, "(port)training_id_empty_n");
    sc_trace(mVcdFile, training_id_read, "(port)training_id_read");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, training_id_blk_n, "training_id_blk_n");
    sc_trace(mVcdFile, tmp_fu_105_p1, "tmp_fu_105_p1");
    sc_trace(mVcdFile, tmp_reg_173, "tmp_reg_173");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, newIndex1_i_fu_119_p1, "newIndex1_i_fu_119_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, newIndex_i_fu_109_p4, "newIndex_i_fu_109_p4");
    sc_trace(mVcdFile, sel_tmp4_fu_137_p2, "sel_tmp4_fu_137_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_132_p2, "sel_tmp2_fu_132_p2");
    sc_trace(mVcdFile, sel_tmp_fu_127_p2, "sel_tmp_fu_127_p2");
    sc_trace(mVcdFile, or_cond_fu_150_p2, "or_cond_fu_150_p2");
    sc_trace(mVcdFile, newSel_fu_142_p3, "newSel_fu_142_p3");
    sc_trace(mVcdFile, newSel6_fu_156_p3, "newSel6_fu_156_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

a0_aesl_mux_load_4_1125::~a0_aesl_mux_load_4_1125() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void a0_aesl_mux_load_4_1125::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(training_id_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        tmp_reg_173 = tmp_fu_105_p1.read();
    }
}

void a0_aesl_mux_load_4_1125::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void a0_aesl_mux_load_4_1125::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void a0_aesl_mux_load_4_1125::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(training_id_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void a0_aesl_mux_load_4_1125::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void a0_aesl_mux_load_4_1125::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void a0_aesl_mux_load_4_1125::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void a0_aesl_mux_load_4_1125::thread_label_local_V_0_address0() {
    label_local_V_0_address0 =  (sc_lv<11>) (newIndex1_i_fu_119_p1.read());
}

void a0_aesl_mux_load_4_1125::thread_label_local_V_0_ce0() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(training_id_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        label_local_V_0_ce0 = ap_const_logic_1;
    } else {
        label_local_V_0_ce0 = ap_const_logic_0;
    }
}

void a0_aesl_mux_load_4_1125::thread_label_local_V_1_address0() {
    label_local_V_1_address0 =  (sc_lv<11>) (newIndex1_i_fu_119_p1.read());
}

void a0_aesl_mux_load_4_1125::thread_label_local_V_1_ce0() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(training_id_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        label_local_V_1_ce0 = ap_const_logic_1;
    } else {
        label_local_V_1_ce0 = ap_const_logic_0;
    }
}

void a0_aesl_mux_load_4_1125::thread_label_local_V_2_address0() {
    label_local_V_2_address0 =  (sc_lv<11>) (newIndex1_i_fu_119_p1.read());
}

void a0_aesl_mux_load_4_1125::thread_label_local_V_2_ce0() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(training_id_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        label_local_V_2_ce0 = ap_const_logic_1;
    } else {
        label_local_V_2_ce0 = ap_const_logic_0;
    }
}

void a0_aesl_mux_load_4_1125::thread_label_local_V_3_address0() {
    label_local_V_3_address0 =  (sc_lv<11>) (newIndex1_i_fu_119_p1.read());
}

void a0_aesl_mux_load_4_1125::thread_label_local_V_3_ce0() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(training_id_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        label_local_V_3_ce0 = ap_const_logic_1;
    } else {
        label_local_V_3_ce0 = ap_const_logic_0;
    }
}

void a0_aesl_mux_load_4_1125::thread_newIndex1_i_fu_119_p1() {
    newIndex1_i_fu_119_p1 = esl_zext<64,11>(newIndex_i_fu_109_p4.read());
}

void a0_aesl_mux_load_4_1125::thread_newIndex_i_fu_109_p4() {
    newIndex_i_fu_109_p4 = training_id_dout.read().range(12, 2);
}

void a0_aesl_mux_load_4_1125::thread_newSel6_fu_156_p3() {
    newSel6_fu_156_p3 = (!sel_tmp_fu_127_p2.read()[0].is_01())? sc_lv<8>(): ((sel_tmp_fu_127_p2.read()[0].to_bool())? label_local_V_0_q0.read(): label_local_V_3_q0.read());
}

void a0_aesl_mux_load_4_1125::thread_newSel_fu_142_p3() {
    newSel_fu_142_p3 = (!sel_tmp4_fu_137_p2.read()[0].is_01())? sc_lv<8>(): ((sel_tmp4_fu_137_p2.read()[0].to_bool())? label_local_V_2_q0.read(): label_local_V_1_q0.read());
}

void a0_aesl_mux_load_4_1125::thread_or_cond_fu_150_p2() {
    or_cond_fu_150_p2 = (sel_tmp4_fu_137_p2.read() | sel_tmp2_fu_132_p2.read());
}

void a0_aesl_mux_load_4_1125::thread_return_r() {
    return_r = (!or_cond_fu_150_p2.read()[0].is_01())? sc_lv<8>(): ((or_cond_fu_150_p2.read()[0].to_bool())? newSel_fu_142_p3.read(): newSel6_fu_156_p3.read());
}

void a0_aesl_mux_load_4_1125::thread_return_r_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        return_r_ap_vld = ap_const_logic_1;
    } else {
        return_r_ap_vld = ap_const_logic_0;
    }
}

void a0_aesl_mux_load_4_1125::thread_sel_tmp2_fu_132_p2() {
    sel_tmp2_fu_132_p2 = (!tmp_reg_173.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_reg_173.read() == ap_const_lv2_1);
}

void a0_aesl_mux_load_4_1125::thread_sel_tmp4_fu_137_p2() {
    sel_tmp4_fu_137_p2 = (!tmp_reg_173.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(tmp_reg_173.read() == ap_const_lv2_2);
}

void a0_aesl_mux_load_4_1125::thread_sel_tmp_fu_127_p2() {
    sel_tmp_fu_127_p2 = (!tmp_reg_173.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_reg_173.read() == ap_const_lv2_0);
}

void a0_aesl_mux_load_4_1125::thread_tmp_fu_105_p1() {
    tmp_fu_105_p1 = training_id_dout.read().range(2-1, 0);
}

void a0_aesl_mux_load_4_1125::thread_training_id_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        training_id_blk_n = training_id_empty_n.read();
    } else {
        training_id_blk_n = ap_const_logic_1;
    }
}

void a0_aesl_mux_load_4_1125::thread_training_id_read() {
    if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(training_id_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        training_id_read = ap_const_logic_1;
    } else {
        training_id_read = ap_const_logic_0;
    }
}

void a0_aesl_mux_load_4_1125::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(training_id_empty_n.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

