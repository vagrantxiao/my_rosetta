// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _a0_aesl_mux_load_4_1125_HH_
#define _a0_aesl_mux_load_4_1125_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct a0_aesl_mux_load_4_1125 : public sc_module {
    // Port declarations 24
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > return_r;
    sc_out< sc_logic > return_r_ap_vld;
    sc_out< sc_lv<11> > label_local_V_0_address0;
    sc_out< sc_logic > label_local_V_0_ce0;
    sc_in< sc_lv<8> > label_local_V_0_q0;
    sc_out< sc_lv<11> > label_local_V_1_address0;
    sc_out< sc_logic > label_local_V_1_ce0;
    sc_in< sc_lv<8> > label_local_V_1_q0;
    sc_out< sc_lv<11> > label_local_V_2_address0;
    sc_out< sc_logic > label_local_V_2_ce0;
    sc_in< sc_lv<8> > label_local_V_2_q0;
    sc_out< sc_lv<11> > label_local_V_3_address0;
    sc_out< sc_logic > label_local_V_3_ce0;
    sc_in< sc_lv<8> > label_local_V_3_q0;
    sc_in< sc_lv<13> > training_id_dout;
    sc_in< sc_logic > training_id_empty_n;
    sc_out< sc_logic > training_id_read;


    // Module declarations
    a0_aesl_mux_load_4_1125(sc_module_name name);
    SC_HAS_PROCESS(a0_aesl_mux_load_4_1125);

    ~a0_aesl_mux_load_4_1125();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > training_id_blk_n;
    sc_signal< sc_lv<2> > tmp_fu_105_p1;
    sc_signal< sc_lv<2> > tmp_reg_173;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > newIndex1_i_fu_119_p1;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<11> > newIndex_i_fu_109_p4;
    sc_signal< sc_lv<1> > sel_tmp4_fu_137_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_132_p2;
    sc_signal< sc_lv<1> > sel_tmp_fu_127_p2;
    sc_signal< sc_lv<1> > or_cond_fu_150_p2;
    sc_signal< sc_lv<8> > newSel_fu_142_p3;
    sc_signal< sc_lv<8> > newSel6_fu_156_p3;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_label_local_V_0_address0();
    void thread_label_local_V_0_ce0();
    void thread_label_local_V_1_address0();
    void thread_label_local_V_1_ce0();
    void thread_label_local_V_2_address0();
    void thread_label_local_V_2_ce0();
    void thread_label_local_V_3_address0();
    void thread_label_local_V_3_ce0();
    void thread_newIndex1_i_fu_119_p1();
    void thread_newIndex_i_fu_109_p4();
    void thread_newSel6_fu_156_p3();
    void thread_newSel_fu_142_p3();
    void thread_or_cond_fu_150_p2();
    void thread_return_r();
    void thread_return_r_ap_vld();
    void thread_sel_tmp2_fu_132_p2();
    void thread_sel_tmp4_fu_137_p2();
    void thread_sel_tmp_fu_127_p2();
    void thread_tmp_fu_105_p1();
    void thread_training_id_blk_n();
    void thread_training_id_read();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
