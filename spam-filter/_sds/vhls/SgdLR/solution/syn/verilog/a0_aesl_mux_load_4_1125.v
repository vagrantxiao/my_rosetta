// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_aesl_mux_load_4_1125 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        return_r,
        return_r_ap_vld,
        label_local_V_0_address0,
        label_local_V_0_ce0,
        label_local_V_0_q0,
        label_local_V_1_address0,
        label_local_V_1_ce0,
        label_local_V_1_q0,
        label_local_V_2_address0,
        label_local_V_2_ce0,
        label_local_V_2_q0,
        label_local_V_3_address0,
        label_local_V_3_ce0,
        label_local_V_3_q0,
        training_id_dout,
        training_id_empty_n,
        training_id_read
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [7:0] return_r;
output   return_r_ap_vld;
output  [10:0] label_local_V_0_address0;
output   label_local_V_0_ce0;
input  [7:0] label_local_V_0_q0;
output  [10:0] label_local_V_1_address0;
output   label_local_V_1_ce0;
input  [7:0] label_local_V_1_q0;
output  [10:0] label_local_V_2_address0;
output   label_local_V_2_ce0;
input  [7:0] label_local_V_2_q0;
output  [10:0] label_local_V_3_address0;
output   label_local_V_3_ce0;
input  [7:0] label_local_V_3_q0;
input  [12:0] training_id_dout;
input   training_id_empty_n;
output   training_id_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg return_r_ap_vld;
reg label_local_V_0_ce0;
reg label_local_V_1_ce0;
reg label_local_V_2_ce0;
reg label_local_V_3_ce0;
reg training_id_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    training_id_blk_n;
wire   [1:0] tmp_fu_105_p1;
reg   [1:0] tmp_reg_173;
reg    ap_block_state1;
wire   [63:0] newIndex1_i_fu_119_p1;
wire    ap_CS_fsm_state2;
wire   [10:0] newIndex_i_fu_109_p4;
wire   [0:0] sel_tmp4_fu_137_p2;
wire   [0:0] sel_tmp2_fu_132_p2;
wire   [0:0] sel_tmp_fu_127_p2;
wire   [0:0] or_cond_fu_150_p2;
wire   [7:0] newSel_fu_142_p3;
wire   [7:0] newSel6_fu_156_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (training_id_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp_reg_173 <= tmp_fu_105_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (training_id_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_local_V_0_ce0 = 1'b1;
    end else begin
        label_local_V_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (training_id_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_local_V_1_ce0 = 1'b1;
    end else begin
        label_local_V_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (training_id_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_local_V_2_ce0 = 1'b1;
    end else begin
        label_local_V_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (training_id_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        label_local_V_3_ce0 = 1'b1;
    end else begin
        label_local_V_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        return_r_ap_vld = 1'b1;
    end else begin
        return_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        training_id_blk_n = training_id_empty_n;
    end else begin
        training_id_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (training_id_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        training_id_read = 1'b1;
    end else begin
        training_id_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (training_id_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (training_id_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign label_local_V_0_address0 = newIndex1_i_fu_119_p1;

assign label_local_V_1_address0 = newIndex1_i_fu_119_p1;

assign label_local_V_2_address0 = newIndex1_i_fu_119_p1;

assign label_local_V_3_address0 = newIndex1_i_fu_119_p1;

assign newIndex1_i_fu_119_p1 = newIndex_i_fu_109_p4;

assign newIndex_i_fu_109_p4 = {{training_id_dout[12:2]}};

assign newSel6_fu_156_p3 = ((sel_tmp_fu_127_p2[0:0] === 1'b1) ? label_local_V_0_q0 : label_local_V_3_q0);

assign newSel_fu_142_p3 = ((sel_tmp4_fu_137_p2[0:0] === 1'b1) ? label_local_V_2_q0 : label_local_V_1_q0);

assign or_cond_fu_150_p2 = (sel_tmp4_fu_137_p2 | sel_tmp2_fu_132_p2);

assign return_r = ((or_cond_fu_150_p2[0:0] === 1'b1) ? newSel_fu_142_p3 : newSel6_fu_156_p3);

assign sel_tmp2_fu_132_p2 = ((tmp_reg_173 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_137_p2 = ((tmp_reg_173 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp_fu_127_p2 = ((tmp_reg_173 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_fu_105_p1 = training_id_dout[1:0];

endmodule //a0_aesl_mux_load_4_1125
