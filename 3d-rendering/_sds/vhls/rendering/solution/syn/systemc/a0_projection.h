// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _a0_projection_HH_
#define _a0_projection_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct a0_projection : public sc_module {
    // Port declarations 17
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > triangle_2d_x0_V_wri;
    sc_in< sc_lv<8> > triangle_2d_y0_V_wri;
    sc_in< sc_lv<8> > triangle_3d_z0_V;
    sc_in< sc_lv<8> > triangle_2d_x1_V_wri;
    sc_in< sc_lv<8> > triangle_2d_y1_V_wri;
    sc_in< sc_lv<8> > triangle_3d_z1_V;
    sc_in< sc_lv<8> > triangle_2d_x2_V_wri;
    sc_in< sc_lv<8> > triangle_2d_y2_V_wri;
    sc_in< sc_lv<8> > triangle_3d_z2_V;
    sc_out< sc_lv<8> > ap_return_0;
    sc_out< sc_lv<8> > ap_return_1;
    sc_out< sc_lv<8> > ap_return_2;
    sc_out< sc_lv<8> > ap_return_3;
    sc_out< sc_lv<8> > ap_return_4;
    sc_out< sc_lv<8> > ap_return_5;
    sc_out< sc_lv<8> > ap_return_6;


    // Module declarations
    a0_projection(sc_module_name name);
    SC_HAS_PROCESS(a0_projection);

    ~a0_projection();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<8> > mul5_fu_88_p0;
    sc_signal< sc_lv<18> > mul5_fu_88_p2;
    sc_signal< sc_lv<8> > mul2_fu_108_p0;
    sc_signal< sc_lv<18> > mul2_fu_108_p2;
    sc_signal< sc_lv<8> > mul_fu_128_p0;
    sc_signal< sc_lv<18> > mul_fu_128_p2;
    sc_signal< sc_lv<8> > div1_fu_94_p4;
    sc_signal< sc_lv<8> > div3_fu_134_p4;
    sc_signal< sc_lv<8> > tmp_fu_144_p2;
    sc_signal< sc_lv<8> > div2_fu_114_p4;
    sc_signal< sc_lv<8> > triangle_2d_z_V_writ_fu_150_p2;
    sc_signal< sc_lv<18> > mul2_fu_108_p00;
    sc_signal< sc_lv<18> > mul5_fu_88_p00;
    sc_signal< sc_lv<18> > mul_fu_128_p00;
    static const sc_logic ap_const_logic_1;
    static const bool ap_const_boolean_1;
    static const sc_lv<18> ap_const_lv18_156;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_logic ap_const_logic_0;
    // Thread declarations
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_ap_return_2();
    void thread_ap_return_3();
    void thread_ap_return_4();
    void thread_ap_return_5();
    void thread_ap_return_6();
    void thread_div1_fu_94_p4();
    void thread_div2_fu_114_p4();
    void thread_div3_fu_134_p4();
    void thread_mul2_fu_108_p0();
    void thread_mul2_fu_108_p00();
    void thread_mul2_fu_108_p2();
    void thread_mul5_fu_88_p0();
    void thread_mul5_fu_88_p00();
    void thread_mul5_fu_88_p2();
    void thread_mul_fu_128_p0();
    void thread_mul_fu_128_p00();
    void thread_mul_fu_128_p2();
    void thread_tmp_fu_144_p2();
    void thread_triangle_2d_z_V_writ_fu_150_p2();
};

}

using namespace ap_rtl;

#endif
