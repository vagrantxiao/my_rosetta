-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_rasterization2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flag_V : IN STD_LOGIC_VECTOR (1 downto 0);
    max_min_0_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    max_min_2_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    max_min_4_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    max_index_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    triangle_2d_same_x0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_2d_same_y0_V : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_2d_same_x1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_2d_same_y1_V : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_2d_same_x2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_2d_same_y2_V : IN STD_LOGIC_VECTOR (7 downto 0);
    triangle_2d_same_z_V : IN STD_LOGIC_VECTOR (7 downto 0);
    fragment2_x_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment2_x_V_ce0 : OUT STD_LOGIC;
    fragment2_x_V_we0 : OUT STD_LOGIC;
    fragment2_x_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fragment2_y_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment2_y_V_ce0 : OUT STD_LOGIC;
    fragment2_y_V_we0 : OUT STD_LOGIC;
    fragment2_y_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fragment2_z_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment2_z_V_ce0 : OUT STD_LOGIC;
    fragment2_z_V_we0 : OUT STD_LOGIC;
    fragment2_z_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    fragment2_color_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    fragment2_color_V_ce0 : OUT STD_LOGIC;
    fragment2_color_V_we0 : OUT STD_LOGIC;
    fragment2_color_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of a0_rasterization2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv8_64 : STD_LOGIC_VECTOR (7 downto 0) := "01100100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t_V_4_reg_197 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_cast_fu_226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_cast_reg_483 : STD_LOGIC_VECTOR (15 downto 0);
    signal rhs_V_12_fu_230_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_12_reg_489 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_14_fu_234_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_14_reg_494 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_13_fu_238_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_13_reg_499 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_2_fu_248_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_2_reg_504 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_15_fu_252_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_15_reg_509 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_3_fu_262_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_3_reg_514 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_16_fu_266_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_16_reg_519 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_7_fu_276_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_7_reg_524 : STD_LOGIC_VECTOR (17 downto 0);
    signal lhs_V_17_fu_280_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal lhs_V_17_reg_529 : STD_LOGIC_VECTOR (8 downto 0);
    signal rhs_V_8_fu_290_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_8_reg_534 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_4_fu_300_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_4_reg_539 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_fu_310_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal rhs_V_reg_544 : STD_LOGIC_VECTOR (17 downto 0);
    signal exitcond_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_549_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_V_fu_324_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal k_V_reg_553 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal t_V_5_reg_558 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_phi_mux_t_V_4_phi_fu_201_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_agg_result_V_phi_fu_213_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal agg_result_V_reg_209 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal tmp_8_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_fu_68 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_V_fu_396_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_fu_347_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_V_fu_357_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_6_fu_242_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_9_fu_256_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_13_fu_270_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_1_fu_284_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_2_fu_294_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_3_fu_304_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_343_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_353_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_407_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_422_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp1_fu_371_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_437_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_i_fu_375_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_407_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_fu_363_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_407_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_407_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_415_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_415_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lhs_V_5_fu_367_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_415_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_415_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_422_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_422_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_430_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_430_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_430_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_437_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_437_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_437_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_445_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_445_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_445_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_445_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component a0_rendering_urem_16dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_rendering_udiv_16eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component a0_rendering_ama_subfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component a0_rendering_am_submbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    rendering_urem_16dEe_U35 : component a0_rendering_urem_16dEe
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_t_V_4_phi_fu_201_p4,
        din1 => grp_fu_330_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p2);

    rendering_udiv_16eOg_U36 : component a0_rendering_udiv_16eOg
    generic map (
        ID => 1,
        NUM_STAGE => 20,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_t_V_4_phi_fu_201_p4,
        din1 => grp_fu_335_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_335_p2);

    rendering_ama_subfYi_U37 : component a0_rendering_ama_subfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        din3_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_407_p0,
        din1 => grp_fu_407_p1,
        din2 => grp_fu_407_p2,
        din3 => grp_fu_415_p3,
        dout => grp_fu_407_p4);

    rendering_am_submbkb_U38 : component a0_rendering_am_submbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_415_p0,
        din1 => grp_fu_415_p1,
        din2 => grp_fu_415_p2,
        dout => grp_fu_415_p3);

    rendering_ama_subfYi_U39 : component a0_rendering_ama_subfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        din3_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_422_p0,
        din1 => grp_fu_422_p1,
        din2 => grp_fu_422_p2,
        din3 => grp_fu_430_p3,
        dout => grp_fu_422_p4);

    rendering_am_submbkb_U40 : component a0_rendering_am_submbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_430_p0,
        din1 => grp_fu_430_p1,
        din2 => grp_fu_430_p2,
        dout => grp_fu_430_p3);

    rendering_ama_subfYi_U41 : component a0_rendering_ama_subfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        din3_WIDTH => 18,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_437_p0,
        din1 => grp_fu_437_p1,
        din2 => grp_fu_437_p2,
        din3 => grp_fu_445_p3,
        dout => grp_fu_437_p4);

    rendering_am_submbkb_U42 : component a0_rendering_am_submbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 9,
        dout_WIDTH => 18)
    port map (
        din0 => grp_fu_445_p0,
        din1 => grp_fu_445_p1,
        din2 => grp_fu_445_p2,
        dout => grp_fu_445_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_fu_319_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_220_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_220_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv16_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    ap_return_preg <= ap_phi_mux_agg_result_V_phi_fu_213_p4;
                end if; 
            end if;
        end if;
    end process;


    agg_result_V_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_reg_472 = ap_const_lv1_1))) then 
                agg_result_V_reg_209 <= t_V_5_reg_558;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_220_p2 = ap_const_lv1_0))) then 
                agg_result_V_reg_209 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    t_V_4_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_220_p2 = ap_const_lv1_1))) then 
                t_V_4_reg_197 <= ap_const_lv16_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_reg_549 = ap_const_lv1_0))) then 
                t_V_4_reg_197 <= k_V_reg_553;
            end if; 
        end if;
    end process;

    t_V_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_10_fu_380_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (exitcond_reg_549_pp0_iter18_reg = ap_const_lv1_0))) then 
                t_V_fu_68 <= i_V_fu_396_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_220_p2 = ap_const_lv1_1))) then 
                t_V_fu_68 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_549 <= exitcond_fu_319_p2;
                exitcond_reg_549_pp0_iter1_reg <= exitcond_reg_549;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_reg_549_pp0_iter10_reg <= exitcond_reg_549_pp0_iter9_reg;
                exitcond_reg_549_pp0_iter11_reg <= exitcond_reg_549_pp0_iter10_reg;
                exitcond_reg_549_pp0_iter12_reg <= exitcond_reg_549_pp0_iter11_reg;
                exitcond_reg_549_pp0_iter13_reg <= exitcond_reg_549_pp0_iter12_reg;
                exitcond_reg_549_pp0_iter14_reg <= exitcond_reg_549_pp0_iter13_reg;
                exitcond_reg_549_pp0_iter15_reg <= exitcond_reg_549_pp0_iter14_reg;
                exitcond_reg_549_pp0_iter16_reg <= exitcond_reg_549_pp0_iter15_reg;
                exitcond_reg_549_pp0_iter17_reg <= exitcond_reg_549_pp0_iter16_reg;
                exitcond_reg_549_pp0_iter18_reg <= exitcond_reg_549_pp0_iter17_reg;
                exitcond_reg_549_pp0_iter2_reg <= exitcond_reg_549_pp0_iter1_reg;
                exitcond_reg_549_pp0_iter3_reg <= exitcond_reg_549_pp0_iter2_reg;
                exitcond_reg_549_pp0_iter4_reg <= exitcond_reg_549_pp0_iter3_reg;
                exitcond_reg_549_pp0_iter5_reg <= exitcond_reg_549_pp0_iter4_reg;
                exitcond_reg_549_pp0_iter6_reg <= exitcond_reg_549_pp0_iter5_reg;
                exitcond_reg_549_pp0_iter7_reg <= exitcond_reg_549_pp0_iter6_reg;
                exitcond_reg_549_pp0_iter8_reg <= exitcond_reg_549_pp0_iter7_reg;
                exitcond_reg_549_pp0_iter9_reg <= exitcond_reg_549_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                k_V_reg_553 <= k_V_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_220_p2 = ap_const_lv1_1))) then
                    lhs_V_14_reg_494(7 downto 0) <= lhs_V_14_fu_234_p1(7 downto 0);
                    lhs_V_15_reg_509(7 downto 0) <= lhs_V_15_fu_252_p1(7 downto 0);
                    lhs_V_16_reg_519(7 downto 0) <= lhs_V_16_fu_266_p1(7 downto 0);
                    lhs_V_17_reg_529(7 downto 0) <= lhs_V_17_fu_280_p1(7 downto 0);
                    rhs_V_12_reg_489(7 downto 0) <= rhs_V_12_fu_230_p1(7 downto 0);
                    rhs_V_13_reg_499(7 downto 0) <= rhs_V_13_fu_238_p1(7 downto 0);
                rhs_V_2_reg_504 <= rhs_V_2_fu_248_p1;
                rhs_V_3_reg_514 <= rhs_V_3_fu_262_p1;
                rhs_V_4_reg_539 <= rhs_V_4_fu_300_p1;
                rhs_V_7_reg_524 <= rhs_V_7_fu_276_p1;
                rhs_V_8_reg_534 <= rhs_V_8_fu_290_p1;
                rhs_V_reg_544 <= rhs_V_fu_310_p1;
                    tmp_4_cast_reg_483(7 downto 0) <= tmp_4_cast_fu_226_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then
                t_V_5_reg_558 <= t_V_fu_68;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_472 <= tmp_fu_220_p2;
            end if;
        end if;
    end process;
    tmp_4_cast_reg_483(15 downto 8) <= "00000000";
    rhs_V_12_reg_489(8) <= '0';
    lhs_V_14_reg_494(8) <= '0';
    rhs_V_13_reg_499(8) <= '0';
    lhs_V_15_reg_509(8) <= '0';
    lhs_V_16_reg_519(8) <= '0';
    lhs_V_17_reg_529(8) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_220_p2, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_220_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_220_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state22 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_agg_result_V_phi_fu_213_p4_assign_proc : process(tmp_reg_472, t_V_5_reg_558, agg_result_V_reg_209, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) and (tmp_reg_472 = ap_const_lv1_1))) then 
            ap_phi_mux_agg_result_V_phi_fu_213_p4 <= t_V_5_reg_558;
        else 
            ap_phi_mux_agg_result_V_phi_fu_213_p4 <= agg_result_V_reg_209;
        end if; 
    end process;


    ap_phi_mux_t_V_4_phi_fu_201_p4_assign_proc : process(t_V_4_reg_197, ap_CS_fsm_pp0_stage0, exitcond_reg_549, k_V_reg_553, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (exitcond_reg_549 = ap_const_lv1_0))) then 
            ap_phi_mux_t_V_4_phi_fu_201_p4 <= k_V_reg_553;
        else 
            ap_phi_mux_t_V_4_phi_fu_201_p4 <= t_V_4_reg_197;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_phi_mux_agg_result_V_phi_fu_213_p4, ap_CS_fsm_state22, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            ap_return <= ap_phi_mux_agg_result_V_phi_fu_213_p4;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    exitcond_fu_319_p2 <= "1" when (ap_phi_mux_t_V_4_phi_fu_201_p4 = max_index_0_V_read) else "0";
    fragment2_color_V_address0 <= tmp_8_fu_388_p1(9 - 1 downto 0);

    fragment2_color_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            fragment2_color_V_ce0 <= ap_const_logic_1;
        else 
            fragment2_color_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_color_V_d0 <= ap_const_lv8_64;

    fragment2_color_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_549_pp0_iter18_reg, ap_enable_reg_pp0_iter19, tmp_10_fu_380_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_10_fu_380_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (exitcond_reg_549_pp0_iter18_reg = ap_const_lv1_0))) then 
            fragment2_color_V_we0 <= ap_const_logic_1;
        else 
            fragment2_color_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_x_V_address0 <= tmp_8_fu_388_p1(9 - 1 downto 0);

    fragment2_x_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            fragment2_x_V_ce0 <= ap_const_logic_1;
        else 
            fragment2_x_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_x_V_d0 <= x_V_fu_347_p2;

    fragment2_x_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_549_pp0_iter18_reg, ap_enable_reg_pp0_iter19, tmp_10_fu_380_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_10_fu_380_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (exitcond_reg_549_pp0_iter18_reg = ap_const_lv1_0))) then 
            fragment2_x_V_we0 <= ap_const_logic_1;
        else 
            fragment2_x_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_y_V_address0 <= tmp_8_fu_388_p1(9 - 1 downto 0);

    fragment2_y_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            fragment2_y_V_ce0 <= ap_const_logic_1;
        else 
            fragment2_y_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_y_V_d0 <= y_V_fu_357_p2;

    fragment2_y_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_549_pp0_iter18_reg, ap_enable_reg_pp0_iter19, tmp_10_fu_380_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_10_fu_380_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (exitcond_reg_549_pp0_iter18_reg = ap_const_lv1_0))) then 
            fragment2_y_V_we0 <= ap_const_logic_1;
        else 
            fragment2_y_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_z_V_address0 <= tmp_8_fu_388_p1(9 - 1 downto 0);

    fragment2_z_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
            fragment2_z_V_ce0 <= ap_const_logic_1;
        else 
            fragment2_z_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    fragment2_z_V_d0 <= triangle_2d_same_z_V;

    fragment2_z_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_549_pp0_iter18_reg, ap_enable_reg_pp0_iter19, tmp_10_fu_380_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_10_fu_380_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (exitcond_reg_549_pp0_iter18_reg = ap_const_lv1_0))) then 
            fragment2_z_V_we0 <= ap_const_logic_1;
        else 
            fragment2_z_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_330_p1 <= tmp_4_cast_reg_483(8 - 1 downto 0);
    grp_fu_335_p1 <= tmp_4_cast_reg_483(8 - 1 downto 0);
    grp_fu_407_p0 <= lhs_V_fu_363_p1(8 - 1 downto 0);
    grp_fu_407_p1 <= rhs_V_12_reg_489(8 - 1 downto 0);
    grp_fu_407_p2 <= rhs_V_2_reg_504(9 - 1 downto 0);
    grp_fu_415_p0 <= lhs_V_5_fu_367_p1(8 - 1 downto 0);
    grp_fu_415_p1 <= rhs_V_13_reg_499(8 - 1 downto 0);
    grp_fu_415_p2 <= rhs_V_3_reg_514(9 - 1 downto 0);
    grp_fu_422_p0 <= lhs_V_fu_363_p1(8 - 1 downto 0);
    grp_fu_422_p1 <= lhs_V_15_reg_509(8 - 1 downto 0);
    grp_fu_422_p2 <= rhs_V_7_reg_524(9 - 1 downto 0);
    grp_fu_430_p0 <= lhs_V_5_fu_367_p1(8 - 1 downto 0);
    grp_fu_430_p1 <= lhs_V_14_reg_494(8 - 1 downto 0);
    grp_fu_430_p2 <= rhs_V_8_reg_534(9 - 1 downto 0);
    grp_fu_437_p0 <= lhs_V_fu_363_p1(8 - 1 downto 0);
    grp_fu_437_p1 <= lhs_V_17_reg_529(8 - 1 downto 0);
    grp_fu_437_p2 <= rhs_V_4_reg_539(9 - 1 downto 0);
    grp_fu_445_p0 <= lhs_V_5_fu_367_p1(8 - 1 downto 0);
    grp_fu_445_p1 <= lhs_V_16_reg_519(8 - 1 downto 0);
    grp_fu_445_p2 <= rhs_V_reg_544(9 - 1 downto 0);
    i_V_fu_396_p2 <= std_logic_vector(unsigned(t_V_fu_68) + unsigned(ap_const_lv16_1));
    k_V_fu_324_p2 <= std_logic_vector(unsigned(ap_phi_mux_t_V_4_phi_fu_201_p4) + unsigned(ap_const_lv16_1));
    lhs_V_14_fu_234_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_y1_V),9));
    lhs_V_15_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_x1_V),9));
    lhs_V_16_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_y2_V),9));
    lhs_V_17_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_x2_V),9));
    lhs_V_5_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_fu_357_p2),9));
    lhs_V_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_V_fu_347_p2),9));
    r_V_13_fu_270_p2 <= std_logic_vector(unsigned(lhs_V_16_fu_266_p1) - unsigned(lhs_V_14_fu_234_p1));
    r_V_1_fu_284_p2 <= std_logic_vector(unsigned(lhs_V_17_fu_280_p1) - unsigned(lhs_V_15_fu_252_p1));
    r_V_2_fu_294_p2 <= std_logic_vector(unsigned(rhs_V_13_fu_238_p1) - unsigned(lhs_V_16_fu_266_p1));
    r_V_3_fu_304_p2 <= std_logic_vector(unsigned(rhs_V_12_fu_230_p1) - unsigned(lhs_V_17_fu_280_p1));
    r_V_6_fu_242_p2 <= std_logic_vector(unsigned(lhs_V_14_fu_234_p1) - unsigned(rhs_V_13_fu_238_p1));
    r_V_9_fu_256_p2 <= std_logic_vector(unsigned(lhs_V_15_fu_252_p1) - unsigned(rhs_V_12_fu_230_p1));
    r_V_fu_343_p1 <= grp_fu_330_p2(8 - 1 downto 0);
    rhs_V_12_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_x0_V),9));
    rhs_V_13_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(triangle_2d_same_y0_V),9));
        rhs_V_2_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_fu_242_p2),18));

        rhs_V_3_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_9_fu_256_p2),18));

        rhs_V_4_fu_300_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_2_fu_294_p2),18));

        rhs_V_7_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_13_fu_270_p2),18));

        rhs_V_8_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_1_fu_284_p2),18));

        rhs_V_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_3_fu_304_p2),18));

    tmp1_fu_371_p2 <= (grp_fu_422_p4 or grp_fu_407_p4);
    tmp_10_fu_380_p3 <= tmp_i_fu_375_p2(17 downto 17);
    tmp_4_cast_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(max_min_4_V_read),16));
    tmp_8_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_fu_68),64));
    tmp_9_fu_353_p1 <= grp_fu_335_p2(8 - 1 downto 0);
    tmp_fu_220_p2 <= "1" when (flag_V = ap_const_lv2_0) else "0";
    tmp_i_fu_375_p2 <= (tmp1_fu_371_p2 or grp_fu_437_p4);
    x_V_fu_347_p2 <= std_logic_vector(unsigned(max_min_0_V_read) + unsigned(r_V_fu_343_p1));
    y_V_fu_357_p2 <= std_logic_vector(unsigned(max_min_2_V_read) + unsigned(tmp_9_fu_353_p1));
end behav;
