-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_tensor_weight_y is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    out_product_val_dout : IN STD_LOGIC_VECTOR (191 downto 0);
    out_product_val_empty_n : IN STD_LOGIC;
    out_product_val_read : OUT STD_LOGIC;
    tensor_y_val_din : OUT STD_LOGIC_VECTOR (191 downto 0);
    tensor_y_val_full_n : IN STD_LOGIC;
    tensor_y_val_write : OUT STD_LOGIC );
end;


architecture behav of a0_tensor_weight_y is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv192_lc_1 : STD_LOGIC_VECTOR (191 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3EA60AA6 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101001100000101010100110";
    constant ap_const_lv32_3EB3DD98 : STD_LOGIC_VECTOR (31 downto 0) := "00111110101100111101110110011000";
    constant ap_const_lv9_1B4 : STD_LOGIC_VECTOR (8 downto 0) := "110110100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv19_6D400 : STD_LOGIC_VECTOR (18 downto 0) := "1101101010000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_20 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_const_lv9_3F : STD_LOGIC_VECTOR (8 downto 0) := "000111111";
    constant ap_const_lv9_40 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_const_lv9_5F : STD_LOGIC_VECTOR (8 downto 0) := "001011111";
    constant ap_const_lv9_60 : STD_LOGIC_VECTOR (8 downto 0) := "001100000";
    constant ap_const_lv9_7F : STD_LOGIC_VECTOR (8 downto 0) := "001111111";
    constant ap_const_lv9_80 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_const_lv9_9F : STD_LOGIC_VECTOR (8 downto 0) := "010011111";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv9_BF : STD_LOGIC_VECTOR (8 downto 0) := "010111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal out_product_val_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_819 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_819_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_828 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_828_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tensor_y_val_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal tmp_4_mid2_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_145 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_reg_156 : STD_LOGIC_VECTOR (8 downto 0);
    signal col_assign_reg_167 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_predicate_op146_read_state11 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_819_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_819_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_819_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_819_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_819_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_819_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_819_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_392_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_1_mid2_fu_424_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_828_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_828_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_828_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_828_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_828_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_828_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_828_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid2_reg_832_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_fu_474_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid2_reg_842_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_mid2_fu_482_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal buf_val_1_val_addr_reg_851 : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_1_val_addr_reg_851_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_1_val_addr_reg_851_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_1_val_addr_reg_851_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_1_val_addr_reg_851_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857 : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_2_val_addr_reg_857_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal c_fu_496_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal buf_val_1_val_q0 : STD_LOGIC_VECTOR (191 downto 0);
    signal buf_val_1_val_load_reg_868 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_0_1_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_0_2_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_0_3_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_0_4_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_0_5_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_val_2_val_q0 : STD_LOGIC_VECTOR (191 downto 0);
    signal buf_val_2_val_load_reg_938 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_30_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_0_1_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_200_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_0_2_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_0_3_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_0_4_reg_998 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_0_5_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_1_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_1_1_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_308_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_1_2_reg_1018 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_1_3_reg_1023 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_318_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_1_4_reg_1028 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_1_5_reg_1033 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_1_reg_1073 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_1_1_reg_1078 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_1_2_reg_1083 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_1_3_reg_1088 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_236_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_1_4_reg_1093 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_240_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_1_5_reg_1098 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_2_reg_1103 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_2_1_reg_1108 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_2_2_reg_1113 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_2_3_reg_1118 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_2_4_reg_1123 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_2_5_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_fu_746_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_42_reg_1133 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_fu_757_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_43_reg_1138 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_fu_768_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_fu_779_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_45_reg_1148 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_fu_790_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_reg_1153 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_fu_801_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_reg_1158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal buf_val_1_val_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal buf_val_1_val_ce0 : STD_LOGIC;
    signal buf_val_1_val_ce1 : STD_LOGIC;
    signal buf_val_1_val_we1 : STD_LOGIC;
    signal buf_val_2_val_ce0 : STD_LOGIC;
    signal buf_val_2_val_ce1 : STD_LOGIC;
    signal buf_val_2_val_we1 : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter4_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter5_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter6_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter7_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter8_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter9_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal ap_phi_reg_pp0_iter10_tmp_8_reg_178 : STD_LOGIC_VECTOR (191 downto 0);
    signal tmp_s_fu_490_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_273_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_288_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_308_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_318_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_323_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_328_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_343_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_348_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_364_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_s_fu_412_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_mid1_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_432_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp1_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_mid1_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_mid1_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal col_assign_mid2_fu_404_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_502_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_510_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_524_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_538_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_552_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_566_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_fu_580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_588_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_602_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_fu_616_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_630_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_644_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_fu_658_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_fu_667_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_682_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_697_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_fu_712_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_727_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_742_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_fu_753_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_fu_775_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_fu_797_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_ce : STD_LOGIC;
    signal grp_fu_195_ce : STD_LOGIC;
    signal grp_fu_200_ce : STD_LOGIC;
    signal grp_fu_205_ce : STD_LOGIC;
    signal grp_fu_210_ce : STD_LOGIC;
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_220_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_228_ce : STD_LOGIC;
    signal grp_fu_232_ce : STD_LOGIC;
    signal grp_fu_236_ce : STD_LOGIC;
    signal grp_fu_240_ce : STD_LOGIC;
    signal grp_fu_244_ce : STD_LOGIC;
    signal grp_fu_248_ce : STD_LOGIC;
    signal grp_fu_252_ce : STD_LOGIC;
    signal grp_fu_256_ce : STD_LOGIC;
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_264_ce : STD_LOGIC;
    signal grp_fu_268_ce : STD_LOGIC;
    signal grp_fu_273_ce : STD_LOGIC;
    signal grp_fu_278_ce : STD_LOGIC;
    signal grp_fu_283_ce : STD_LOGIC;
    signal grp_fu_288_ce : STD_LOGIC;
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_298_ce : STD_LOGIC;
    signal grp_fu_303_ce : STD_LOGIC;
    signal grp_fu_308_ce : STD_LOGIC;
    signal grp_fu_313_ce : STD_LOGIC;
    signal grp_fu_318_ce : STD_LOGIC;
    signal grp_fu_323_ce : STD_LOGIC;
    signal grp_fu_328_ce : STD_LOGIC;
    signal grp_fu_333_ce : STD_LOGIC;
    signal grp_fu_338_ce : STD_LOGIC;
    signal grp_fu_343_ce : STD_LOGIC;
    signal grp_fu_348_ce : STD_LOGIC;
    signal grp_fu_353_ce : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_139 : BOOLEAN;

    component a0_optical_flow_faddhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_optical_flow_fmulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_tensor_weight_y_bBew IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (191 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (191 downto 0) );
    end component;



begin
    buf_val_1_val_U : component a0_tensor_weight_y_bBew
    generic map (
        DataWidth => 192,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_1_val_address0,
        ce0 => buf_val_1_val_ce0,
        q0 => buf_val_1_val_q0,
        address1 => buf_val_1_val_addr_reg_851_pp0_iter4_reg,
        ce1 => buf_val_1_val_ce1,
        we1 => buf_val_1_val_we1,
        d1 => buf_val_2_val_q0);

    buf_val_2_val_U : component a0_tensor_weight_y_bBew
    generic map (
        DataWidth => 192,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => buf_val_2_val_addr_reg_857_pp0_iter3_reg,
        ce0 => buf_val_2_val_ce0,
        q0 => buf_val_2_val_q0,
        address1 => buf_val_2_val_addr_reg_857_pp0_iter9_reg,
        ce1 => buf_val_2_val_ce1,
        we1 => buf_val_2_val_we1,
        d1 => ap_phi_reg_pp0_iter10_tmp_8_reg_178);

    optical_flow_faddhbi_U164 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_reg_908,
        din1 => ap_const_lv32_0,
        ce => grp_fu_190_ce,
        dout => grp_fu_190_p2);

    optical_flow_faddhbi_U165 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_0_1_reg_913,
        din1 => ap_const_lv32_0,
        ce => grp_fu_195_ce,
        dout => grp_fu_195_p2);

    optical_flow_faddhbi_U166 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_0_2_reg_918,
        din1 => ap_const_lv32_0,
        ce => grp_fu_200_ce,
        dout => grp_fu_200_p2);

    optical_flow_faddhbi_U167 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_0_3_reg_923,
        din1 => ap_const_lv32_0,
        ce => grp_fu_205_ce,
        dout => grp_fu_205_p2);

    optical_flow_faddhbi_U168 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_0_4_reg_928,
        din1 => ap_const_lv32_0,
        ce => grp_fu_210_ce,
        dout => grp_fu_210_p2);

    optical_flow_faddhbi_U169 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_0_5_reg_933,
        din1 => ap_const_lv32_0,
        ce => grp_fu_215_ce,
        dout => grp_fu_215_p2);

    optical_flow_faddhbi_U170 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_30_reg_978,
        din1 => tmp_18_1_reg_1008,
        ce => grp_fu_220_ce,
        dout => grp_fu_220_p2);

    optical_flow_faddhbi_U171 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_0_1_reg_983,
        din1 => tmp_18_1_1_reg_1013,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    optical_flow_faddhbi_U172 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_0_2_reg_988,
        din1 => tmp_18_1_2_reg_1018,
        ce => grp_fu_228_ce,
        dout => grp_fu_228_p2);

    optical_flow_faddhbi_U173 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_0_3_reg_993,
        din1 => tmp_18_1_3_reg_1023,
        ce => grp_fu_232_ce,
        dout => grp_fu_232_p2);

    optical_flow_faddhbi_U174 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_0_4_reg_998,
        din1 => tmp_18_1_4_reg_1028,
        ce => grp_fu_236_ce,
        dout => grp_fu_236_p2);

    optical_flow_faddhbi_U175 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_0_5_reg_1003,
        din1 => tmp_18_1_5_reg_1033,
        ce => grp_fu_240_ce,
        dout => grp_fu_240_p2);

    optical_flow_faddhbi_U176 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_1_reg_1073,
        din1 => tmp_18_2_reg_1103,
        ce => grp_fu_244_ce,
        dout => grp_fu_244_p2);

    optical_flow_faddhbi_U177 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_1_1_reg_1078,
        din1 => tmp_18_2_1_reg_1108,
        ce => grp_fu_248_ce,
        dout => grp_fu_248_p2);

    optical_flow_faddhbi_U178 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_1_2_reg_1083,
        din1 => tmp_18_2_2_reg_1113,
        ce => grp_fu_252_ce,
        dout => grp_fu_252_p2);

    optical_flow_faddhbi_U179 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_1_3_reg_1088,
        din1 => tmp_18_2_3_reg_1118,
        ce => grp_fu_256_ce,
        dout => grp_fu_256_p2);

    optical_flow_faddhbi_U180 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_1_4_reg_1093,
        din1 => tmp_18_2_4_reg_1123,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p2);

    optical_flow_faddhbi_U181 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_1_5_reg_1098,
        din1 => tmp_18_2_5_reg_1128,
        ce => grp_fu_264_ce,
        dout => grp_fu_264_p2);

    optical_flow_fmulibs_U182 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_268_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_268_ce,
        dout => grp_fu_268_p2);

    optical_flow_fmulibs_U183 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_273_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p2);

    optical_flow_fmulibs_U184 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_278_ce,
        dout => grp_fu_278_p2);

    optical_flow_fmulibs_U185 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_283_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_283_ce,
        dout => grp_fu_283_p2);

    optical_flow_fmulibs_U186 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_288_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_288_ce,
        dout => grp_fu_288_p2);

    optical_flow_fmulibs_U187 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_293_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p2);

    optical_flow_fmulibs_U188 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_298_p0,
        din1 => ap_const_lv32_3EB3DD98,
        ce => grp_fu_298_ce,
        dout => grp_fu_298_p2);

    optical_flow_fmulibs_U189 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_303_p0,
        din1 => ap_const_lv32_3EB3DD98,
        ce => grp_fu_303_ce,
        dout => grp_fu_303_p2);

    optical_flow_fmulibs_U190 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_308_p0,
        din1 => ap_const_lv32_3EB3DD98,
        ce => grp_fu_308_ce,
        dout => grp_fu_308_p2);

    optical_flow_fmulibs_U191 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_313_p0,
        din1 => ap_const_lv32_3EB3DD98,
        ce => grp_fu_313_ce,
        dout => grp_fu_313_p2);

    optical_flow_fmulibs_U192 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_318_p0,
        din1 => ap_const_lv32_3EB3DD98,
        ce => grp_fu_318_ce,
        dout => grp_fu_318_p2);

    optical_flow_fmulibs_U193 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_323_p0,
        din1 => ap_const_lv32_3EB3DD98,
        ce => grp_fu_323_ce,
        dout => grp_fu_323_p2);

    optical_flow_fmulibs_U194 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_328_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_328_ce,
        dout => grp_fu_328_p2);

    optical_flow_fmulibs_U195 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_333_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_333_ce,
        dout => grp_fu_333_p2);

    optical_flow_fmulibs_U196 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_338_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_338_ce,
        dout => grp_fu_338_p2);

    optical_flow_fmulibs_U197 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_343_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_343_ce,
        dout => grp_fu_343_p2);

    optical_flow_fmulibs_U198 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_348_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_348_ce,
        dout => grp_fu_348_p2);

    optical_flow_fmulibs_U199 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_353_p0,
        din1 => ap_const_lv32_3EA60AA6,
        ce => grp_fu_353_ce,
        dout => grp_fu_353_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter10_tmp_8_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((tmp_1_mid2_reg_828_pp0_iter8_reg = ap_const_lv1_1) and (exitcond_flatten_reg_819_pp0_iter8_reg = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter10_tmp_8_reg_178 <= out_product_val_dout;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter10_tmp_8_reg_178 <= ap_phi_reg_pp0_iter9_tmp_8_reg_178;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_8_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_139)) then
                if (((exitcond_flatten_fu_386_p2 = ap_const_lv1_0) and (tmp_1_mid2_fu_424_p3 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_8_reg_178 <= ap_const_lv192_lc_1;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_8_reg_178 <= ap_phi_reg_pp0_iter0_tmp_8_reg_178;
                end if;
            end if; 
        end if;
    end process;

    col_assign_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                col_assign_reg_167 <= c_fu_496_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                col_assign_reg_167 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_145 <= indvar_flatten_next_fu_392_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_145 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    r_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                r_reg_156 <= r_mid2_fu_482_p3;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_reg_156 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_tmp_8_reg_178 <= ap_phi_reg_pp0_iter1_tmp_8_reg_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_tmp_8_reg_178 <= ap_phi_reg_pp0_iter2_tmp_8_reg_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_tmp_8_reg_178 <= ap_phi_reg_pp0_iter3_tmp_8_reg_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_tmp_8_reg_178 <= ap_phi_reg_pp0_iter4_tmp_8_reg_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_tmp_8_reg_178 <= ap_phi_reg_pp0_iter5_tmp_8_reg_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_tmp_8_reg_178 <= ap_phi_reg_pp0_iter6_tmp_8_reg_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_tmp_8_reg_178 <= ap_phi_reg_pp0_iter7_tmp_8_reg_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_tmp_8_reg_178 <= ap_phi_reg_pp0_iter8_tmp_8_reg_178;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_386_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buf_val_1_val_addr_reg_851 <= tmp_s_fu_490_p1(10 - 1 downto 0);
                buf_val_2_val_addr_reg_857 <= tmp_s_fu_490_p1(10 - 1 downto 0);
                or_cond_mid2_reg_832 <= or_cond_mid2_fu_454_p3;
                tmp_1_mid2_reg_828 <= tmp_1_mid2_fu_424_p3;
                tmp_4_mid2_reg_842 <= tmp_4_mid2_fu_474_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buf_val_1_val_addr_reg_851_pp0_iter1_reg <= buf_val_1_val_addr_reg_851;
                buf_val_2_val_addr_reg_857_pp0_iter1_reg <= buf_val_2_val_addr_reg_857;
                exitcond_flatten_reg_819 <= exitcond_flatten_fu_386_p2;
                exitcond_flatten_reg_819_pp0_iter1_reg <= exitcond_flatten_reg_819;
                or_cond_mid2_reg_832_pp0_iter1_reg <= or_cond_mid2_reg_832;
                tmp_1_mid2_reg_828_pp0_iter1_reg <= tmp_1_mid2_reg_828;
                tmp_4_mid2_reg_842_pp0_iter1_reg <= tmp_4_mid2_reg_842;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                buf_val_1_val_addr_reg_851_pp0_iter2_reg <= buf_val_1_val_addr_reg_851_pp0_iter1_reg;
                buf_val_1_val_addr_reg_851_pp0_iter3_reg <= buf_val_1_val_addr_reg_851_pp0_iter2_reg;
                buf_val_1_val_addr_reg_851_pp0_iter4_reg <= buf_val_1_val_addr_reg_851_pp0_iter3_reg;
                buf_val_2_val_addr_reg_857_pp0_iter2_reg <= buf_val_2_val_addr_reg_857_pp0_iter1_reg;
                buf_val_2_val_addr_reg_857_pp0_iter3_reg <= buf_val_2_val_addr_reg_857_pp0_iter2_reg;
                buf_val_2_val_addr_reg_857_pp0_iter4_reg <= buf_val_2_val_addr_reg_857_pp0_iter3_reg;
                buf_val_2_val_addr_reg_857_pp0_iter5_reg <= buf_val_2_val_addr_reg_857_pp0_iter4_reg;
                buf_val_2_val_addr_reg_857_pp0_iter6_reg <= buf_val_2_val_addr_reg_857_pp0_iter5_reg;
                buf_val_2_val_addr_reg_857_pp0_iter7_reg <= buf_val_2_val_addr_reg_857_pp0_iter6_reg;
                buf_val_2_val_addr_reg_857_pp0_iter8_reg <= buf_val_2_val_addr_reg_857_pp0_iter7_reg;
                buf_val_2_val_addr_reg_857_pp0_iter9_reg <= buf_val_2_val_addr_reg_857_pp0_iter8_reg;
                exitcond_flatten_reg_819_pp0_iter2_reg <= exitcond_flatten_reg_819_pp0_iter1_reg;
                exitcond_flatten_reg_819_pp0_iter3_reg <= exitcond_flatten_reg_819_pp0_iter2_reg;
                exitcond_flatten_reg_819_pp0_iter4_reg <= exitcond_flatten_reg_819_pp0_iter3_reg;
                exitcond_flatten_reg_819_pp0_iter5_reg <= exitcond_flatten_reg_819_pp0_iter4_reg;
                exitcond_flatten_reg_819_pp0_iter6_reg <= exitcond_flatten_reg_819_pp0_iter5_reg;
                exitcond_flatten_reg_819_pp0_iter7_reg <= exitcond_flatten_reg_819_pp0_iter6_reg;
                exitcond_flatten_reg_819_pp0_iter8_reg <= exitcond_flatten_reg_819_pp0_iter7_reg;
                or_cond_mid2_reg_832_pp0_iter10_reg <= or_cond_mid2_reg_832_pp0_iter9_reg;
                or_cond_mid2_reg_832_pp0_iter11_reg <= or_cond_mid2_reg_832_pp0_iter10_reg;
                or_cond_mid2_reg_832_pp0_iter12_reg <= or_cond_mid2_reg_832_pp0_iter11_reg;
                or_cond_mid2_reg_832_pp0_iter13_reg <= or_cond_mid2_reg_832_pp0_iter12_reg;
                or_cond_mid2_reg_832_pp0_iter14_reg <= or_cond_mid2_reg_832_pp0_iter13_reg;
                or_cond_mid2_reg_832_pp0_iter15_reg <= or_cond_mid2_reg_832_pp0_iter14_reg;
                or_cond_mid2_reg_832_pp0_iter2_reg <= or_cond_mid2_reg_832_pp0_iter1_reg;
                or_cond_mid2_reg_832_pp0_iter3_reg <= or_cond_mid2_reg_832_pp0_iter2_reg;
                or_cond_mid2_reg_832_pp0_iter4_reg <= or_cond_mid2_reg_832_pp0_iter3_reg;
                or_cond_mid2_reg_832_pp0_iter5_reg <= or_cond_mid2_reg_832_pp0_iter4_reg;
                or_cond_mid2_reg_832_pp0_iter6_reg <= or_cond_mid2_reg_832_pp0_iter5_reg;
                or_cond_mid2_reg_832_pp0_iter7_reg <= or_cond_mid2_reg_832_pp0_iter6_reg;
                or_cond_mid2_reg_832_pp0_iter8_reg <= or_cond_mid2_reg_832_pp0_iter7_reg;
                or_cond_mid2_reg_832_pp0_iter9_reg <= or_cond_mid2_reg_832_pp0_iter8_reg;
                tmp_1_mid2_reg_828_pp0_iter2_reg <= tmp_1_mid2_reg_828_pp0_iter1_reg;
                tmp_1_mid2_reg_828_pp0_iter3_reg <= tmp_1_mid2_reg_828_pp0_iter2_reg;
                tmp_1_mid2_reg_828_pp0_iter4_reg <= tmp_1_mid2_reg_828_pp0_iter3_reg;
                tmp_1_mid2_reg_828_pp0_iter5_reg <= tmp_1_mid2_reg_828_pp0_iter4_reg;
                tmp_1_mid2_reg_828_pp0_iter6_reg <= tmp_1_mid2_reg_828_pp0_iter5_reg;
                tmp_1_mid2_reg_828_pp0_iter7_reg <= tmp_1_mid2_reg_828_pp0_iter6_reg;
                tmp_1_mid2_reg_828_pp0_iter8_reg <= tmp_1_mid2_reg_828_pp0_iter7_reg;
                tmp_4_mid2_reg_842_pp0_iter10_reg <= tmp_4_mid2_reg_842_pp0_iter9_reg;
                tmp_4_mid2_reg_842_pp0_iter11_reg <= tmp_4_mid2_reg_842_pp0_iter10_reg;
                tmp_4_mid2_reg_842_pp0_iter12_reg <= tmp_4_mid2_reg_842_pp0_iter11_reg;
                tmp_4_mid2_reg_842_pp0_iter13_reg <= tmp_4_mid2_reg_842_pp0_iter12_reg;
                tmp_4_mid2_reg_842_pp0_iter14_reg <= tmp_4_mid2_reg_842_pp0_iter13_reg;
                tmp_4_mid2_reg_842_pp0_iter15_reg <= tmp_4_mid2_reg_842_pp0_iter14_reg;
                tmp_4_mid2_reg_842_pp0_iter16_reg <= tmp_4_mid2_reg_842_pp0_iter15_reg;
                tmp_4_mid2_reg_842_pp0_iter2_reg <= tmp_4_mid2_reg_842_pp0_iter1_reg;
                tmp_4_mid2_reg_842_pp0_iter3_reg <= tmp_4_mid2_reg_842_pp0_iter2_reg;
                tmp_4_mid2_reg_842_pp0_iter4_reg <= tmp_4_mid2_reg_842_pp0_iter3_reg;
                tmp_4_mid2_reg_842_pp0_iter5_reg <= tmp_4_mid2_reg_842_pp0_iter4_reg;
                tmp_4_mid2_reg_842_pp0_iter6_reg <= tmp_4_mid2_reg_842_pp0_iter5_reg;
                tmp_4_mid2_reg_842_pp0_iter7_reg <= tmp_4_mid2_reg_842_pp0_iter6_reg;
                tmp_4_mid2_reg_842_pp0_iter8_reg <= tmp_4_mid2_reg_842_pp0_iter7_reg;
                tmp_4_mid2_reg_842_pp0_iter9_reg <= tmp_4_mid2_reg_842_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_819 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buf_val_1_val_load_reg_868 <= buf_val_1_val_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_819_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                buf_val_2_val_load_reg_938 <= buf_val_2_val_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_mid2_reg_832_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_18_0_1_reg_913 <= grp_fu_273_p2;
                tmp_18_0_2_reg_918 <= grp_fu_278_p2;
                tmp_18_0_3_reg_923 <= grp_fu_283_p2;
                tmp_18_0_4_reg_928 <= grp_fu_288_p2;
                tmp_18_0_5_reg_933 <= grp_fu_293_p2;
                tmp_18_reg_908 <= grp_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_mid2_reg_832_pp0_iter7_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_18_1_1_reg_1013 <= grp_fu_303_p2;
                tmp_18_1_2_reg_1018 <= grp_fu_308_p2;
                tmp_18_1_3_reg_1023 <= grp_fu_313_p2;
                tmp_18_1_4_reg_1028 <= grp_fu_318_p2;
                tmp_18_1_5_reg_1033 <= grp_fu_323_p2;
                tmp_18_1_reg_1008 <= grp_fu_298_p2;
                tmp_19_0_1_reg_983 <= grp_fu_195_p2;
                tmp_19_0_2_reg_988 <= grp_fu_200_p2;
                tmp_19_0_3_reg_993 <= grp_fu_205_p2;
                tmp_19_0_4_reg_998 <= grp_fu_210_p2;
                tmp_19_0_5_reg_1003 <= grp_fu_215_p2;
                tmp_30_reg_978 <= grp_fu_190_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond_mid2_reg_832_pp0_iter11_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_18_2_1_reg_1108 <= grp_fu_333_p2;
                tmp_18_2_2_reg_1113 <= grp_fu_338_p2;
                tmp_18_2_3_reg_1118 <= grp_fu_343_p2;
                tmp_18_2_4_reg_1123 <= grp_fu_348_p2;
                tmp_18_2_5_reg_1128 <= grp_fu_353_p2;
                tmp_18_2_reg_1103 <= grp_fu_328_p2;
                tmp_19_1_1_reg_1078 <= grp_fu_224_p2;
                tmp_19_1_2_reg_1083 <= grp_fu_228_p2;
                tmp_19_1_3_reg_1088 <= grp_fu_232_p2;
                tmp_19_1_4_reg_1093 <= grp_fu_236_p2;
                tmp_19_1_5_reg_1098 <= grp_fu_240_p2;
                tmp_19_1_reg_1073 <= grp_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_mid2_reg_842_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_42_reg_1133 <= tmp_42_fu_746_p3;
                tmp_43_reg_1138 <= tmp_43_fu_757_p3;
                tmp_44_reg_1143 <= tmp_44_fu_768_p3;
                tmp_45_reg_1148 <= tmp_45_fu_779_p3;
                tmp_46_reg_1153 <= tmp_46_fu_790_p3;
                tmp_47_reg_1158 <= tmp_47_fu_801_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter17, exitcond_flatten_fu_386_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter16)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_386_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((exitcond_flatten_fu_386_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state20 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(out_product_val_empty_n, tensor_y_val_full_n, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter17, tmp_4_mid2_reg_842_pp0_iter16_reg, ap_predicate_op146_read_state11)
    begin
                ap_block_pp0_stage0_01001 <= (((tmp_4_mid2_reg_842_pp0_iter16_reg = ap_const_lv1_0) and (tensor_y_val_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((out_product_val_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_predicate_op146_read_state11 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(out_product_val_empty_n, tensor_y_val_full_n, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter17, tmp_4_mid2_reg_842_pp0_iter16_reg, ap_predicate_op146_read_state11)
    begin
                ap_block_pp0_stage0_11001 <= (((tmp_4_mid2_reg_842_pp0_iter16_reg = ap_const_lv1_0) and (tensor_y_val_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((out_product_val_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_predicate_op146_read_state11 = ap_const_boolean_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(out_product_val_empty_n, tensor_y_val_full_n, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter17, tmp_4_mid2_reg_842_pp0_iter16_reg, ap_predicate_op146_read_state11)
    begin
                ap_block_pp0_stage0_subdone <= (((tmp_4_mid2_reg_842_pp0_iter16_reg = ap_const_lv1_0) and (tensor_y_val_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1)) or ((out_product_val_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_predicate_op146_read_state11 = ap_const_boolean_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter9_assign_proc : process(out_product_val_empty_n, ap_predicate_op146_read_state11)
    begin
                ap_block_state11_pp0_stage0_iter9 <= ((out_product_val_empty_n = ap_const_logic_0) and (ap_predicate_op146_read_state11 = ap_const_boolean_1));
    end process;

        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_pp0_stage0_iter17_assign_proc : process(tensor_y_val_full_n, tmp_4_mid2_reg_842_pp0_iter16_reg)
    begin
                ap_block_state19_pp0_stage0_iter17 <= ((tmp_4_mid2_reg_842_pp0_iter16_reg = ap_const_lv1_0) and (tensor_y_val_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_139_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_139 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_386_p2)
    begin
        if ((exitcond_flatten_fu_386_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_tmp_8_reg_178 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op146_read_state11_assign_proc : process(exitcond_flatten_reg_819_pp0_iter8_reg, tmp_1_mid2_reg_828_pp0_iter8_reg)
    begin
                ap_predicate_op146_read_state11 <= ((tmp_1_mid2_reg_828_pp0_iter8_reg = ap_const_lv1_1) and (exitcond_flatten_reg_819_pp0_iter8_reg = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    buf_val_1_val_address0 <= tmp_s_fu_490_p1(10 - 1 downto 0);

    buf_val_1_val_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_1_val_ce0 <= ap_const_logic_1;
        else 
            buf_val_1_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_1_val_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_1_val_ce1 <= ap_const_logic_1;
        else 
            buf_val_1_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_1_val_we1_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_flatten_reg_819_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((exitcond_flatten_reg_819_pp0_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_1_val_we1 <= ap_const_logic_1;
        else 
            buf_val_1_val_we1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_2_val_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_val_ce0 <= ap_const_logic_1;
        else 
            buf_val_2_val_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_2_val_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_val_ce1 <= ap_const_logic_1;
        else 
            buf_val_2_val_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    buf_val_2_val_we1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            buf_val_2_val_we1 <= ap_const_logic_1;
        else 
            buf_val_2_val_we1 <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_496_p2 <= std_logic_vector(unsigned(col_assign_mid2_fu_404_p3) + unsigned(ap_const_lv11_1));
    col_assign_mid2_fu_404_p3 <= 
        ap_const_lv11_0 when (exitcond_fu_398_p2(0) = '1') else 
        col_assign_reg_167;
    exitcond_flatten_fu_386_p2 <= "1" when (indvar_flatten_reg_145 = ap_const_lv19_6D400) else "0";
    exitcond_fu_398_p2 <= "1" when (col_assign_reg_167 = ap_const_lv11_400) else "0";

    grp_fu_190_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_190_ce <= ap_const_logic_1;
        else 
            grp_fu_190_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_195_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_195_ce <= ap_const_logic_1;
        else 
            grp_fu_195_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_200_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_200_ce <= ap_const_logic_1;
        else 
            grp_fu_200_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_205_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_205_ce <= ap_const_logic_1;
        else 
            grp_fu_205_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_210_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_210_ce <= ap_const_logic_1;
        else 
            grp_fu_210_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_215_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_215_ce <= ap_const_logic_1;
        else 
            grp_fu_215_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_220_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_220_ce <= ap_const_logic_1;
        else 
            grp_fu_220_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_224_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_228_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_228_ce <= ap_const_logic_1;
        else 
            grp_fu_228_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_232_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_232_ce <= ap_const_logic_1;
        else 
            grp_fu_232_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_236_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_236_ce <= ap_const_logic_1;
        else 
            grp_fu_236_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_240_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_240_ce <= ap_const_logic_1;
        else 
            grp_fu_240_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_244_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_244_ce <= ap_const_logic_1;
        else 
            grp_fu_244_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_248_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_248_ce <= ap_const_logic_1;
        else 
            grp_fu_248_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_252_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_252_ce <= ap_const_logic_1;
        else 
            grp_fu_252_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_256_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_256_ce <= ap_const_logic_1;
        else 
            grp_fu_256_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_260_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_260_ce <= ap_const_logic_1;
        else 
            grp_fu_260_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_264_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_264_ce <= ap_const_logic_1;
        else 
            grp_fu_264_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_268_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_268_ce <= ap_const_logic_1;
        else 
            grp_fu_268_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_268_p0 <= tmp_9_fu_502_p1;

    grp_fu_273_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_273_ce <= ap_const_logic_1;
        else 
            grp_fu_273_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_273_p0 <= tmp_5_fu_510_p4;

    grp_fu_278_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_278_ce <= ap_const_logic_1;
        else 
            grp_fu_278_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_278_p0 <= tmp_10_fu_524_p4;

    grp_fu_283_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_283_ce <= ap_const_logic_1;
        else 
            grp_fu_283_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_283_p0 <= tmp_12_fu_538_p4;

    grp_fu_288_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_288_ce <= ap_const_logic_1;
        else 
            grp_fu_288_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_288_p0 <= tmp_14_fu_552_p4;

    grp_fu_293_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_293_ce <= ap_const_logic_1;
        else 
            grp_fu_293_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_293_p0 <= tmp_16_fu_566_p4;

    grp_fu_298_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_298_ce <= ap_const_logic_1;
        else 
            grp_fu_298_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_298_p0 <= tmp_49_fu_580_p1;

    grp_fu_303_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_303_ce <= ap_const_logic_1;
        else 
            grp_fu_303_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_303_p0 <= tmp_20_fu_588_p4;

    grp_fu_308_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_308_ce <= ap_const_logic_1;
        else 
            grp_fu_308_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_308_p0 <= tmp_22_fu_602_p4;

    grp_fu_313_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_313_ce <= ap_const_logic_1;
        else 
            grp_fu_313_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_313_p0 <= tmp_24_fu_616_p4;

    grp_fu_318_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_318_ce <= ap_const_logic_1;
        else 
            grp_fu_318_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_318_p0 <= tmp_26_fu_630_p4;

    grp_fu_323_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_323_ce <= ap_const_logic_1;
        else 
            grp_fu_323_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_323_p0 <= tmp_28_fu_644_p4;

    grp_fu_328_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_328_ce <= ap_const_logic_1;
        else 
            grp_fu_328_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_328_p0 <= tmp_50_fu_658_p1;

    grp_fu_333_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_333_ce <= ap_const_logic_1;
        else 
            grp_fu_333_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_333_p0 <= tmp_32_fu_667_p4;

    grp_fu_338_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_338_ce <= ap_const_logic_1;
        else 
            grp_fu_338_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_338_p0 <= tmp_34_fu_682_p4;

    grp_fu_343_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_343_ce <= ap_const_logic_1;
        else 
            grp_fu_343_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_343_p0 <= tmp_36_fu_697_p4;

    grp_fu_348_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_348_ce <= ap_const_logic_1;
        else 
            grp_fu_348_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_348_p0 <= tmp_38_fu_712_p4;

    grp_fu_353_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_353_ce <= ap_const_logic_1;
        else 
            grp_fu_353_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_353_p0 <= tmp_40_fu_727_p4;
    icmp1_fu_442_p2 <= "0" when (tmp_3_fu_432_p4 = ap_const_lv8_0) else "1";
    icmp_fu_374_p2 <= "0" when (tmp_fu_364_p4 = ap_const_lv8_0) else "1";
    indvar_flatten_next_fu_392_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_145) + unsigned(ap_const_lv19_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_380_p2 <= (tmp_1_fu_358_p2 and icmp_fu_374_p2);
    or_cond_mid1_fu_448_p2 <= (tmp_1_mid1_fu_418_p2 and icmp1_fu_442_p2);
    or_cond_mid2_fu_454_p3 <= 
        or_cond_mid1_fu_448_p2 when (exitcond_fu_398_p2(0) = '1') else 
        or_cond_fu_380_p2;

    out_product_val_blk_n_assign_proc : process(out_product_val_empty_n, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0, exitcond_flatten_reg_819_pp0_iter8_reg, tmp_1_mid2_reg_828_pp0_iter8_reg)
    begin
        if (((tmp_1_mid2_reg_828_pp0_iter8_reg = ap_const_lv1_1) and (exitcond_flatten_reg_819_pp0_iter8_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            out_product_val_blk_n <= out_product_val_empty_n;
        else 
            out_product_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_product_val_read_assign_proc : process(ap_enable_reg_pp0_iter9, ap_predicate_op146_read_state11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_predicate_op146_read_state11 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_product_val_read <= ap_const_logic_1;
        else 
            out_product_val_read <= ap_const_logic_0;
        end if; 
    end process;

    r_mid2_fu_482_p3 <= 
        r_s_fu_412_p2 when (exitcond_fu_398_p2(0) = '1') else 
        r_reg_156;
    r_s_fu_412_p2 <= std_logic_vector(unsigned(r_reg_156) + unsigned(ap_const_lv9_1));

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    tensor_y_val_blk_n_assign_proc : process(tensor_y_val_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter17, tmp_4_mid2_reg_842_pp0_iter16_reg)
    begin
        if (((tmp_4_mid2_reg_842_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            tensor_y_val_blk_n <= tensor_y_val_full_n;
        else 
            tensor_y_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    tensor_y_val_din <= (((((tmp_47_reg_1158 & tmp_46_reg_1153) & tmp_45_reg_1148) & tmp_44_reg_1143) & tmp_43_reg_1138) & tmp_42_reg_1133);

    tensor_y_val_write_assign_proc : process(ap_enable_reg_pp0_iter17, tmp_4_mid2_reg_842_pp0_iter16_reg, ap_block_pp0_stage0_11001)
    begin
        if (((tmp_4_mid2_reg_842_pp0_iter16_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tensor_y_val_write <= ap_const_logic_1;
        else 
            tensor_y_val_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_524_p4 <= buf_val_1_val_load_reg_868(95 downto 64);
    tmp_12_fu_538_p4 <= buf_val_1_val_load_reg_868(127 downto 96);
    tmp_14_fu_552_p4 <= buf_val_1_val_load_reg_868(159 downto 128);
    tmp_16_fu_566_p4 <= buf_val_1_val_load_reg_868(191 downto 160);
    tmp_1_fu_358_p2 <= "1" when (unsigned(r_reg_156) < unsigned(ap_const_lv9_1B4)) else "0";
    tmp_1_mid1_fu_418_p2 <= "1" when (unsigned(r_s_fu_412_p2) < unsigned(ap_const_lv9_1B4)) else "0";
    tmp_1_mid2_fu_424_p3 <= 
        tmp_1_mid1_fu_418_p2 when (exitcond_fu_398_p2(0) = '1') else 
        tmp_1_fu_358_p2;
    tmp_20_fu_588_p4 <= buf_val_2_val_load_reg_938(63 downto 32);
    tmp_22_fu_602_p4 <= buf_val_2_val_load_reg_938(95 downto 64);
    tmp_24_fu_616_p4 <= buf_val_2_val_load_reg_938(127 downto 96);
    tmp_26_fu_630_p4 <= buf_val_2_val_load_reg_938(159 downto 128);
    tmp_28_fu_644_p4 <= buf_val_2_val_load_reg_938(191 downto 160);
    tmp_32_fu_667_p4 <= ap_phi_reg_pp0_iter10_tmp_8_reg_178(63 downto 32);
    tmp_34_fu_682_p4 <= ap_phi_reg_pp0_iter10_tmp_8_reg_178(95 downto 64);
    tmp_36_fu_697_p4 <= ap_phi_reg_pp0_iter10_tmp_8_reg_178(127 downto 96);
    tmp_38_fu_712_p4 <= ap_phi_reg_pp0_iter10_tmp_8_reg_178(159 downto 128);
    tmp_3_fu_432_p4 <= r_s_fu_412_p2(8 downto 1);
    tmp_40_fu_727_p4 <= ap_phi_reg_pp0_iter10_tmp_8_reg_178(191 downto 160);
    tmp_42_fu_746_p3 <= 
        tmp_51_fu_742_p1 when (or_cond_mid2_reg_832_pp0_iter15_reg(0) = '1') else 
        ap_const_lv32_0;
    tmp_43_fu_757_p3 <= 
        tmp_52_fu_753_p1 when (or_cond_mid2_reg_832_pp0_iter15_reg(0) = '1') else 
        ap_const_lv32_0;
    tmp_44_fu_768_p3 <= 
        tmp_53_fu_764_p1 when (or_cond_mid2_reg_832_pp0_iter15_reg(0) = '1') else 
        ap_const_lv32_0;
    tmp_45_fu_779_p3 <= 
        tmp_54_fu_775_p1 when (or_cond_mid2_reg_832_pp0_iter15_reg(0) = '1') else 
        ap_const_lv32_0;
    tmp_46_fu_790_p3 <= 
        tmp_55_fu_786_p1 when (or_cond_mid2_reg_832_pp0_iter15_reg(0) = '1') else 
        ap_const_lv32_0;
    tmp_47_fu_801_p3 <= 
        tmp_56_fu_797_p1 when (or_cond_mid2_reg_832_pp0_iter15_reg(0) = '1') else 
        ap_const_lv32_0;
    tmp_49_fu_580_p1 <= buf_val_2_val_load_reg_938(32 - 1 downto 0);
    tmp_4_fu_468_p2 <= "1" when (r_reg_156 = ap_const_lv9_0) else "0";
    tmp_4_mid1_fu_462_p2 <= "1" when (r_s_fu_412_p2 = ap_const_lv9_0) else "0";
    tmp_4_mid2_fu_474_p3 <= 
        tmp_4_mid1_fu_462_p2 when (exitcond_fu_398_p2(0) = '1') else 
        tmp_4_fu_468_p2;
    tmp_50_fu_658_p1 <= ap_phi_reg_pp0_iter10_tmp_8_reg_178(32 - 1 downto 0);
    tmp_51_fu_742_p1 <= grp_fu_244_p2;
    tmp_52_fu_753_p1 <= grp_fu_248_p2;
    tmp_53_fu_764_p1 <= grp_fu_252_p2;
    tmp_54_fu_775_p1 <= grp_fu_256_p2;
    tmp_55_fu_786_p1 <= grp_fu_260_p2;
    tmp_56_fu_797_p1 <= grp_fu_264_p2;
    tmp_5_fu_510_p4 <= buf_val_1_val_load_reg_868(63 downto 32);
    tmp_9_fu_502_p1 <= buf_val_1_val_load_reg_868(32 - 1 downto 0);
    tmp_fu_364_p4 <= r_reg_156(8 downto 1);
    tmp_s_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(col_assign_mid2_fu_404_p3),64));
end behav;
