-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_gradient_z_calc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    frame1_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    frame1_a_empty_n : IN STD_LOGIC;
    frame1_a_read : OUT STD_LOGIC;
    frame2_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    frame2_a_empty_n : IN STD_LOGIC;
    frame2_a_read : OUT STD_LOGIC;
    frame3_b_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    frame3_b_empty_n : IN STD_LOGIC;
    frame3_b_read : OUT STD_LOGIC;
    frame4_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    frame4_a_empty_n : IN STD_LOGIC;
    frame4_a_read : OUT STD_LOGIC;
    frame5_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    frame5_a_empty_n : IN STD_LOGIC;
    frame5_a_read : OUT STD_LOGIC;
    gradient_z_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    gradient_z_full_n : IN STD_LOGIC;
    gradient_z_write : OUT STD_LOGIC );
end;


architecture behav of a0_gradient_z_calc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_C1000000 : STD_LOGIC_VECTOR (31 downto 0) := "11000001000000000000000000000000";
    constant ap_const_lv32_41000000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000000000000000000000000";
    constant ap_const_lv32_41400000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001010000000000000000000000";
    constant ap_const_lv19_6D000 : STD_LOGIC_VECTOR (18 downto 0) := "1101101000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal frame1_a_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_164 : STD_LOGIC_VECTOR (0 downto 0);
    signal frame2_a_blk_n : STD_LOGIC;
    signal frame3_b_blk_n : STD_LOGIC;
    signal frame4_a_blk_n : STD_LOGIC;
    signal frame5_a_blk_n : STD_LOGIC;
    signal gradient_z_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_164_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_91 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond_flatten_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_164_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_164_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_144_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal frame1_a_read_reg_173 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame1_a_read_reg_173_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame1_a_read_reg_173_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame1_a_read_reg_173_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame2_a_read_reg_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame3_b_read_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame3_b_read_reg_183_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame3_b_read_reg_183_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame3_b_read_reg_183_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame3_b_read_reg_183_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_read_reg_188 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_read_reg_188_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_read_reg_188_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_read_reg_188_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_read_reg_188_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_read_reg_188_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_read_reg_188_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_read_reg_188_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_read_reg_188_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter12_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter13_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter14_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter15_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_read_reg_193_pp0_iter16_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_102_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_reg_208 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_reg_213 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_128_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_reg_218 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_reg_223 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_114_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_to_int_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_neg_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_102_ce : STD_LOGIC;
    signal grp_fu_106_ce : STD_LOGIC;
    signal grp_fu_110_ce : STD_LOGIC;
    signal grp_fu_114_ce : STD_LOGIC;
    signal grp_fu_118_ce : STD_LOGIC;
    signal grp_fu_123_ce : STD_LOGIC;
    signal grp_fu_128_ce : STD_LOGIC;
    signal grp_fu_133_ce : STD_LOGIC;
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component a0_optical_flow_faddhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_optical_flow_fmulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_optical_flow_fdivbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    optical_flow_faddhbi_U43 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => frame1_a_read_reg_173_pp0_iter4_reg,
        din1 => tmp_13_reg_198,
        ce => grp_fu_102_ce,
        dout => grp_fu_102_p2);

    optical_flow_faddhbi_U44 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_14_reg_203,
        din1 => tmp_15_reg_208,
        ce => grp_fu_106_ce,
        dout => grp_fu_106_p2);

    optical_flow_faddhbi_U45 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_16_reg_213,
        din1 => tmp_17_reg_218,
        ce => grp_fu_110_ce,
        dout => grp_fu_110_p2);

    optical_flow_faddhbi_U46 : component a0_optical_flow_faddhbi
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_18_reg_223,
        din1 => grp_fu_114_p1,
        ce => grp_fu_114_ce,
        dout => grp_fu_114_p2);

    optical_flow_fmulibs_U47 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => frame2_a_read_reg_178,
        din1 => ap_const_lv32_C1000000,
        ce => grp_fu_118_ce,
        dout => grp_fu_118_p2);

    optical_flow_fmulibs_U48 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => frame3_b_read_reg_183_pp0_iter5_reg,
        din1 => ap_const_lv32_0,
        ce => grp_fu_123_ce,
        dout => grp_fu_123_p2);

    optical_flow_fmulibs_U49 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => frame4_a_read_reg_188_pp0_iter9_reg,
        din1 => ap_const_lv32_41000000,
        ce => grp_fu_128_ce,
        dout => grp_fu_128_p2);

    optical_flow_fdivbkb_U50 : component a0_optical_flow_fdivbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_20_reg_233,
        din1 => ap_const_lv32_41400000,
        ce => grp_fu_133_ce,
        dout => grp_fu_133_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_91 <= indvar_flatten_next_fu_144_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_91 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_164 <= exitcond_flatten_fu_138_p2;
                exitcond_flatten_reg_164_pp0_iter1_reg <= exitcond_flatten_reg_164;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_164_pp0_iter10_reg <= exitcond_flatten_reg_164_pp0_iter9_reg;
                exitcond_flatten_reg_164_pp0_iter11_reg <= exitcond_flatten_reg_164_pp0_iter10_reg;
                exitcond_flatten_reg_164_pp0_iter12_reg <= exitcond_flatten_reg_164_pp0_iter11_reg;
                exitcond_flatten_reg_164_pp0_iter13_reg <= exitcond_flatten_reg_164_pp0_iter12_reg;
                exitcond_flatten_reg_164_pp0_iter14_reg <= exitcond_flatten_reg_164_pp0_iter13_reg;
                exitcond_flatten_reg_164_pp0_iter15_reg <= exitcond_flatten_reg_164_pp0_iter14_reg;
                exitcond_flatten_reg_164_pp0_iter16_reg <= exitcond_flatten_reg_164_pp0_iter15_reg;
                exitcond_flatten_reg_164_pp0_iter17_reg <= exitcond_flatten_reg_164_pp0_iter16_reg;
                exitcond_flatten_reg_164_pp0_iter18_reg <= exitcond_flatten_reg_164_pp0_iter17_reg;
                exitcond_flatten_reg_164_pp0_iter19_reg <= exitcond_flatten_reg_164_pp0_iter18_reg;
                exitcond_flatten_reg_164_pp0_iter20_reg <= exitcond_flatten_reg_164_pp0_iter19_reg;
                exitcond_flatten_reg_164_pp0_iter21_reg <= exitcond_flatten_reg_164_pp0_iter20_reg;
                exitcond_flatten_reg_164_pp0_iter22_reg <= exitcond_flatten_reg_164_pp0_iter21_reg;
                exitcond_flatten_reg_164_pp0_iter23_reg <= exitcond_flatten_reg_164_pp0_iter22_reg;
                exitcond_flatten_reg_164_pp0_iter24_reg <= exitcond_flatten_reg_164_pp0_iter23_reg;
                exitcond_flatten_reg_164_pp0_iter25_reg <= exitcond_flatten_reg_164_pp0_iter24_reg;
                exitcond_flatten_reg_164_pp0_iter26_reg <= exitcond_flatten_reg_164_pp0_iter25_reg;
                exitcond_flatten_reg_164_pp0_iter27_reg <= exitcond_flatten_reg_164_pp0_iter26_reg;
                exitcond_flatten_reg_164_pp0_iter28_reg <= exitcond_flatten_reg_164_pp0_iter27_reg;
                exitcond_flatten_reg_164_pp0_iter29_reg <= exitcond_flatten_reg_164_pp0_iter28_reg;
                exitcond_flatten_reg_164_pp0_iter2_reg <= exitcond_flatten_reg_164_pp0_iter1_reg;
                exitcond_flatten_reg_164_pp0_iter3_reg <= exitcond_flatten_reg_164_pp0_iter2_reg;
                exitcond_flatten_reg_164_pp0_iter4_reg <= exitcond_flatten_reg_164_pp0_iter3_reg;
                exitcond_flatten_reg_164_pp0_iter5_reg <= exitcond_flatten_reg_164_pp0_iter4_reg;
                exitcond_flatten_reg_164_pp0_iter6_reg <= exitcond_flatten_reg_164_pp0_iter5_reg;
                exitcond_flatten_reg_164_pp0_iter7_reg <= exitcond_flatten_reg_164_pp0_iter6_reg;
                exitcond_flatten_reg_164_pp0_iter8_reg <= exitcond_flatten_reg_164_pp0_iter7_reg;
                exitcond_flatten_reg_164_pp0_iter9_reg <= exitcond_flatten_reg_164_pp0_iter8_reg;
                frame1_a_read_reg_173_pp0_iter2_reg <= frame1_a_read_reg_173;
                frame1_a_read_reg_173_pp0_iter3_reg <= frame1_a_read_reg_173_pp0_iter2_reg;
                frame1_a_read_reg_173_pp0_iter4_reg <= frame1_a_read_reg_173_pp0_iter3_reg;
                frame3_b_read_reg_183_pp0_iter2_reg <= frame3_b_read_reg_183;
                frame3_b_read_reg_183_pp0_iter3_reg <= frame3_b_read_reg_183_pp0_iter2_reg;
                frame3_b_read_reg_183_pp0_iter4_reg <= frame3_b_read_reg_183_pp0_iter3_reg;
                frame3_b_read_reg_183_pp0_iter5_reg <= frame3_b_read_reg_183_pp0_iter4_reg;
                frame4_a_read_reg_188_pp0_iter2_reg <= frame4_a_read_reg_188;
                frame4_a_read_reg_188_pp0_iter3_reg <= frame4_a_read_reg_188_pp0_iter2_reg;
                frame4_a_read_reg_188_pp0_iter4_reg <= frame4_a_read_reg_188_pp0_iter3_reg;
                frame4_a_read_reg_188_pp0_iter5_reg <= frame4_a_read_reg_188_pp0_iter4_reg;
                frame4_a_read_reg_188_pp0_iter6_reg <= frame4_a_read_reg_188_pp0_iter5_reg;
                frame4_a_read_reg_188_pp0_iter7_reg <= frame4_a_read_reg_188_pp0_iter6_reg;
                frame4_a_read_reg_188_pp0_iter8_reg <= frame4_a_read_reg_188_pp0_iter7_reg;
                frame4_a_read_reg_188_pp0_iter9_reg <= frame4_a_read_reg_188_pp0_iter8_reg;
                frame5_a_read_reg_193_pp0_iter10_reg <= frame5_a_read_reg_193_pp0_iter9_reg;
                frame5_a_read_reg_193_pp0_iter11_reg <= frame5_a_read_reg_193_pp0_iter10_reg;
                frame5_a_read_reg_193_pp0_iter12_reg <= frame5_a_read_reg_193_pp0_iter11_reg;
                frame5_a_read_reg_193_pp0_iter13_reg <= frame5_a_read_reg_193_pp0_iter12_reg;
                frame5_a_read_reg_193_pp0_iter14_reg <= frame5_a_read_reg_193_pp0_iter13_reg;
                frame5_a_read_reg_193_pp0_iter15_reg <= frame5_a_read_reg_193_pp0_iter14_reg;
                frame5_a_read_reg_193_pp0_iter16_reg <= frame5_a_read_reg_193_pp0_iter15_reg;
                frame5_a_read_reg_193_pp0_iter2_reg <= frame5_a_read_reg_193;
                frame5_a_read_reg_193_pp0_iter3_reg <= frame5_a_read_reg_193_pp0_iter2_reg;
                frame5_a_read_reg_193_pp0_iter4_reg <= frame5_a_read_reg_193_pp0_iter3_reg;
                frame5_a_read_reg_193_pp0_iter5_reg <= frame5_a_read_reg_193_pp0_iter4_reg;
                frame5_a_read_reg_193_pp0_iter6_reg <= frame5_a_read_reg_193_pp0_iter5_reg;
                frame5_a_read_reg_193_pp0_iter7_reg <= frame5_a_read_reg_193_pp0_iter6_reg;
                frame5_a_read_reg_193_pp0_iter8_reg <= frame5_a_read_reg_193_pp0_iter7_reg;
                frame5_a_read_reg_193_pp0_iter9_reg <= frame5_a_read_reg_193_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                frame1_a_read_reg_173 <= frame1_a_dout;
                frame2_a_read_reg_178 <= frame2_a_dout;
                frame3_b_read_reg_183 <= frame3_b_dout;
                frame4_a_read_reg_188 <= frame4_a_dout;
                frame5_a_read_reg_193 <= frame5_a_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_164_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_13_reg_198 <= grp_fu_118_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_164_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_14_reg_203 <= grp_fu_102_p2;
                tmp_15_reg_208 <= grp_fu_123_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_164_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_16_reg_213 <= grp_fu_106_p2;
                tmp_17_reg_218 <= grp_fu_128_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_164_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_18_reg_223 <= grp_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_164_pp0_iter19_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_20_reg_233 <= grp_fu_114_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_164_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_21_reg_238 <= grp_fu_133_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter30, exitcond_flatten_fu_138_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter29)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((exitcond_flatten_fu_138_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state33 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(frame1_a_empty_n, frame2_a_empty_n, frame3_b_empty_n, frame4_a_empty_n, frame5_a_empty_n, gradient_z_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_164, ap_enable_reg_pp0_iter30, exitcond_flatten_reg_164_pp0_iter29_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((exitcond_flatten_reg_164_pp0_iter29_reg = ap_const_lv1_0) and (gradient_z_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame5_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame4_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame3_b_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame2_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame1_a_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(frame1_a_empty_n, frame2_a_empty_n, frame3_b_empty_n, frame4_a_empty_n, frame5_a_empty_n, gradient_z_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_164, ap_enable_reg_pp0_iter30, exitcond_flatten_reg_164_pp0_iter29_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((exitcond_flatten_reg_164_pp0_iter29_reg = ap_const_lv1_0) and (gradient_z_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame5_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame4_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame3_b_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame2_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame1_a_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(frame1_a_empty_n, frame2_a_empty_n, frame3_b_empty_n, frame4_a_empty_n, frame5_a_empty_n, gradient_z_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_164, ap_enable_reg_pp0_iter30, exitcond_flatten_reg_164_pp0_iter29_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((exitcond_flatten_reg_164_pp0_iter29_reg = ap_const_lv1_0) and (gradient_z_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame5_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame4_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame3_b_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame2_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame1_a_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state32_pp0_stage0_iter30_assign_proc : process(gradient_z_full_n, exitcond_flatten_reg_164_pp0_iter29_reg)
    begin
                ap_block_state32_pp0_stage0_iter30 <= ((exitcond_flatten_reg_164_pp0_iter29_reg = ap_const_lv1_0) and (gradient_z_full_n = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter1_assign_proc : process(frame1_a_empty_n, frame2_a_empty_n, frame3_b_empty_n, frame4_a_empty_n, frame5_a_empty_n, exitcond_flatten_reg_164)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame5_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame4_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame3_b_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame2_a_empty_n = ap_const_logic_0)) or ((exitcond_flatten_reg_164 = ap_const_lv1_0) and (frame1_a_empty_n = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_138_p2)
    begin
        if ((exitcond_flatten_fu_138_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29)
    begin
        if (((ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_138_p2 <= "1" when (indvar_flatten_reg_91 = ap_const_lv19_6D000) else "0";

    frame1_a_blk_n_assign_proc : process(frame1_a_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_164)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame1_a_blk_n <= frame1_a_empty_n;
        else 
            frame1_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame1_a_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_164, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame1_a_read <= ap_const_logic_1;
        else 
            frame1_a_read <= ap_const_logic_0;
        end if; 
    end process;


    frame2_a_blk_n_assign_proc : process(frame2_a_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_164)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame2_a_blk_n <= frame2_a_empty_n;
        else 
            frame2_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame2_a_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_164, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame2_a_read <= ap_const_logic_1;
        else 
            frame2_a_read <= ap_const_logic_0;
        end if; 
    end process;


    frame3_b_blk_n_assign_proc : process(frame3_b_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_164)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame3_b_blk_n <= frame3_b_empty_n;
        else 
            frame3_b_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame3_b_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_164, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame3_b_read <= ap_const_logic_1;
        else 
            frame3_b_read <= ap_const_logic_0;
        end if; 
    end process;


    frame4_a_blk_n_assign_proc : process(frame4_a_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_164)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame4_a_blk_n <= frame4_a_empty_n;
        else 
            frame4_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame4_a_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_164, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame4_a_read <= ap_const_logic_1;
        else 
            frame4_a_read <= ap_const_logic_0;
        end if; 
    end process;


    frame5_a_blk_n_assign_proc : process(frame5_a_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_164)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frame5_a_blk_n <= frame5_a_empty_n;
        else 
            frame5_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frame5_a_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_164, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_164 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame5_a_read <= ap_const_logic_1;
        else 
            frame5_a_read <= ap_const_logic_0;
        end if; 
    end process;


    gradient_z_blk_n_assign_proc : process(gradient_z_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter30, exitcond_flatten_reg_164_pp0_iter29_reg)
    begin
        if (((exitcond_flatten_reg_164_pp0_iter29_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
            gradient_z_blk_n <= gradient_z_full_n;
        else 
            gradient_z_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gradient_z_din <= tmp_21_reg_238;

    gradient_z_write_assign_proc : process(ap_enable_reg_pp0_iter30, exitcond_flatten_reg_164_pp0_iter29_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_164_pp0_iter29_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gradient_z_write <= ap_const_logic_1;
        else 
            gradient_z_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_102_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_102_ce <= ap_const_logic_1;
        else 
            grp_fu_102_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_106_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_106_ce <= ap_const_logic_1;
        else 
            grp_fu_106_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_110_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_110_ce <= ap_const_logic_1;
        else 
            grp_fu_110_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_114_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_114_ce <= ap_const_logic_1;
        else 
            grp_fu_114_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_114_p1 <= tmp_62_neg_fu_153_p2;

    grp_fu_118_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_118_ce <= ap_const_logic_1;
        else 
            grp_fu_118_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_123_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_123_ce <= ap_const_logic_1;
        else 
            grp_fu_123_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_128_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_128_ce <= ap_const_logic_1;
        else 
            grp_fu_128_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_133_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_133_ce <= ap_const_logic_1;
        else 
            grp_fu_133_ce <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_144_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_91) + unsigned(ap_const_lv19_1));
    tmp_62_neg_fu_153_p2 <= (tmp_62_to_int_fu_150_p1 xor ap_const_lv32_80000000);
    tmp_62_to_int_fu_150_p1 <= frame5_a_read_reg_193_pp0_iter16_reg;
end behav;
