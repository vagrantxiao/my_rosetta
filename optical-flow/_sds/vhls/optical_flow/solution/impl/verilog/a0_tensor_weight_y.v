// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_tensor_weight_y (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        out_product_val_dout,
        out_product_val_empty_n,
        out_product_val_read,
        tensor_y_val_din,
        tensor_y_val_full_n,
        tensor_y_val_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state20 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [191:0] out_product_val_dout;
input   out_product_val_empty_n;
output   out_product_val_read;
output  [191:0] tensor_y_val_din;
input   tensor_y_val_full_n;
output   tensor_y_val_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg out_product_val_read;
reg tensor_y_val_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    out_product_val_blk_n;
reg    ap_enable_reg_pp0_iter9;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_819;
reg   [0:0] exitcond_flatten_reg_819_pp0_iter8_reg;
reg   [0:0] tmp_1_mid2_reg_828;
reg   [0:0] tmp_1_mid2_reg_828_pp0_iter8_reg;
reg    tensor_y_val_blk_n;
reg    ap_enable_reg_pp0_iter17;
reg   [0:0] tmp_4_mid2_reg_842;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter16_reg;
reg   [18:0] indvar_flatten_reg_145;
reg   [8:0] r_reg_156;
reg   [10:0] col_assign_reg_167;
wire   [0:0] exitcond_flatten_fu_386_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
reg    ap_predicate_op146_read_state11;
reg    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
wire    ap_block_state16_pp0_stage0_iter14;
wire    ap_block_state17_pp0_stage0_iter15;
wire    ap_block_state18_pp0_stage0_iter16;
reg    ap_block_state19_pp0_stage0_iter17;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_819_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_819_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_819_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_reg_819_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_reg_819_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_reg_819_pp0_iter6_reg;
reg   [0:0] exitcond_flatten_reg_819_pp0_iter7_reg;
wire   [18:0] indvar_flatten_next_fu_392_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_1_mid2_fu_424_p3;
reg   [0:0] tmp_1_mid2_reg_828_pp0_iter1_reg;
reg   [0:0] tmp_1_mid2_reg_828_pp0_iter2_reg;
reg   [0:0] tmp_1_mid2_reg_828_pp0_iter3_reg;
reg   [0:0] tmp_1_mid2_reg_828_pp0_iter4_reg;
reg   [0:0] tmp_1_mid2_reg_828_pp0_iter5_reg;
reg   [0:0] tmp_1_mid2_reg_828_pp0_iter6_reg;
reg   [0:0] tmp_1_mid2_reg_828_pp0_iter7_reg;
wire   [0:0] or_cond_mid2_fu_454_p3;
reg   [0:0] or_cond_mid2_reg_832;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter1_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter2_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter3_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter4_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter5_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter6_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter7_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter8_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter9_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter10_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter11_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter12_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter13_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter14_reg;
reg   [0:0] or_cond_mid2_reg_832_pp0_iter15_reg;
wire   [0:0] tmp_4_mid2_fu_474_p3;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter1_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter2_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter3_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter4_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter5_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter6_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter7_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter8_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter9_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter10_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter11_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter12_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter13_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter14_reg;
reg   [0:0] tmp_4_mid2_reg_842_pp0_iter15_reg;
wire   [8:0] r_mid2_fu_482_p3;
reg   [9:0] buf_val_1_val_addr_reg_851;
reg   [9:0] buf_val_1_val_addr_reg_851_pp0_iter1_reg;
reg   [9:0] buf_val_1_val_addr_reg_851_pp0_iter2_reg;
reg   [9:0] buf_val_1_val_addr_reg_851_pp0_iter3_reg;
reg   [9:0] buf_val_1_val_addr_reg_851_pp0_iter4_reg;
reg   [9:0] buf_val_2_val_addr_reg_857;
reg   [9:0] buf_val_2_val_addr_reg_857_pp0_iter1_reg;
reg   [9:0] buf_val_2_val_addr_reg_857_pp0_iter2_reg;
reg   [9:0] buf_val_2_val_addr_reg_857_pp0_iter3_reg;
reg   [9:0] buf_val_2_val_addr_reg_857_pp0_iter4_reg;
reg   [9:0] buf_val_2_val_addr_reg_857_pp0_iter5_reg;
reg   [9:0] buf_val_2_val_addr_reg_857_pp0_iter6_reg;
reg   [9:0] buf_val_2_val_addr_reg_857_pp0_iter7_reg;
reg   [9:0] buf_val_2_val_addr_reg_857_pp0_iter8_reg;
reg   [9:0] buf_val_2_val_addr_reg_857_pp0_iter9_reg;
wire   [10:0] c_fu_496_p2;
wire   [191:0] buf_val_1_val_q0;
reg   [191:0] buf_val_1_val_load_reg_868;
reg    ap_enable_reg_pp0_iter1;
wire   [31:0] grp_fu_268_p2;
reg   [31:0] tmp_18_reg_908;
wire   [31:0] grp_fu_273_p2;
reg   [31:0] tmp_18_0_1_reg_913;
wire   [31:0] grp_fu_278_p2;
reg   [31:0] tmp_18_0_2_reg_918;
wire   [31:0] grp_fu_283_p2;
reg   [31:0] tmp_18_0_3_reg_923;
wire   [31:0] grp_fu_288_p2;
reg   [31:0] tmp_18_0_4_reg_928;
wire   [31:0] grp_fu_293_p2;
reg   [31:0] tmp_18_0_5_reg_933;
wire   [191:0] buf_val_2_val_q0;
reg   [191:0] buf_val_2_val_load_reg_938;
reg    ap_enable_reg_pp0_iter5;
wire   [31:0] grp_fu_190_p2;
reg   [31:0] tmp_30_reg_978;
wire   [31:0] grp_fu_195_p2;
reg   [31:0] tmp_19_0_1_reg_983;
wire   [31:0] grp_fu_200_p2;
reg   [31:0] tmp_19_0_2_reg_988;
wire   [31:0] grp_fu_205_p2;
reg   [31:0] tmp_19_0_3_reg_993;
wire   [31:0] grp_fu_210_p2;
reg   [31:0] tmp_19_0_4_reg_998;
wire   [31:0] grp_fu_215_p2;
reg   [31:0] tmp_19_0_5_reg_1003;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] tmp_18_1_reg_1008;
wire   [31:0] grp_fu_303_p2;
reg   [31:0] tmp_18_1_1_reg_1013;
wire   [31:0] grp_fu_308_p2;
reg   [31:0] tmp_18_1_2_reg_1018;
wire   [31:0] grp_fu_313_p2;
reg   [31:0] tmp_18_1_3_reg_1023;
wire   [31:0] grp_fu_318_p2;
reg   [31:0] tmp_18_1_4_reg_1028;
wire   [31:0] grp_fu_323_p2;
reg   [31:0] tmp_18_1_5_reg_1033;
wire   [31:0] grp_fu_220_p2;
reg   [31:0] tmp_19_1_reg_1073;
wire   [31:0] grp_fu_224_p2;
reg   [31:0] tmp_19_1_1_reg_1078;
wire   [31:0] grp_fu_228_p2;
reg   [31:0] tmp_19_1_2_reg_1083;
wire   [31:0] grp_fu_232_p2;
reg   [31:0] tmp_19_1_3_reg_1088;
wire   [31:0] grp_fu_236_p2;
reg   [31:0] tmp_19_1_4_reg_1093;
wire   [31:0] grp_fu_240_p2;
reg   [31:0] tmp_19_1_5_reg_1098;
wire   [31:0] grp_fu_328_p2;
reg   [31:0] tmp_18_2_reg_1103;
wire   [31:0] grp_fu_333_p2;
reg   [31:0] tmp_18_2_1_reg_1108;
wire   [31:0] grp_fu_338_p2;
reg   [31:0] tmp_18_2_2_reg_1113;
wire   [31:0] grp_fu_343_p2;
reg   [31:0] tmp_18_2_3_reg_1118;
wire   [31:0] grp_fu_348_p2;
reg   [31:0] tmp_18_2_4_reg_1123;
wire   [31:0] grp_fu_353_p2;
reg   [31:0] tmp_18_2_5_reg_1128;
wire   [31:0] tmp_42_fu_746_p3;
reg   [31:0] tmp_42_reg_1133;
wire   [31:0] tmp_43_fu_757_p3;
reg   [31:0] tmp_43_reg_1138;
wire   [31:0] tmp_44_fu_768_p3;
reg   [31:0] tmp_44_reg_1143;
wire   [31:0] tmp_45_fu_779_p3;
reg   [31:0] tmp_45_reg_1148;
wire   [31:0] tmp_46_fu_790_p3;
reg   [31:0] tmp_46_reg_1153;
wire   [31:0] tmp_47_fu_801_p3;
reg   [31:0] tmp_47_reg_1158;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
wire   [9:0] buf_val_1_val_address0;
reg    buf_val_1_val_ce0;
reg    buf_val_1_val_ce1;
reg    buf_val_1_val_we1;
reg    buf_val_2_val_ce0;
reg    buf_val_2_val_ce1;
reg    buf_val_2_val_we1;
wire   [191:0] ap_phi_reg_pp0_iter0_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter1_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter2_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter3_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter4_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter5_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter6_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter7_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter8_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter9_tmp_8_reg_178;
reg   [191:0] ap_phi_reg_pp0_iter10_tmp_8_reg_178;
wire   [63:0] tmp_s_fu_490_p1;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_268_p0;
wire   [31:0] grp_fu_273_p0;
wire   [31:0] grp_fu_278_p0;
wire   [31:0] grp_fu_283_p0;
wire   [31:0] grp_fu_288_p0;
wire   [31:0] grp_fu_293_p0;
wire   [31:0] grp_fu_298_p0;
wire   [31:0] grp_fu_303_p0;
wire   [31:0] grp_fu_308_p0;
wire   [31:0] grp_fu_313_p0;
wire   [31:0] grp_fu_318_p0;
wire   [31:0] grp_fu_323_p0;
wire   [31:0] grp_fu_328_p0;
wire   [31:0] grp_fu_333_p0;
wire   [31:0] grp_fu_338_p0;
wire   [31:0] grp_fu_343_p0;
wire   [31:0] grp_fu_348_p0;
wire   [31:0] grp_fu_353_p0;
wire   [7:0] tmp_fu_364_p4;
wire   [0:0] icmp_fu_374_p2;
wire   [0:0] tmp_1_fu_358_p2;
wire   [0:0] exitcond_fu_398_p2;
wire   [8:0] r_s_fu_412_p2;
wire   [0:0] tmp_1_mid1_fu_418_p2;
wire   [7:0] tmp_3_fu_432_p4;
wire   [0:0] icmp1_fu_442_p2;
wire   [0:0] or_cond_mid1_fu_448_p2;
wire   [0:0] or_cond_fu_380_p2;
wire   [0:0] tmp_4_mid1_fu_462_p2;
wire   [0:0] tmp_4_fu_468_p2;
wire   [10:0] col_assign_mid2_fu_404_p3;
wire   [31:0] tmp_9_fu_502_p1;
wire   [31:0] tmp_5_fu_510_p4;
wire   [31:0] tmp_10_fu_524_p4;
wire   [31:0] tmp_12_fu_538_p4;
wire   [31:0] tmp_14_fu_552_p4;
wire   [31:0] tmp_16_fu_566_p4;
wire   [31:0] tmp_49_fu_580_p1;
wire   [31:0] tmp_20_fu_588_p4;
wire   [31:0] tmp_22_fu_602_p4;
wire   [31:0] tmp_24_fu_616_p4;
wire   [31:0] tmp_26_fu_630_p4;
wire   [31:0] tmp_28_fu_644_p4;
wire   [31:0] tmp_50_fu_658_p1;
wire   [31:0] tmp_32_fu_667_p4;
wire   [31:0] tmp_34_fu_682_p4;
wire   [31:0] tmp_36_fu_697_p4;
wire   [31:0] tmp_38_fu_712_p4;
wire   [31:0] tmp_40_fu_727_p4;
wire   [31:0] grp_fu_244_p2;
wire   [31:0] tmp_51_fu_742_p1;
wire   [31:0] grp_fu_248_p2;
wire   [31:0] tmp_52_fu_753_p1;
wire   [31:0] grp_fu_252_p2;
wire   [31:0] tmp_53_fu_764_p1;
wire   [31:0] grp_fu_256_p2;
wire   [31:0] tmp_54_fu_775_p1;
wire   [31:0] grp_fu_260_p2;
wire   [31:0] tmp_55_fu_786_p1;
wire   [31:0] grp_fu_264_p2;
wire   [31:0] tmp_56_fu_797_p1;
reg    grp_fu_190_ce;
reg    grp_fu_195_ce;
reg    grp_fu_200_ce;
reg    grp_fu_205_ce;
reg    grp_fu_210_ce;
reg    grp_fu_215_ce;
reg    grp_fu_220_ce;
reg    grp_fu_224_ce;
reg    grp_fu_228_ce;
reg    grp_fu_232_ce;
reg    grp_fu_236_ce;
reg    grp_fu_240_ce;
reg    grp_fu_244_ce;
reg    grp_fu_248_ce;
reg    grp_fu_252_ce;
reg    grp_fu_256_ce;
reg    grp_fu_260_ce;
reg    grp_fu_264_ce;
reg    grp_fu_268_ce;
reg    grp_fu_273_ce;
reg    grp_fu_278_ce;
reg    grp_fu_283_ce;
reg    grp_fu_288_ce;
reg    grp_fu_293_ce;
reg    grp_fu_298_ce;
reg    grp_fu_303_ce;
reg    grp_fu_308_ce;
reg    grp_fu_313_ce;
reg    grp_fu_318_ce;
reg    grp_fu_323_ce;
reg    grp_fu_328_ce;
reg    grp_fu_333_ce;
reg    grp_fu_338_ce;
reg    grp_fu_343_ce;
reg    grp_fu_348_ce;
reg    grp_fu_353_ce;
wire    ap_CS_fsm_state20;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_139;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
end

a0_tensor_weight_y_bBew #(
    .DataWidth( 192 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_1_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_1_val_address0),
    .ce0(buf_val_1_val_ce0),
    .q0(buf_val_1_val_q0),
    .address1(buf_val_1_val_addr_reg_851_pp0_iter4_reg),
    .ce1(buf_val_1_val_ce1),
    .we1(buf_val_1_val_we1),
    .d1(buf_val_2_val_q0)
);

a0_tensor_weight_y_bBew #(
    .DataWidth( 192 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
buf_val_2_val_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(buf_val_2_val_addr_reg_857_pp0_iter3_reg),
    .ce0(buf_val_2_val_ce0),
    .q0(buf_val_2_val_q0),
    .address1(buf_val_2_val_addr_reg_857_pp0_iter9_reg),
    .ce1(buf_val_2_val_ce1),
    .we1(buf_val_2_val_we1),
    .d1(ap_phi_reg_pp0_iter10_tmp_8_reg_178)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U164(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_reg_908),
    .din1(32'd0),
    .ce(grp_fu_190_ce),
    .dout(grp_fu_190_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U165(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_0_1_reg_913),
    .din1(32'd0),
    .ce(grp_fu_195_ce),
    .dout(grp_fu_195_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U166(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_0_2_reg_918),
    .din1(32'd0),
    .ce(grp_fu_200_ce),
    .dout(grp_fu_200_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U167(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_0_3_reg_923),
    .din1(32'd0),
    .ce(grp_fu_205_ce),
    .dout(grp_fu_205_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U168(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_0_4_reg_928),
    .din1(32'd0),
    .ce(grp_fu_210_ce),
    .dout(grp_fu_210_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U169(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_18_0_5_reg_933),
    .din1(32'd0),
    .ce(grp_fu_215_ce),
    .dout(grp_fu_215_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U170(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_30_reg_978),
    .din1(tmp_18_1_reg_1008),
    .ce(grp_fu_220_ce),
    .dout(grp_fu_220_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U171(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_0_1_reg_983),
    .din1(tmp_18_1_1_reg_1013),
    .ce(grp_fu_224_ce),
    .dout(grp_fu_224_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U172(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_0_2_reg_988),
    .din1(tmp_18_1_2_reg_1018),
    .ce(grp_fu_228_ce),
    .dout(grp_fu_228_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U173(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_0_3_reg_993),
    .din1(tmp_18_1_3_reg_1023),
    .ce(grp_fu_232_ce),
    .dout(grp_fu_232_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U174(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_0_4_reg_998),
    .din1(tmp_18_1_4_reg_1028),
    .ce(grp_fu_236_ce),
    .dout(grp_fu_236_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U175(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_0_5_reg_1003),
    .din1(tmp_18_1_5_reg_1033),
    .ce(grp_fu_240_ce),
    .dout(grp_fu_240_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U176(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_1_reg_1073),
    .din1(tmp_18_2_reg_1103),
    .ce(grp_fu_244_ce),
    .dout(grp_fu_244_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U177(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_1_1_reg_1078),
    .din1(tmp_18_2_1_reg_1108),
    .ce(grp_fu_248_ce),
    .dout(grp_fu_248_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U178(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_1_2_reg_1083),
    .din1(tmp_18_2_2_reg_1113),
    .ce(grp_fu_252_ce),
    .dout(grp_fu_252_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U179(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_1_3_reg_1088),
    .din1(tmp_18_2_3_reg_1118),
    .ce(grp_fu_256_ce),
    .dout(grp_fu_256_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U180(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_1_4_reg_1093),
    .din1(tmp_18_2_4_reg_1123),
    .ce(grp_fu_260_ce),
    .dout(grp_fu_260_p2)
);

a0_optical_flow_faddhbi #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_faddhbi_U181(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_19_1_5_reg_1098),
    .din1(tmp_18_2_5_reg_1128),
    .ce(grp_fu_264_ce),
    .dout(grp_fu_264_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U182(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_268_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_268_ce),
    .dout(grp_fu_268_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U183(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_273_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_273_ce),
    .dout(grp_fu_273_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U184(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_278_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_278_ce),
    .dout(grp_fu_278_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U185(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_283_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_283_ce),
    .dout(grp_fu_283_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U186(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_288_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_288_ce),
    .dout(grp_fu_288_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U187(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_293_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_293_ce),
    .dout(grp_fu_293_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U188(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_298_p0),
    .din1(32'd1051975064),
    .ce(grp_fu_298_ce),
    .dout(grp_fu_298_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U189(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_303_p0),
    .din1(32'd1051975064),
    .ce(grp_fu_303_ce),
    .dout(grp_fu_303_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U190(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_308_p0),
    .din1(32'd1051975064),
    .ce(grp_fu_308_ce),
    .dout(grp_fu_308_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U191(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_313_p0),
    .din1(32'd1051975064),
    .ce(grp_fu_313_ce),
    .dout(grp_fu_313_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U192(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_318_p0),
    .din1(32'd1051975064),
    .ce(grp_fu_318_ce),
    .dout(grp_fu_318_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U193(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_323_p0),
    .din1(32'd1051975064),
    .ce(grp_fu_323_ce),
    .dout(grp_fu_323_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U194(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_328_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_328_ce),
    .dout(grp_fu_328_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U195(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_333_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_333_ce),
    .dout(grp_fu_333_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U196(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_338_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_338_ce),
    .dout(grp_fu_338_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U197(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_343_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_343_ce),
    .dout(grp_fu_343_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U198(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_348_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_348_ce),
    .dout(grp_fu_348_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U199(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_353_p0),
    .din1(32'd1051069094),
    .ce(grp_fu_353_ce),
    .dout(grp_fu_353_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter17 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((tmp_1_mid2_reg_828_pp0_iter8_reg == 1'd1) & (exitcond_flatten_reg_819_pp0_iter8_reg == 1'd0))) begin
            ap_phi_reg_pp0_iter10_tmp_8_reg_178 <= out_product_val_dout;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter10_tmp_8_reg_178 <= ap_phi_reg_pp0_iter9_tmp_8_reg_178;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_139)) begin
        if (((exitcond_flatten_fu_386_p2 == 1'd0) & (tmp_1_mid2_fu_424_p3 == 1'd0))) begin
            ap_phi_reg_pp0_iter1_tmp_8_reg_178 <= 192'd0;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter1_tmp_8_reg_178 <= ap_phi_reg_pp0_iter0_tmp_8_reg_178;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        col_assign_reg_167 <= c_fu_496_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        col_assign_reg_167 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_145 <= indvar_flatten_next_fu_392_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_145 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_reg_156 <= r_mid2_fu_482_p3;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        r_reg_156 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter2_tmp_8_reg_178 <= ap_phi_reg_pp0_iter1_tmp_8_reg_178;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter3_tmp_8_reg_178 <= ap_phi_reg_pp0_iter2_tmp_8_reg_178;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter4_tmp_8_reg_178 <= ap_phi_reg_pp0_iter3_tmp_8_reg_178;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter5_tmp_8_reg_178 <= ap_phi_reg_pp0_iter4_tmp_8_reg_178;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter6_tmp_8_reg_178 <= ap_phi_reg_pp0_iter5_tmp_8_reg_178;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter7_tmp_8_reg_178 <= ap_phi_reg_pp0_iter6_tmp_8_reg_178;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter8_tmp_8_reg_178 <= ap_phi_reg_pp0_iter7_tmp_8_reg_178;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_phi_reg_pp0_iter9_tmp_8_reg_178 <= ap_phi_reg_pp0_iter8_tmp_8_reg_178;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_386_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_1_val_addr_reg_851 <= tmp_s_fu_490_p1;
        buf_val_2_val_addr_reg_857 <= tmp_s_fu_490_p1;
        or_cond_mid2_reg_832 <= or_cond_mid2_fu_454_p3;
        tmp_1_mid2_reg_828 <= tmp_1_mid2_fu_424_p3;
        tmp_4_mid2_reg_842 <= tmp_4_mid2_fu_474_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_1_val_addr_reg_851_pp0_iter1_reg <= buf_val_1_val_addr_reg_851;
        buf_val_2_val_addr_reg_857_pp0_iter1_reg <= buf_val_2_val_addr_reg_857;
        exitcond_flatten_reg_819 <= exitcond_flatten_fu_386_p2;
        exitcond_flatten_reg_819_pp0_iter1_reg <= exitcond_flatten_reg_819;
        or_cond_mid2_reg_832_pp0_iter1_reg <= or_cond_mid2_reg_832;
        tmp_1_mid2_reg_828_pp0_iter1_reg <= tmp_1_mid2_reg_828;
        tmp_4_mid2_reg_842_pp0_iter1_reg <= tmp_4_mid2_reg_842;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        buf_val_1_val_addr_reg_851_pp0_iter2_reg <= buf_val_1_val_addr_reg_851_pp0_iter1_reg;
        buf_val_1_val_addr_reg_851_pp0_iter3_reg <= buf_val_1_val_addr_reg_851_pp0_iter2_reg;
        buf_val_1_val_addr_reg_851_pp0_iter4_reg <= buf_val_1_val_addr_reg_851_pp0_iter3_reg;
        buf_val_2_val_addr_reg_857_pp0_iter2_reg <= buf_val_2_val_addr_reg_857_pp0_iter1_reg;
        buf_val_2_val_addr_reg_857_pp0_iter3_reg <= buf_val_2_val_addr_reg_857_pp0_iter2_reg;
        buf_val_2_val_addr_reg_857_pp0_iter4_reg <= buf_val_2_val_addr_reg_857_pp0_iter3_reg;
        buf_val_2_val_addr_reg_857_pp0_iter5_reg <= buf_val_2_val_addr_reg_857_pp0_iter4_reg;
        buf_val_2_val_addr_reg_857_pp0_iter6_reg <= buf_val_2_val_addr_reg_857_pp0_iter5_reg;
        buf_val_2_val_addr_reg_857_pp0_iter7_reg <= buf_val_2_val_addr_reg_857_pp0_iter6_reg;
        buf_val_2_val_addr_reg_857_pp0_iter8_reg <= buf_val_2_val_addr_reg_857_pp0_iter7_reg;
        buf_val_2_val_addr_reg_857_pp0_iter9_reg <= buf_val_2_val_addr_reg_857_pp0_iter8_reg;
        exitcond_flatten_reg_819_pp0_iter2_reg <= exitcond_flatten_reg_819_pp0_iter1_reg;
        exitcond_flatten_reg_819_pp0_iter3_reg <= exitcond_flatten_reg_819_pp0_iter2_reg;
        exitcond_flatten_reg_819_pp0_iter4_reg <= exitcond_flatten_reg_819_pp0_iter3_reg;
        exitcond_flatten_reg_819_pp0_iter5_reg <= exitcond_flatten_reg_819_pp0_iter4_reg;
        exitcond_flatten_reg_819_pp0_iter6_reg <= exitcond_flatten_reg_819_pp0_iter5_reg;
        exitcond_flatten_reg_819_pp0_iter7_reg <= exitcond_flatten_reg_819_pp0_iter6_reg;
        exitcond_flatten_reg_819_pp0_iter8_reg <= exitcond_flatten_reg_819_pp0_iter7_reg;
        or_cond_mid2_reg_832_pp0_iter10_reg <= or_cond_mid2_reg_832_pp0_iter9_reg;
        or_cond_mid2_reg_832_pp0_iter11_reg <= or_cond_mid2_reg_832_pp0_iter10_reg;
        or_cond_mid2_reg_832_pp0_iter12_reg <= or_cond_mid2_reg_832_pp0_iter11_reg;
        or_cond_mid2_reg_832_pp0_iter13_reg <= or_cond_mid2_reg_832_pp0_iter12_reg;
        or_cond_mid2_reg_832_pp0_iter14_reg <= or_cond_mid2_reg_832_pp0_iter13_reg;
        or_cond_mid2_reg_832_pp0_iter15_reg <= or_cond_mid2_reg_832_pp0_iter14_reg;
        or_cond_mid2_reg_832_pp0_iter2_reg <= or_cond_mid2_reg_832_pp0_iter1_reg;
        or_cond_mid2_reg_832_pp0_iter3_reg <= or_cond_mid2_reg_832_pp0_iter2_reg;
        or_cond_mid2_reg_832_pp0_iter4_reg <= or_cond_mid2_reg_832_pp0_iter3_reg;
        or_cond_mid2_reg_832_pp0_iter5_reg <= or_cond_mid2_reg_832_pp0_iter4_reg;
        or_cond_mid2_reg_832_pp0_iter6_reg <= or_cond_mid2_reg_832_pp0_iter5_reg;
        or_cond_mid2_reg_832_pp0_iter7_reg <= or_cond_mid2_reg_832_pp0_iter6_reg;
        or_cond_mid2_reg_832_pp0_iter8_reg <= or_cond_mid2_reg_832_pp0_iter7_reg;
        or_cond_mid2_reg_832_pp0_iter9_reg <= or_cond_mid2_reg_832_pp0_iter8_reg;
        tmp_1_mid2_reg_828_pp0_iter2_reg <= tmp_1_mid2_reg_828_pp0_iter1_reg;
        tmp_1_mid2_reg_828_pp0_iter3_reg <= tmp_1_mid2_reg_828_pp0_iter2_reg;
        tmp_1_mid2_reg_828_pp0_iter4_reg <= tmp_1_mid2_reg_828_pp0_iter3_reg;
        tmp_1_mid2_reg_828_pp0_iter5_reg <= tmp_1_mid2_reg_828_pp0_iter4_reg;
        tmp_1_mid2_reg_828_pp0_iter6_reg <= tmp_1_mid2_reg_828_pp0_iter5_reg;
        tmp_1_mid2_reg_828_pp0_iter7_reg <= tmp_1_mid2_reg_828_pp0_iter6_reg;
        tmp_1_mid2_reg_828_pp0_iter8_reg <= tmp_1_mid2_reg_828_pp0_iter7_reg;
        tmp_4_mid2_reg_842_pp0_iter10_reg <= tmp_4_mid2_reg_842_pp0_iter9_reg;
        tmp_4_mid2_reg_842_pp0_iter11_reg <= tmp_4_mid2_reg_842_pp0_iter10_reg;
        tmp_4_mid2_reg_842_pp0_iter12_reg <= tmp_4_mid2_reg_842_pp0_iter11_reg;
        tmp_4_mid2_reg_842_pp0_iter13_reg <= tmp_4_mid2_reg_842_pp0_iter12_reg;
        tmp_4_mid2_reg_842_pp0_iter14_reg <= tmp_4_mid2_reg_842_pp0_iter13_reg;
        tmp_4_mid2_reg_842_pp0_iter15_reg <= tmp_4_mid2_reg_842_pp0_iter14_reg;
        tmp_4_mid2_reg_842_pp0_iter16_reg <= tmp_4_mid2_reg_842_pp0_iter15_reg;
        tmp_4_mid2_reg_842_pp0_iter2_reg <= tmp_4_mid2_reg_842_pp0_iter1_reg;
        tmp_4_mid2_reg_842_pp0_iter3_reg <= tmp_4_mid2_reg_842_pp0_iter2_reg;
        tmp_4_mid2_reg_842_pp0_iter4_reg <= tmp_4_mid2_reg_842_pp0_iter3_reg;
        tmp_4_mid2_reg_842_pp0_iter5_reg <= tmp_4_mid2_reg_842_pp0_iter4_reg;
        tmp_4_mid2_reg_842_pp0_iter6_reg <= tmp_4_mid2_reg_842_pp0_iter5_reg;
        tmp_4_mid2_reg_842_pp0_iter7_reg <= tmp_4_mid2_reg_842_pp0_iter6_reg;
        tmp_4_mid2_reg_842_pp0_iter8_reg <= tmp_4_mid2_reg_842_pp0_iter7_reg;
        tmp_4_mid2_reg_842_pp0_iter9_reg <= tmp_4_mid2_reg_842_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_819 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_1_val_load_reg_868 <= buf_val_1_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_819_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_2_val_load_reg_938 <= buf_val_2_val_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_mid2_reg_832_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_18_0_1_reg_913 <= grp_fu_273_p2;
        tmp_18_0_2_reg_918 <= grp_fu_278_p2;
        tmp_18_0_3_reg_923 <= grp_fu_283_p2;
        tmp_18_0_4_reg_928 <= grp_fu_288_p2;
        tmp_18_0_5_reg_933 <= grp_fu_293_p2;
        tmp_18_reg_908 <= grp_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_mid2_reg_832_pp0_iter7_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_18_1_1_reg_1013 <= grp_fu_303_p2;
        tmp_18_1_2_reg_1018 <= grp_fu_308_p2;
        tmp_18_1_3_reg_1023 <= grp_fu_313_p2;
        tmp_18_1_4_reg_1028 <= grp_fu_318_p2;
        tmp_18_1_5_reg_1033 <= grp_fu_323_p2;
        tmp_18_1_reg_1008 <= grp_fu_298_p2;
        tmp_19_0_1_reg_983 <= grp_fu_195_p2;
        tmp_19_0_2_reg_988 <= grp_fu_200_p2;
        tmp_19_0_3_reg_993 <= grp_fu_205_p2;
        tmp_19_0_4_reg_998 <= grp_fu_210_p2;
        tmp_19_0_5_reg_1003 <= grp_fu_215_p2;
        tmp_30_reg_978 <= grp_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((or_cond_mid2_reg_832_pp0_iter11_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_18_2_1_reg_1108 <= grp_fu_333_p2;
        tmp_18_2_2_reg_1113 <= grp_fu_338_p2;
        tmp_18_2_3_reg_1118 <= grp_fu_343_p2;
        tmp_18_2_4_reg_1123 <= grp_fu_348_p2;
        tmp_18_2_5_reg_1128 <= grp_fu_353_p2;
        tmp_18_2_reg_1103 <= grp_fu_328_p2;
        tmp_19_1_1_reg_1078 <= grp_fu_224_p2;
        tmp_19_1_2_reg_1083 <= grp_fu_228_p2;
        tmp_19_1_3_reg_1088 <= grp_fu_232_p2;
        tmp_19_1_4_reg_1093 <= grp_fu_236_p2;
        tmp_19_1_5_reg_1098 <= grp_fu_240_p2;
        tmp_19_1_reg_1073 <= grp_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_mid2_reg_842_pp0_iter15_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_42_reg_1133 <= tmp_42_fu_746_p3;
        tmp_43_reg_1138 <= tmp_43_fu_757_p3;
        tmp_44_reg_1143 <= tmp_44_fu_768_p3;
        tmp_45_reg_1148 <= tmp_45_fu_779_p3;
        tmp_46_reg_1153 <= tmp_46_fu_790_p3;
        tmp_47_reg_1158 <= tmp_47_fu_801_p3;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_386_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_1_val_ce0 = 1'b1;
    end else begin
        buf_val_1_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_1_val_ce1 = 1'b1;
    end else begin
        buf_val_1_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_819_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_1_val_we1 = 1'b1;
    end else begin
        buf_val_1_val_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_2_val_ce0 = 1'b1;
    end else begin
        buf_val_2_val_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_2_val_ce1 = 1'b1;
    end else begin
        buf_val_2_val_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        buf_val_2_val_we1 = 1'b1;
    end else begin
        buf_val_2_val_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_190_ce = 1'b1;
    end else begin
        grp_fu_190_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_195_ce = 1'b1;
    end else begin
        grp_fu_195_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_200_ce = 1'b1;
    end else begin
        grp_fu_200_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_205_ce = 1'b1;
    end else begin
        grp_fu_205_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_210_ce = 1'b1;
    end else begin
        grp_fu_210_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_215_ce = 1'b1;
    end else begin
        grp_fu_215_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_220_ce = 1'b1;
    end else begin
        grp_fu_220_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_224_ce = 1'b1;
    end else begin
        grp_fu_224_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_228_ce = 1'b1;
    end else begin
        grp_fu_228_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_232_ce = 1'b1;
    end else begin
        grp_fu_232_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_236_ce = 1'b1;
    end else begin
        grp_fu_236_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_240_ce = 1'b1;
    end else begin
        grp_fu_240_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_244_ce = 1'b1;
    end else begin
        grp_fu_244_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_248_ce = 1'b1;
    end else begin
        grp_fu_248_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_252_ce = 1'b1;
    end else begin
        grp_fu_252_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_256_ce = 1'b1;
    end else begin
        grp_fu_256_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_260_ce = 1'b1;
    end else begin
        grp_fu_260_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_264_ce = 1'b1;
    end else begin
        grp_fu_264_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_268_ce = 1'b1;
    end else begin
        grp_fu_268_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_273_ce = 1'b1;
    end else begin
        grp_fu_273_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_278_ce = 1'b1;
    end else begin
        grp_fu_278_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_283_ce = 1'b1;
    end else begin
        grp_fu_283_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_288_ce = 1'b1;
    end else begin
        grp_fu_288_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_293_ce = 1'b1;
    end else begin
        grp_fu_293_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_298_ce = 1'b1;
    end else begin
        grp_fu_298_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_303_ce = 1'b1;
    end else begin
        grp_fu_303_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_308_ce = 1'b1;
    end else begin
        grp_fu_308_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_313_ce = 1'b1;
    end else begin
        grp_fu_313_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_318_ce = 1'b1;
    end else begin
        grp_fu_318_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_323_ce = 1'b1;
    end else begin
        grp_fu_323_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_328_ce = 1'b1;
    end else begin
        grp_fu_328_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_333_ce = 1'b1;
    end else begin
        grp_fu_333_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_338_ce = 1'b1;
    end else begin
        grp_fu_338_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_343_ce = 1'b1;
    end else begin
        grp_fu_343_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_348_ce = 1'b1;
    end else begin
        grp_fu_348_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_353_ce = 1'b1;
    end else begin
        grp_fu_353_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_mid2_reg_828_pp0_iter8_reg == 1'd1) & (exitcond_flatten_reg_819_pp0_iter8_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        out_product_val_blk_n = out_product_val_empty_n;
    end else begin
        out_product_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (ap_predicate_op146_read_state11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_product_val_read = 1'b1;
    end else begin
        out_product_val_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_4_mid2_reg_842_pp0_iter16_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter17 == 1'b1))) begin
        tensor_y_val_blk_n = tensor_y_val_full_n;
    end else begin
        tensor_y_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((tmp_4_mid2_reg_842_pp0_iter16_reg == 1'd0) & (ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tensor_y_val_write = 1'b1;
    end else begin
        tensor_y_val_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_386_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter16 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter17 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter16 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((exitcond_flatten_fu_386_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((tmp_4_mid2_reg_842_pp0_iter16_reg == 1'd0) & (tensor_y_val_full_n == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((out_product_val_empty_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_predicate_op146_read_state11 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((tmp_4_mid2_reg_842_pp0_iter16_reg == 1'd0) & (tensor_y_val_full_n == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((out_product_val_empty_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_predicate_op146_read_state11 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((tmp_4_mid2_reg_842_pp0_iter16_reg == 1'd0) & (tensor_y_val_full_n == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b1)) | ((out_product_val_empty_n == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b1) & (ap_predicate_op146_read_state11 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter9 = ((out_product_val_empty_n == 1'b0) & (ap_predicate_op146_read_state11 == 1'b1));
end

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state19_pp0_stage0_iter17 = ((tmp_4_mid2_reg_842_pp0_iter16_reg == 1'd0) & (tensor_y_val_full_n == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_139 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_tmp_8_reg_178 = 'bx;

always @ (*) begin
    ap_predicate_op146_read_state11 = ((tmp_1_mid2_reg_828_pp0_iter8_reg == 1'd1) & (exitcond_flatten_reg_819_pp0_iter8_reg == 1'd0));
end

assign ap_ready = internal_ap_ready;

assign buf_val_1_val_address0 = tmp_s_fu_490_p1;

assign c_fu_496_p2 = (col_assign_mid2_fu_404_p3 + 11'd1);

assign col_assign_mid2_fu_404_p3 = ((exitcond_fu_398_p2[0:0] === 1'b1) ? 11'd0 : col_assign_reg_167);

assign exitcond_flatten_fu_386_p2 = ((indvar_flatten_reg_145 == 19'd447488) ? 1'b1 : 1'b0);

assign exitcond_fu_398_p2 = ((col_assign_reg_167 == 11'd1024) ? 1'b1 : 1'b0);

assign grp_fu_268_p0 = tmp_9_fu_502_p1;

assign grp_fu_273_p0 = tmp_5_fu_510_p4;

assign grp_fu_278_p0 = tmp_10_fu_524_p4;

assign grp_fu_283_p0 = tmp_12_fu_538_p4;

assign grp_fu_288_p0 = tmp_14_fu_552_p4;

assign grp_fu_293_p0 = tmp_16_fu_566_p4;

assign grp_fu_298_p0 = tmp_49_fu_580_p1;

assign grp_fu_303_p0 = tmp_20_fu_588_p4;

assign grp_fu_308_p0 = tmp_22_fu_602_p4;

assign grp_fu_313_p0 = tmp_24_fu_616_p4;

assign grp_fu_318_p0 = tmp_26_fu_630_p4;

assign grp_fu_323_p0 = tmp_28_fu_644_p4;

assign grp_fu_328_p0 = tmp_50_fu_658_p1;

assign grp_fu_333_p0 = tmp_32_fu_667_p4;

assign grp_fu_338_p0 = tmp_34_fu_682_p4;

assign grp_fu_343_p0 = tmp_36_fu_697_p4;

assign grp_fu_348_p0 = tmp_38_fu_712_p4;

assign grp_fu_353_p0 = tmp_40_fu_727_p4;

assign icmp1_fu_442_p2 = ((tmp_3_fu_432_p4 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_fu_374_p2 = ((tmp_fu_364_p4 != 8'd0) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_392_p2 = (indvar_flatten_reg_145 + 19'd1);

assign or_cond_fu_380_p2 = (tmp_1_fu_358_p2 & icmp_fu_374_p2);

assign or_cond_mid1_fu_448_p2 = (tmp_1_mid1_fu_418_p2 & icmp1_fu_442_p2);

assign or_cond_mid2_fu_454_p3 = ((exitcond_fu_398_p2[0:0] === 1'b1) ? or_cond_mid1_fu_448_p2 : or_cond_fu_380_p2);

assign r_mid2_fu_482_p3 = ((exitcond_fu_398_p2[0:0] === 1'b1) ? r_s_fu_412_p2 : r_reg_156);

assign r_s_fu_412_p2 = (r_reg_156 + 9'd1);

assign start_out = real_start;

assign tensor_y_val_din = {{{{{{tmp_47_reg_1158}, {tmp_46_reg_1153}}, {tmp_45_reg_1148}}, {tmp_44_reg_1143}}, {tmp_43_reg_1138}}, {tmp_42_reg_1133}};

assign tmp_10_fu_524_p4 = {{buf_val_1_val_load_reg_868[95:64]}};

assign tmp_12_fu_538_p4 = {{buf_val_1_val_load_reg_868[127:96]}};

assign tmp_14_fu_552_p4 = {{buf_val_1_val_load_reg_868[159:128]}};

assign tmp_16_fu_566_p4 = {{buf_val_1_val_load_reg_868[191:160]}};

assign tmp_1_fu_358_p2 = ((r_reg_156 < 9'd436) ? 1'b1 : 1'b0);

assign tmp_1_mid1_fu_418_p2 = ((r_s_fu_412_p2 < 9'd436) ? 1'b1 : 1'b0);

assign tmp_1_mid2_fu_424_p3 = ((exitcond_fu_398_p2[0:0] === 1'b1) ? tmp_1_mid1_fu_418_p2 : tmp_1_fu_358_p2);

assign tmp_20_fu_588_p4 = {{buf_val_2_val_load_reg_938[63:32]}};

assign tmp_22_fu_602_p4 = {{buf_val_2_val_load_reg_938[95:64]}};

assign tmp_24_fu_616_p4 = {{buf_val_2_val_load_reg_938[127:96]}};

assign tmp_26_fu_630_p4 = {{buf_val_2_val_load_reg_938[159:128]}};

assign tmp_28_fu_644_p4 = {{buf_val_2_val_load_reg_938[191:160]}};

assign tmp_32_fu_667_p4 = {{ap_phi_reg_pp0_iter10_tmp_8_reg_178[63:32]}};

assign tmp_34_fu_682_p4 = {{ap_phi_reg_pp0_iter10_tmp_8_reg_178[95:64]}};

assign tmp_36_fu_697_p4 = {{ap_phi_reg_pp0_iter10_tmp_8_reg_178[127:96]}};

assign tmp_38_fu_712_p4 = {{ap_phi_reg_pp0_iter10_tmp_8_reg_178[159:128]}};

assign tmp_3_fu_432_p4 = {{r_s_fu_412_p2[8:1]}};

assign tmp_40_fu_727_p4 = {{ap_phi_reg_pp0_iter10_tmp_8_reg_178[191:160]}};

assign tmp_42_fu_746_p3 = ((or_cond_mid2_reg_832_pp0_iter15_reg[0:0] === 1'b1) ? tmp_51_fu_742_p1 : 32'd0);

assign tmp_43_fu_757_p3 = ((or_cond_mid2_reg_832_pp0_iter15_reg[0:0] === 1'b1) ? tmp_52_fu_753_p1 : 32'd0);

assign tmp_44_fu_768_p3 = ((or_cond_mid2_reg_832_pp0_iter15_reg[0:0] === 1'b1) ? tmp_53_fu_764_p1 : 32'd0);

assign tmp_45_fu_779_p3 = ((or_cond_mid2_reg_832_pp0_iter15_reg[0:0] === 1'b1) ? tmp_54_fu_775_p1 : 32'd0);

assign tmp_46_fu_790_p3 = ((or_cond_mid2_reg_832_pp0_iter15_reg[0:0] === 1'b1) ? tmp_55_fu_786_p1 : 32'd0);

assign tmp_47_fu_801_p3 = ((or_cond_mid2_reg_832_pp0_iter15_reg[0:0] === 1'b1) ? tmp_56_fu_797_p1 : 32'd0);

assign tmp_49_fu_580_p1 = buf_val_2_val_load_reg_938[31:0];

assign tmp_4_fu_468_p2 = ((r_reg_156 == 9'd0) ? 1'b1 : 1'b0);

assign tmp_4_mid1_fu_462_p2 = ((r_s_fu_412_p2 == 9'd0) ? 1'b1 : 1'b0);

assign tmp_4_mid2_fu_474_p3 = ((exitcond_fu_398_p2[0:0] === 1'b1) ? tmp_4_mid1_fu_462_p2 : tmp_4_fu_468_p2);

assign tmp_50_fu_658_p1 = ap_phi_reg_pp0_iter10_tmp_8_reg_178[31:0];

assign tmp_51_fu_742_p1 = grp_fu_244_p2;

assign tmp_52_fu_753_p1 = grp_fu_248_p2;

assign tmp_53_fu_764_p1 = grp_fu_252_p2;

assign tmp_54_fu_775_p1 = grp_fu_256_p2;

assign tmp_55_fu_786_p1 = grp_fu_260_p2;

assign tmp_56_fu_797_p1 = grp_fu_264_p2;

assign tmp_5_fu_510_p4 = {{buf_val_1_val_load_reg_868[63:32]}};

assign tmp_9_fu_502_p1 = buf_val_1_val_load_reg_868[31:0];

assign tmp_fu_364_p4 = {{r_reg_156[8:1]}};

assign tmp_s_fu_490_p1 = col_assign_mid2_fu_404_p3;

endmodule //a0_tensor_weight_y
