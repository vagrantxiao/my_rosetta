// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _a0_outer_product_HH_
#define _a0_outer_product_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "a0_optical_flow_fmulibs.h"

namespace ap_rtl {

struct a0_outer_product : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > filtered_gradient_x_dout;
    sc_in< sc_logic > filtered_gradient_x_empty_n;
    sc_out< sc_logic > filtered_gradient_x_read;
    sc_in< sc_lv<32> > filtered_gradient_y_dout;
    sc_in< sc_logic > filtered_gradient_y_empty_n;
    sc_out< sc_logic > filtered_gradient_y_read;
    sc_in< sc_lv<32> > filtered_gradient_z_dout;
    sc_in< sc_logic > filtered_gradient_z_empty_n;
    sc_out< sc_logic > filtered_gradient_z_read;
    sc_out< sc_lv<192> > out_product_val_din;
    sc_in< sc_logic > out_product_val_full_n;
    sc_out< sc_logic > out_product_val_write;


    // Module declarations
    a0_outer_product(sc_module_name name);
    SC_HAS_PROCESS(a0_outer_product);

    ~a0_outer_product();

    sc_trace_file* mVcdFile;

    a0_optical_flow_fmulibs<1,3,32,32,32>* optical_flow_fmulibs_U154;
    a0_optical_flow_fmulibs<1,3,32,32,32>* optical_flow_fmulibs_U155;
    a0_optical_flow_fmulibs<1,3,32,32,32>* optical_flow_fmulibs_U156;
    a0_optical_flow_fmulibs<1,3,32,32,32>* optical_flow_fmulibs_U157;
    a0_optical_flow_fmulibs<1,3,32,32,32>* optical_flow_fmulibs_U158;
    a0_optical_flow_fmulibs<1,3,32,32,32>* optical_flow_fmulibs_U159;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > filtered_gradient_x_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_149;
    sc_signal< sc_logic > filtered_gradient_y_blk_n;
    sc_signal< sc_logic > filtered_gradient_z_blk_n;
    sc_signal< sc_logic > out_product_val_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter5;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_149_pp0_iter4_reg;
    sc_signal< sc_lv<19> > indvar_flatten_reg_67;
    sc_signal< sc_lv<1> > exitcond_flatten_fu_102_p2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter3;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter4;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter5;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_149_pp0_iter1_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_149_pp0_iter2_reg;
    sc_signal< sc_lv<1> > exitcond_flatten_reg_149_pp0_iter3_reg;
    sc_signal< sc_lv<19> > indvar_flatten_next_fu_108_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > grad_x_reg_158;
    sc_signal< sc_lv<32> > grad_y_reg_166;
    sc_signal< sc_lv<32> > grad_z_reg_174;
    sc_signal< sc_lv<32> > grp_fu_78_p2;
    sc_signal< sc_lv<32> > tmp_7_reg_182;
    sc_signal< sc_lv<32> > grp_fu_82_p2;
    sc_signal< sc_lv<32> > tmp_8_reg_187;
    sc_signal< sc_lv<32> > grp_fu_86_p2;
    sc_signal< sc_lv<32> > tmp_9_reg_192;
    sc_signal< sc_lv<32> > grp_fu_90_p2;
    sc_signal< sc_lv<32> > tmp_10_reg_197;
    sc_signal< sc_lv<32> > grp_fu_94_p2;
    sc_signal< sc_lv<32> > tmp_11_reg_202;
    sc_signal< sc_lv<32> > grp_fu_98_p2;
    sc_signal< sc_lv<32> > tmp_12_reg_207;
    sc_signal< bool > ap_block_state1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter4;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<32> > tmp_s_fu_129_p1;
    sc_signal< sc_lv<32> > tmp_73_fu_126_p1;
    sc_signal< sc_lv<32> > tmp_72_fu_123_p1;
    sc_signal< sc_lv<32> > tmp_71_fu_120_p1;
    sc_signal< sc_lv<32> > tmp_70_fu_117_p1;
    sc_signal< sc_lv<32> > tmp_69_fu_114_p1;
    sc_signal< sc_logic > grp_fu_78_ce;
    sc_signal< sc_logic > grp_fu_82_ce;
    sc_signal< sc_logic > grp_fu_86_ce;
    sc_signal< sc_logic > grp_fu_90_ce;
    sc_signal< sc_logic > grp_fu_94_ce;
    sc_signal< sc_logic > grp_fu_98_ce;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state8;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<19> ap_const_lv19_0;
    static const sc_lv<19> ap_const_lv19_6D000;
    static const sc_lv<19> ap_const_lv19_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state8();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_block_state5_pp0_stage0_iter3();
    void thread_ap_block_state6_pp0_stage0_iter4();
    void thread_ap_block_state7_pp0_stage0_iter5();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond_flatten_fu_102_p2();
    void thread_filtered_gradient_x_blk_n();
    void thread_filtered_gradient_x_read();
    void thread_filtered_gradient_y_blk_n();
    void thread_filtered_gradient_y_read();
    void thread_filtered_gradient_z_blk_n();
    void thread_filtered_gradient_z_read();
    void thread_grp_fu_78_ce();
    void thread_grp_fu_82_ce();
    void thread_grp_fu_86_ce();
    void thread_grp_fu_90_ce();
    void thread_grp_fu_94_ce();
    void thread_grp_fu_98_ce();
    void thread_indvar_flatten_next_fu_108_p2();
    void thread_internal_ap_ready();
    void thread_out_product_val_blk_n();
    void thread_out_product_val_din();
    void thread_out_product_val_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_69_fu_114_p1();
    void thread_tmp_70_fu_117_p1();
    void thread_tmp_71_fu_120_p1();
    void thread_tmp_72_fu_123_p1();
    void thread_tmp_73_fu_126_p1();
    void thread_tmp_s_fu_129_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
