// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "a0_outer_product.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic a0_outer_product::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic a0_outer_product::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> a0_outer_product::ap_ST_fsm_state1 = "1";
const sc_lv<3> a0_outer_product::ap_ST_fsm_pp0_stage0 = "10";
const sc_lv<3> a0_outer_product::ap_ST_fsm_state8 = "100";
const bool a0_outer_product::ap_const_boolean_1 = true;
const sc_lv<32> a0_outer_product::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> a0_outer_product::ap_const_lv32_1 = "1";
const bool a0_outer_product::ap_const_boolean_0 = false;
const sc_lv<1> a0_outer_product::ap_const_lv1_0 = "0";
const sc_lv<1> a0_outer_product::ap_const_lv1_1 = "1";
const sc_lv<19> a0_outer_product::ap_const_lv19_0 = "0000000000000000000";
const sc_lv<19> a0_outer_product::ap_const_lv19_6D000 = "1101101000000000000";
const sc_lv<19> a0_outer_product::ap_const_lv19_1 = "1";
const sc_lv<32> a0_outer_product::ap_const_lv32_2 = "10";

a0_outer_product::a0_outer_product(sc_module_name name) : sc_module(name), mVcdFile(0) {
    optical_flow_fmulibs_U154 = new a0_optical_flow_fmulibs<1,3,32,32,32>("optical_flow_fmulibs_U154");
    optical_flow_fmulibs_U154->clk(ap_clk);
    optical_flow_fmulibs_U154->reset(ap_rst);
    optical_flow_fmulibs_U154->din0(grad_x_reg_158);
    optical_flow_fmulibs_U154->din1(grad_x_reg_158);
    optical_flow_fmulibs_U154->ce(grp_fu_78_ce);
    optical_flow_fmulibs_U154->dout(grp_fu_78_p2);
    optical_flow_fmulibs_U155 = new a0_optical_flow_fmulibs<1,3,32,32,32>("optical_flow_fmulibs_U155");
    optical_flow_fmulibs_U155->clk(ap_clk);
    optical_flow_fmulibs_U155->reset(ap_rst);
    optical_flow_fmulibs_U155->din0(grad_y_reg_166);
    optical_flow_fmulibs_U155->din1(grad_y_reg_166);
    optical_flow_fmulibs_U155->ce(grp_fu_82_ce);
    optical_flow_fmulibs_U155->dout(grp_fu_82_p2);
    optical_flow_fmulibs_U156 = new a0_optical_flow_fmulibs<1,3,32,32,32>("optical_flow_fmulibs_U156");
    optical_flow_fmulibs_U156->clk(ap_clk);
    optical_flow_fmulibs_U156->reset(ap_rst);
    optical_flow_fmulibs_U156->din0(grad_z_reg_174);
    optical_flow_fmulibs_U156->din1(grad_z_reg_174);
    optical_flow_fmulibs_U156->ce(grp_fu_86_ce);
    optical_flow_fmulibs_U156->dout(grp_fu_86_p2);
    optical_flow_fmulibs_U157 = new a0_optical_flow_fmulibs<1,3,32,32,32>("optical_flow_fmulibs_U157");
    optical_flow_fmulibs_U157->clk(ap_clk);
    optical_flow_fmulibs_U157->reset(ap_rst);
    optical_flow_fmulibs_U157->din0(grad_x_reg_158);
    optical_flow_fmulibs_U157->din1(grad_y_reg_166);
    optical_flow_fmulibs_U157->ce(grp_fu_90_ce);
    optical_flow_fmulibs_U157->dout(grp_fu_90_p2);
    optical_flow_fmulibs_U158 = new a0_optical_flow_fmulibs<1,3,32,32,32>("optical_flow_fmulibs_U158");
    optical_flow_fmulibs_U158->clk(ap_clk);
    optical_flow_fmulibs_U158->reset(ap_rst);
    optical_flow_fmulibs_U158->din0(grad_x_reg_158);
    optical_flow_fmulibs_U158->din1(grad_z_reg_174);
    optical_flow_fmulibs_U158->ce(grp_fu_94_ce);
    optical_flow_fmulibs_U158->dout(grp_fu_94_p2);
    optical_flow_fmulibs_U159 = new a0_optical_flow_fmulibs<1,3,32,32,32>("optical_flow_fmulibs_U159");
    optical_flow_fmulibs_U159->clk(ap_clk);
    optical_flow_fmulibs_U159->reset(ap_rst);
    optical_flow_fmulibs_U159->din0(grad_y_reg_166);
    optical_flow_fmulibs_U159->din1(grad_z_reg_174);
    optical_flow_fmulibs_U159->ce(grp_fu_98_ce);
    optical_flow_fmulibs_U159->dout(grp_fu_98_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( filtered_gradient_x_empty_n );
    sensitive << ( filtered_gradient_y_empty_n );
    sensitive << ( filtered_gradient_z_empty_n );
    sensitive << ( out_product_val_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_149 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_flatten_reg_149_pp0_iter4_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( filtered_gradient_x_empty_n );
    sensitive << ( filtered_gradient_y_empty_n );
    sensitive << ( filtered_gradient_z_empty_n );
    sensitive << ( out_product_val_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_149 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_flatten_reg_149_pp0_iter4_reg );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( filtered_gradient_x_empty_n );
    sensitive << ( filtered_gradient_y_empty_n );
    sensitive << ( filtered_gradient_z_empty_n );
    sensitive << ( out_product_val_full_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_149 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_flatten_reg_149_pp0_iter4_reg );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter1);
    sensitive << ( filtered_gradient_x_empty_n );
    sensitive << ( filtered_gradient_y_empty_n );
    sensitive << ( filtered_gradient_z_empty_n );
    sensitive << ( exitcond_flatten_reg_149 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter5);
    sensitive << ( out_product_val_full_n );
    sensitive << ( exitcond_flatten_reg_149_pp0_iter4_reg );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state2);
    sensitive << ( exitcond_flatten_fu_102_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( real_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter3 );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( internal_ap_ready );

    SC_METHOD(thread_exitcond_flatten_fu_102_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( indvar_flatten_reg_67 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_filtered_gradient_x_blk_n);
    sensitive << ( filtered_gradient_x_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_149 );

    SC_METHOD(thread_filtered_gradient_x_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_149 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_filtered_gradient_y_blk_n);
    sensitive << ( filtered_gradient_y_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_149 );

    SC_METHOD(thread_filtered_gradient_y_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_149 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_filtered_gradient_z_blk_n);
    sensitive << ( filtered_gradient_z_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_149 );

    SC_METHOD(thread_filtered_gradient_z_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_149 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_78_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_82_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_86_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_90_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_94_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_grp_fu_98_ce);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_indvar_flatten_next_fu_108_p2);
    sensitive << ( indvar_flatten_reg_67 );

    SC_METHOD(thread_internal_ap_ready);
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_out_product_val_blk_n);
    sensitive << ( out_product_val_full_n );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_flatten_reg_149_pp0_iter4_reg );

    SC_METHOD(thread_out_product_val_din);
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_flatten_reg_149_pp0_iter4_reg );
    sensitive << ( ap_block_pp0_stage0_01001 );
    sensitive << ( tmp_s_fu_129_p1 );
    sensitive << ( tmp_73_fu_126_p1 );
    sensitive << ( tmp_72_fu_123_p1 );
    sensitive << ( tmp_71_fu_120_p1 );
    sensitive << ( tmp_70_fu_117_p1 );
    sensitive << ( tmp_69_fu_114_p1 );

    SC_METHOD(thread_out_product_val_write);
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_flatten_reg_149_pp0_iter4_reg );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_real_start);
    sensitive << ( ap_start );
    sensitive << ( start_full_n );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_start_out);
    sensitive << ( real_start );

    SC_METHOD(thread_start_write);
    sensitive << ( real_start );
    sensitive << ( start_once_reg );

    SC_METHOD(thread_tmp_69_fu_114_p1);
    sensitive << ( tmp_7_reg_182 );

    SC_METHOD(thread_tmp_70_fu_117_p1);
    sensitive << ( tmp_8_reg_187 );

    SC_METHOD(thread_tmp_71_fu_120_p1);
    sensitive << ( tmp_9_reg_192 );

    SC_METHOD(thread_tmp_72_fu_123_p1);
    sensitive << ( tmp_10_reg_197 );

    SC_METHOD(thread_tmp_73_fu_126_p1);
    sensitive << ( tmp_11_reg_202 );

    SC_METHOD(thread_tmp_s_fu_129_p1);
    sensitive << ( tmp_12_reg_207 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( real_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter5 );
    sensitive << ( exitcond_flatten_fu_102_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_enable_reg_pp0_iter4 );

    start_once_reg = SC_LOGIC_0;
    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter5 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter3 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter4 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "a0_outer_product_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, start_full_n, "(port)start_full_n");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, start_out, "(port)start_out");
    sc_trace(mVcdFile, start_write, "(port)start_write");
    sc_trace(mVcdFile, filtered_gradient_x_dout, "(port)filtered_gradient_x_dout");
    sc_trace(mVcdFile, filtered_gradient_x_empty_n, "(port)filtered_gradient_x_empty_n");
    sc_trace(mVcdFile, filtered_gradient_x_read, "(port)filtered_gradient_x_read");
    sc_trace(mVcdFile, filtered_gradient_y_dout, "(port)filtered_gradient_y_dout");
    sc_trace(mVcdFile, filtered_gradient_y_empty_n, "(port)filtered_gradient_y_empty_n");
    sc_trace(mVcdFile, filtered_gradient_y_read, "(port)filtered_gradient_y_read");
    sc_trace(mVcdFile, filtered_gradient_z_dout, "(port)filtered_gradient_z_dout");
    sc_trace(mVcdFile, filtered_gradient_z_empty_n, "(port)filtered_gradient_z_empty_n");
    sc_trace(mVcdFile, filtered_gradient_z_read, "(port)filtered_gradient_z_read");
    sc_trace(mVcdFile, out_product_val_din, "(port)out_product_val_din");
    sc_trace(mVcdFile, out_product_val_full_n, "(port)out_product_val_full_n");
    sc_trace(mVcdFile, out_product_val_write, "(port)out_product_val_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, real_start, "real_start");
    sc_trace(mVcdFile, start_once_reg, "start_once_reg");
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, internal_ap_ready, "internal_ap_ready");
    sc_trace(mVcdFile, filtered_gradient_x_blk_n, "filtered_gradient_x_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_reg_149, "exitcond_flatten_reg_149");
    sc_trace(mVcdFile, filtered_gradient_y_blk_n, "filtered_gradient_y_blk_n");
    sc_trace(mVcdFile, filtered_gradient_z_blk_n, "filtered_gradient_z_blk_n");
    sc_trace(mVcdFile, out_product_val_blk_n, "out_product_val_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter5, "ap_enable_reg_pp0_iter5");
    sc_trace(mVcdFile, exitcond_flatten_reg_149_pp0_iter4_reg, "exitcond_flatten_reg_149_pp0_iter4_reg");
    sc_trace(mVcdFile, indvar_flatten_reg_67, "indvar_flatten_reg_67");
    sc_trace(mVcdFile, exitcond_flatten_fu_102_p2, "exitcond_flatten_fu_102_p2");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter0, "ap_block_state2_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter1, "ap_block_state3_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter2, "ap_block_state4_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter3, "ap_block_state5_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter4, "ap_block_state6_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter5, "ap_block_state7_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, exitcond_flatten_reg_149_pp0_iter1_reg, "exitcond_flatten_reg_149_pp0_iter1_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_149_pp0_iter2_reg, "exitcond_flatten_reg_149_pp0_iter2_reg");
    sc_trace(mVcdFile, exitcond_flatten_reg_149_pp0_iter3_reg, "exitcond_flatten_reg_149_pp0_iter3_reg");
    sc_trace(mVcdFile, indvar_flatten_next_fu_108_p2, "indvar_flatten_next_fu_108_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, grad_x_reg_158, "grad_x_reg_158");
    sc_trace(mVcdFile, grad_y_reg_166, "grad_y_reg_166");
    sc_trace(mVcdFile, grad_z_reg_174, "grad_z_reg_174");
    sc_trace(mVcdFile, grp_fu_78_p2, "grp_fu_78_p2");
    sc_trace(mVcdFile, tmp_7_reg_182, "tmp_7_reg_182");
    sc_trace(mVcdFile, grp_fu_82_p2, "grp_fu_82_p2");
    sc_trace(mVcdFile, tmp_8_reg_187, "tmp_8_reg_187");
    sc_trace(mVcdFile, grp_fu_86_p2, "grp_fu_86_p2");
    sc_trace(mVcdFile, tmp_9_reg_192, "tmp_9_reg_192");
    sc_trace(mVcdFile, grp_fu_90_p2, "grp_fu_90_p2");
    sc_trace(mVcdFile, tmp_10_reg_197, "tmp_10_reg_197");
    sc_trace(mVcdFile, grp_fu_94_p2, "grp_fu_94_p2");
    sc_trace(mVcdFile, tmp_11_reg_202, "tmp_11_reg_202");
    sc_trace(mVcdFile, grp_fu_98_p2, "grp_fu_98_p2");
    sc_trace(mVcdFile, tmp_12_reg_207, "tmp_12_reg_207");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state2, "ap_condition_pp0_exit_iter0_state2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter3, "ap_enable_reg_pp0_iter3");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter4, "ap_enable_reg_pp0_iter4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_s_fu_129_p1, "tmp_s_fu_129_p1");
    sc_trace(mVcdFile, tmp_73_fu_126_p1, "tmp_73_fu_126_p1");
    sc_trace(mVcdFile, tmp_72_fu_123_p1, "tmp_72_fu_123_p1");
    sc_trace(mVcdFile, tmp_71_fu_120_p1, "tmp_71_fu_120_p1");
    sc_trace(mVcdFile, tmp_70_fu_117_p1, "tmp_70_fu_117_p1");
    sc_trace(mVcdFile, tmp_69_fu_114_p1, "tmp_69_fu_114_p1");
    sc_trace(mVcdFile, grp_fu_78_ce, "grp_fu_78_ce");
    sc_trace(mVcdFile, grp_fu_82_ce, "grp_fu_82_ce");
    sc_trace(mVcdFile, grp_fu_86_ce, "grp_fu_86_ce");
    sc_trace(mVcdFile, grp_fu_90_ce, "grp_fu_90_ce");
    sc_trace(mVcdFile, grp_fu_94_ce, "grp_fu_94_ce");
    sc_trace(mVcdFile, grp_fu_98_ce, "grp_fu_98_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

a0_outer_product::~a0_outer_product() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete optical_flow_fmulibs_U154;
    delete optical_flow_fmulibs_U155;
    delete optical_flow_fmulibs_U156;
    delete optical_flow_fmulibs_U157;
    delete optical_flow_fmulibs_U158;
    delete optical_flow_fmulibs_U159;
}

void a0_outer_product::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((!(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state2.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state2.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter3 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter3 = ap_enable_reg_pp0_iter2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter4 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter4 = ap_enable_reg_pp0_iter3.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter5 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter5 = ap_enable_reg_pp0_iter4.read();
        } else if ((!(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                    esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
            ap_enable_reg_pp0_iter5 = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_102_p2.read()))) {
        indvar_flatten_reg_67 = indvar_flatten_next_fu_108_p2.read();
    } else if ((!(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        indvar_flatten_reg_67 = ap_const_lv19_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        start_once_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_0, internal_ap_ready.read()))) {
            start_once_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, internal_ap_ready.read())) {
            start_once_reg = ap_const_logic_0;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_149 = exitcond_flatten_fu_102_p2.read();
        exitcond_flatten_reg_149_pp0_iter1_reg = exitcond_flatten_reg_149.read();
    }
    if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
        exitcond_flatten_reg_149_pp0_iter2_reg = exitcond_flatten_reg_149_pp0_iter1_reg.read();
        exitcond_flatten_reg_149_pp0_iter3_reg = exitcond_flatten_reg_149_pp0_iter2_reg.read();
        exitcond_flatten_reg_149_pp0_iter4_reg = exitcond_flatten_reg_149_pp0_iter3_reg.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grad_x_reg_158 = filtered_gradient_x_dout.read();
        grad_y_reg_166 = filtered_gradient_y_dout.read();
        grad_z_reg_174 = filtered_gradient_z_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_149_pp0_iter3_reg.read()))) {
        tmp_10_reg_197 = grp_fu_90_p2.read();
        tmp_11_reg_202 = grp_fu_94_p2.read();
        tmp_12_reg_207 = grp_fu_98_p2.read();
        tmp_7_reg_182 = grp_fu_78_p2.read();
        tmp_8_reg_187 = grp_fu_82_p2.read();
        tmp_9_reg_192 = grp_fu_86_p2.read();
    }
}

void a0_outer_product::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[1];
}

void a0_outer_product::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void a0_outer_product::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[2];
}

void a0_outer_product::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_outer_product::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_x_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_y_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_z_empty_n.read())))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_149_pp0_iter4_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_product_val_full_n.read())));
}

void a0_outer_product::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_x_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_y_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_z_empty_n.read())))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_149_pp0_iter4_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_product_val_full_n.read())));
}

void a0_outer_product::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_x_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_y_empty_n.read())) || 
   (esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
    esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_z_empty_n.read())))) || (esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_149_pp0_iter4_reg.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, out_product_val_full_n.read())));
}

void a0_outer_product::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void a0_outer_product::thread_ap_block_state2_pp0_stage0_iter0() {
    ap_block_state2_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_outer_product::thread_ap_block_state3_pp0_stage0_iter1() {
    ap_block_state3_pp0_stage0_iter1 = ((esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_x_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_y_empty_n.read())) || (esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
  esl_seteq<1,1,1>(ap_const_logic_0, filtered_gradient_z_empty_n.read())));
}

void a0_outer_product::thread_ap_block_state4_pp0_stage0_iter2() {
    ap_block_state4_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_outer_product::thread_ap_block_state5_pp0_stage0_iter3() {
    ap_block_state5_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_outer_product::thread_ap_block_state6_pp0_stage0_iter4() {
    ap_block_state6_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void a0_outer_product::thread_ap_block_state7_pp0_stage0_iter5() {
    ap_block_state7_pp0_stage0_iter5 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_149_pp0_iter4_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_product_val_full_n.read()));
}

void a0_outer_product::thread_ap_condition_pp0_exit_iter0_state2() {
    if (esl_seteq<1,1,1>(exitcond_flatten_fu_102_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state2 = ap_const_logic_0;
    }
}

void a0_outer_product::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void a0_outer_product::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void a0_outer_product::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void a0_outer_product::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter3.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter4.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter5.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void a0_outer_product::thread_ap_ready() {
    ap_ready = internal_ap_ready.read();
}

void a0_outer_product::thread_exitcond_flatten_fu_102_p2() {
    exitcond_flatten_fu_102_p2 = (!indvar_flatten_reg_67.read().is_01() || !ap_const_lv19_6D000.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_67.read() == ap_const_lv19_6D000);
}

void a0_outer_product::thread_filtered_gradient_x_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0))) {
        filtered_gradient_x_blk_n = filtered_gradient_x_empty_n.read();
    } else {
        filtered_gradient_x_blk_n = ap_const_logic_1;
    }
}

void a0_outer_product::thread_filtered_gradient_x_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        filtered_gradient_x_read = ap_const_logic_1;
    } else {
        filtered_gradient_x_read = ap_const_logic_0;
    }
}

void a0_outer_product::thread_filtered_gradient_y_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0))) {
        filtered_gradient_y_blk_n = filtered_gradient_y_empty_n.read();
    } else {
        filtered_gradient_y_blk_n = ap_const_logic_1;
    }
}

void a0_outer_product::thread_filtered_gradient_y_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        filtered_gradient_y_read = ap_const_logic_1;
    } else {
        filtered_gradient_y_read = ap_const_logic_0;
    }
}

void a0_outer_product::thread_filtered_gradient_z_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0))) {
        filtered_gradient_z_blk_n = filtered_gradient_z_empty_n.read();
    } else {
        filtered_gradient_z_blk_n = ap_const_logic_1;
    }
}

void a0_outer_product::thread_filtered_gradient_z_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(exitcond_flatten_reg_149.read(), ap_const_lv1_0) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        filtered_gradient_z_read = ap_const_logic_1;
    } else {
        filtered_gradient_z_read = ap_const_logic_0;
    }
}

void a0_outer_product::thread_grp_fu_78_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_78_ce = ap_const_logic_1;
    } else {
        grp_fu_78_ce = ap_const_logic_0;
    }
}

void a0_outer_product::thread_grp_fu_82_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_82_ce = ap_const_logic_1;
    } else {
        grp_fu_82_ce = ap_const_logic_0;
    }
}

void a0_outer_product::thread_grp_fu_86_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_86_ce = ap_const_logic_1;
    } else {
        grp_fu_86_ce = ap_const_logic_0;
    }
}

void a0_outer_product::thread_grp_fu_90_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_90_ce = ap_const_logic_1;
    } else {
        grp_fu_90_ce = ap_const_logic_0;
    }
}

void a0_outer_product::thread_grp_fu_94_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_94_ce = ap_const_logic_1;
    } else {
        grp_fu_94_ce = ap_const_logic_0;
    }
}

void a0_outer_product::thread_grp_fu_98_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        grp_fu_98_ce = ap_const_logic_1;
    } else {
        grp_fu_98_ce = ap_const_logic_0;
    }
}

void a0_outer_product::thread_indvar_flatten_next_fu_108_p2() {
    indvar_flatten_next_fu_108_p2 = (!indvar_flatten_reg_67.read().is_01() || !ap_const_lv19_1.is_01())? sc_lv<19>(): (sc_biguint<19>(indvar_flatten_reg_67.read()) + sc_biguint<19>(ap_const_lv19_1));
}

void a0_outer_product::thread_internal_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        internal_ap_ready = ap_const_logic_1;
    } else {
        internal_ap_ready = ap_const_logic_0;
    }
}

void a0_outer_product::thread_out_product_val_blk_n() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_149_pp0_iter4_reg.read()))) {
        out_product_val_blk_n = out_product_val_full_n.read();
    } else {
        out_product_val_blk_n = ap_const_logic_1;
    }
}

void a0_outer_product::thread_out_product_val_din() {
    out_product_val_din = esl_concat<160,32>(esl_concat<128,32>(esl_concat<96,32>(esl_concat<64,32>(esl_concat<32,32>(tmp_s_fu_129_p1.read(), tmp_73_fu_126_p1.read()), tmp_72_fu_123_p1.read()), tmp_71_fu_120_p1.read()), tmp_70_fu_117_p1.read()), tmp_69_fu_114_p1.read());
}

void a0_outer_product::thread_out_product_val_write() {
    if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_149_pp0_iter4_reg.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        out_product_val_write = ap_const_logic_1;
    } else {
        out_product_val_write = ap_const_logic_0;
    }
}

void a0_outer_product::thread_real_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_full_n.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()))) {
        real_start = ap_const_logic_0;
    } else {
        real_start = ap_start.read();
    }
}

void a0_outer_product::thread_start_out() {
    start_out = real_start.read();
}

void a0_outer_product::thread_start_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, start_once_reg.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, real_start.read()))) {
        start_write = ap_const_logic_1;
    } else {
        start_write = ap_const_logic_0;
    }
}

void a0_outer_product::thread_tmp_69_fu_114_p1() {
    tmp_69_fu_114_p1 = tmp_7_reg_182.read();
}

void a0_outer_product::thread_tmp_70_fu_117_p1() {
    tmp_70_fu_117_p1 = tmp_8_reg_187.read();
}

void a0_outer_product::thread_tmp_71_fu_120_p1() {
    tmp_71_fu_120_p1 = tmp_9_reg_192.read();
}

void a0_outer_product::thread_tmp_72_fu_123_p1() {
    tmp_72_fu_123_p1 = tmp_10_reg_197.read();
}

void a0_outer_product::thread_tmp_73_fu_126_p1() {
    tmp_73_fu_126_p1 = tmp_11_reg_202.read();
}

void a0_outer_product::thread_tmp_s_fu_129_p1() {
    tmp_s_fu_129_p1 = tmp_12_reg_207.read();
}

void a0_outer_product::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((!(esl_seteq<1,1,1>(real_start.read(), ap_const_logic_0) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((!(esl_seteq<1,1,1>(exitcond_flatten_fu_102_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) && !(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_0) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter5.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter4.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) || (esl_seteq<1,1,1>(exitcond_flatten_fu_102_p2.read(), ap_const_lv1_1) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && 
  esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

}

