-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_flow_calc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outputs_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    outputs_full_n : IN STD_LOGIC;
    outputs_write : OUT STD_LOGIC;
    tensor_val_dout : IN STD_LOGIC_VECTOR (191 downto 0);
    tensor_val_empty_n : IN STD_LOGIC;
    tensor_val_read : OUT STD_LOGIC );
end;


architecture behav of a0_flow_calc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_1B2 : STD_LOGIC_VECTOR (8 downto 0) := "110110010";
    constant ap_const_lv19_6D000 : STD_LOGIC_VECTOR (18 downto 0) := "1101101000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal outputs_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_428 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tensor_val_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal or_cond3_reg_442 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_97 : STD_LOGIC_VECTOR (18 downto 0);
    signal r_reg_108 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_reg_119 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond_flatten_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_predicate_op51_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_428_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_428_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_230_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal r_mid2_fu_292_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_cond3_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_reg_442_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_4_fu_334_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_95_fu_340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_95_reg_451 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_83_reg_456 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_85_reg_461 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_reg_466 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_reg_471 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_82_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_394_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_406_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_164_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_reg_508 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_reg_513 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_56_reg_518 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_57_reg_523 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_reg_533 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal denom_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_reg_544 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_reg_554 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_phi_mux_buf_1_load_phi_fu_134_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter18_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter16_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter17_buf_1_load_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_tmp_64_phi_fu_145_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter18_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter2_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter3_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter4_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter5_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter6_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter7_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter8_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter9_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter10_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter11_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter12_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter13_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter14_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter15_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter16_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter17_tmp_64_reg_141 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_196_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond7_fu_236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_s_fu_250_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_93_fu_256_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp8_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid1_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_mid1_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_mid2_fu_242_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_94_fu_300_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp9_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp1_mid2_fu_284_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_1_load_toint_fu_415_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_162_toint_fu_411_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_152_ce : STD_LOGIC;
    signal grp_fu_156_ce : STD_LOGIC;
    signal grp_fu_160_ce : STD_LOGIC;
    signal grp_fu_164_ce : STD_LOGIC;
    signal grp_fu_168_ce : STD_LOGIC;
    signal grp_fu_172_ce : STD_LOGIC;
    signal grp_fu_176_ce : STD_LOGIC;
    signal grp_fu_180_ce : STD_LOGIC;
    signal grp_fu_184_ce : STD_LOGIC;
    signal grp_fu_188_ce : STD_LOGIC;
    signal grp_fu_192_ce : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_127 : BOOLEAN;

    component a0_optical_flow_fsubDeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_optical_flow_fmulibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_optical_flow_fdivbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    optical_flow_fsubDeQ_U241 : component a0_optical_flow_fsubDeQ
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_54_reg_508,
        din1 => tmp_55_reg_513,
        ce => grp_fu_152_ce,
        dout => grp_fu_152_p2);

    optical_flow_fsubDeQ_U242 : component a0_optical_flow_fsubDeQ
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_56_reg_518,
        din1 => tmp_57_reg_523,
        ce => grp_fu_156_ce,
        dout => grp_fu_156_p2);

    optical_flow_fsubDeQ_U243 : component a0_optical_flow_fsubDeQ
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_60_reg_528,
        din1 => tmp_61_reg_533,
        ce => grp_fu_160_ce,
        dout => grp_fu_160_p2);

    optical_flow_fmulibs_U244 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_82_fu_384_p1,
        din1 => tmp_84_fu_389_p1,
        ce => grp_fu_164_ce,
        dout => grp_fu_164_p2);

    optical_flow_fmulibs_U245 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_86_fu_394_p1,
        din1 => tmp_86_fu_394_p1,
        ce => grp_fu_168_ce,
        dout => grp_fu_168_p2);

    optical_flow_fmulibs_U246 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_88_fu_401_p1,
        din1 => tmp_86_fu_394_p1,
        ce => grp_fu_172_ce,
        dout => grp_fu_172_p2);

    optical_flow_fmulibs_U247 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_90_fu_406_p1,
        din1 => tmp_84_fu_389_p1,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);

    optical_flow_fmulibs_U248 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_90_fu_406_p1,
        din1 => tmp_86_fu_394_p1,
        ce => grp_fu_180_ce,
        dout => grp_fu_180_p2);

    optical_flow_fmulibs_U249 : component a0_optical_flow_fmulibs
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_88_fu_401_p1,
        din1 => tmp_82_fu_384_p1,
        ce => grp_fu_184_ce,
        dout => grp_fu_184_p2);

    optical_flow_fdivbkb_U250 : component a0_optical_flow_fdivbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_58_reg_544,
        din1 => denom_reg_538,
        ce => grp_fu_188_ce,
        dout => grp_fu_188_p2);

    optical_flow_fdivbkb_U251 : component a0_optical_flow_fdivbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_62_reg_549,
        din1 => denom_reg_538,
        ce => grp_fu_192_ce,
        dout => grp_fu_192_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_buf_1_load_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_127)) then
                if (((exitcond_flatten_fu_224_p2 = ap_const_lv1_0) and (or_cond3_fu_328_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_buf_1_load_reg_130 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter0_buf_1_load_reg_130;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_tmp_64_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_127)) then
                if (((exitcond_flatten_fu_224_p2 = ap_const_lv1_0) and (or_cond3_fu_328_p2 = ap_const_lv1_0))) then 
                    ap_phi_reg_pp0_iter1_tmp_64_reg_141 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_tmp_64_reg_141 <= ap_phi_reg_pp0_iter0_tmp_64_reg_141;
                end if;
            end if; 
        end if;
    end process;

    c_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_reg_119 <= c_4_fu_334_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_reg_119 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_97 <= indvar_flatten_next_fu_230_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_97 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    r_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                r_reg_108 <= r_mid2_fu_292_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_reg_108 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter9_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter10_tmp_64_reg_141 <= ap_phi_reg_pp0_iter9_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter10_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter11_tmp_64_reg_141 <= ap_phi_reg_pp0_iter10_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter11_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter12_tmp_64_reg_141 <= ap_phi_reg_pp0_iter11_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter12_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter13_tmp_64_reg_141 <= ap_phi_reg_pp0_iter12_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter13_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter14_tmp_64_reg_141 <= ap_phi_reg_pp0_iter13_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter14_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter15_tmp_64_reg_141 <= ap_phi_reg_pp0_iter14_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter15_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter16_tmp_64_reg_141 <= ap_phi_reg_pp0_iter15_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter16_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter17_tmp_64_reg_141 <= ap_phi_reg_pp0_iter16_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter17_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter18_tmp_64_reg_141 <= ap_phi_reg_pp0_iter17_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter1_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter2_tmp_64_reg_141 <= ap_phi_reg_pp0_iter1_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter3_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter2_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter3_tmp_64_reg_141 <= ap_phi_reg_pp0_iter2_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter3_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter4_tmp_64_reg_141 <= ap_phi_reg_pp0_iter3_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter4_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter5_tmp_64_reg_141 <= ap_phi_reg_pp0_iter4_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter5_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter6_tmp_64_reg_141 <= ap_phi_reg_pp0_iter5_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter6_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter7_tmp_64_reg_141 <= ap_phi_reg_pp0_iter6_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter7_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter8_tmp_64_reg_141 <= ap_phi_reg_pp0_iter7_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_buf_1_load_reg_130 <= ap_phi_reg_pp0_iter8_buf_1_load_reg_130;
                ap_phi_reg_pp0_iter9_tmp_64_reg_141 <= ap_phi_reg_pp0_iter8_tmp_64_reg_141;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond3_reg_442_pp0_iter7_reg = ap_const_lv1_1) and (exitcond_flatten_reg_428_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                denom_reg_538 <= grp_fu_152_p2;
                tmp_58_reg_544 <= grp_fu_156_p2;
                tmp_62_reg_549 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_428 <= exitcond_flatten_fu_224_p2;
                exitcond_flatten_reg_428_pp0_iter1_reg <= exitcond_flatten_reg_428;
                or_cond3_reg_442_pp0_iter1_reg <= or_cond3_reg_442;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_428_pp0_iter10_reg <= exitcond_flatten_reg_428_pp0_iter9_reg;
                exitcond_flatten_reg_428_pp0_iter11_reg <= exitcond_flatten_reg_428_pp0_iter10_reg;
                exitcond_flatten_reg_428_pp0_iter12_reg <= exitcond_flatten_reg_428_pp0_iter11_reg;
                exitcond_flatten_reg_428_pp0_iter13_reg <= exitcond_flatten_reg_428_pp0_iter12_reg;
                exitcond_flatten_reg_428_pp0_iter14_reg <= exitcond_flatten_reg_428_pp0_iter13_reg;
                exitcond_flatten_reg_428_pp0_iter15_reg <= exitcond_flatten_reg_428_pp0_iter14_reg;
                exitcond_flatten_reg_428_pp0_iter16_reg <= exitcond_flatten_reg_428_pp0_iter15_reg;
                exitcond_flatten_reg_428_pp0_iter17_reg <= exitcond_flatten_reg_428_pp0_iter16_reg;
                exitcond_flatten_reg_428_pp0_iter2_reg <= exitcond_flatten_reg_428_pp0_iter1_reg;
                exitcond_flatten_reg_428_pp0_iter3_reg <= exitcond_flatten_reg_428_pp0_iter2_reg;
                exitcond_flatten_reg_428_pp0_iter4_reg <= exitcond_flatten_reg_428_pp0_iter3_reg;
                exitcond_flatten_reg_428_pp0_iter5_reg <= exitcond_flatten_reg_428_pp0_iter4_reg;
                exitcond_flatten_reg_428_pp0_iter6_reg <= exitcond_flatten_reg_428_pp0_iter5_reg;
                exitcond_flatten_reg_428_pp0_iter7_reg <= exitcond_flatten_reg_428_pp0_iter6_reg;
                exitcond_flatten_reg_428_pp0_iter8_reg <= exitcond_flatten_reg_428_pp0_iter7_reg;
                exitcond_flatten_reg_428_pp0_iter9_reg <= exitcond_flatten_reg_428_pp0_iter8_reg;
                or_cond3_reg_442_pp0_iter10_reg <= or_cond3_reg_442_pp0_iter9_reg;
                or_cond3_reg_442_pp0_iter11_reg <= or_cond3_reg_442_pp0_iter10_reg;
                or_cond3_reg_442_pp0_iter12_reg <= or_cond3_reg_442_pp0_iter11_reg;
                or_cond3_reg_442_pp0_iter13_reg <= or_cond3_reg_442_pp0_iter12_reg;
                or_cond3_reg_442_pp0_iter14_reg <= or_cond3_reg_442_pp0_iter13_reg;
                or_cond3_reg_442_pp0_iter15_reg <= or_cond3_reg_442_pp0_iter14_reg;
                or_cond3_reg_442_pp0_iter16_reg <= or_cond3_reg_442_pp0_iter15_reg;
                or_cond3_reg_442_pp0_iter17_reg <= or_cond3_reg_442_pp0_iter16_reg;
                or_cond3_reg_442_pp0_iter2_reg <= or_cond3_reg_442_pp0_iter1_reg;
                or_cond3_reg_442_pp0_iter3_reg <= or_cond3_reg_442_pp0_iter2_reg;
                or_cond3_reg_442_pp0_iter4_reg <= or_cond3_reg_442_pp0_iter3_reg;
                or_cond3_reg_442_pp0_iter5_reg <= or_cond3_reg_442_pp0_iter4_reg;
                or_cond3_reg_442_pp0_iter6_reg <= or_cond3_reg_442_pp0_iter5_reg;
                or_cond3_reg_442_pp0_iter7_reg <= or_cond3_reg_442_pp0_iter6_reg;
                or_cond3_reg_442_pp0_iter8_reg <= or_cond3_reg_442_pp0_iter7_reg;
                or_cond3_reg_442_pp0_iter9_reg <= or_cond3_reg_442_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_224_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                or_cond3_reg_442 <= or_cond3_fu_328_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond3_reg_442_pp0_iter3_reg = ap_const_lv1_1) and (exitcond_flatten_reg_428_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_54_reg_508 <= grp_fu_164_p2;
                tmp_55_reg_513 <= grp_fu_168_p2;
                tmp_56_reg_518 <= grp_fu_172_p2;
                tmp_57_reg_523 <= grp_fu_176_p2;
                tmp_60_reg_528 <= grp_fu_180_p2;
                tmp_61_reg_533 <= grp_fu_184_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((or_cond3_reg_442_pp0_iter16_reg = ap_const_lv1_1) and (exitcond_flatten_reg_428_pp0_iter16_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_59_reg_554 <= grp_fu_188_p2;
                tmp_63_reg_559 <= grp_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_predicate_op51_read_state3 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_83_reg_456 <= tensor_val_dout(63 downto 32);
                tmp_85_reg_461 <= tensor_val_dout(127 downto 96);
                tmp_87_reg_466 <= tensor_val_dout(191 downto 160);
                tmp_89_reg_471 <= tensor_val_dout(159 downto 128);
                tmp_95_reg_451 <= tmp_95_fu_340_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter1, exitcond_flatten_fu_224_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter17)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_224_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)) or ((exitcond_flatten_fu_224_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state21 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(outputs_full_n, tensor_val_empty_n, ap_enable_reg_pp0_iter18, exitcond_flatten_reg_428_pp0_iter17_reg, ap_enable_reg_pp0_iter1, ap_predicate_op51_read_state3)
    begin
                ap_block_pp0_stage0_01001 <= (((tensor_val_empty_n = ap_const_logic_0) and (ap_predicate_op51_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_reg_428_pp0_iter17_reg = ap_const_lv1_0) and (outputs_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(outputs_full_n, tensor_val_empty_n, ap_enable_reg_pp0_iter18, exitcond_flatten_reg_428_pp0_iter17_reg, ap_enable_reg_pp0_iter1, ap_predicate_op51_read_state3)
    begin
                ap_block_pp0_stage0_11001 <= (((tensor_val_empty_n = ap_const_logic_0) and (ap_predicate_op51_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_reg_428_pp0_iter17_reg = ap_const_lv1_0) and (outputs_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(outputs_full_n, tensor_val_empty_n, ap_enable_reg_pp0_iter18, exitcond_flatten_reg_428_pp0_iter17_reg, ap_enable_reg_pp0_iter1, ap_predicate_op51_read_state3)
    begin
                ap_block_pp0_stage0_subdone <= (((tensor_val_empty_n = ap_const_logic_0) and (ap_predicate_op51_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_reg_428_pp0_iter17_reg = ap_const_lv1_0) and (outputs_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state20_pp0_stage0_iter18_assign_proc : process(outputs_full_n, exitcond_flatten_reg_428_pp0_iter17_reg)
    begin
                ap_block_state20_pp0_stage0_iter18 <= ((exitcond_flatten_reg_428_pp0_iter17_reg = ap_const_lv1_0) and (outputs_full_n = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(tensor_val_empty_n, ap_predicate_op51_read_state3)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((tensor_val_empty_n = ap_const_logic_0) and (ap_predicate_op51_read_state3 = ap_const_boolean_1));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_127_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_127 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_224_p2)
    begin
        if ((exitcond_flatten_fu_224_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_buf_1_load_phi_fu_134_p4_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0, exitcond_flatten_reg_428_pp0_iter17_reg, or_cond3_reg_442_pp0_iter17_reg, tmp_63_reg_559, ap_phi_reg_pp0_iter18_buf_1_load_reg_130)
    begin
        if (((or_cond3_reg_442_pp0_iter17_reg = ap_const_lv1_1) and (exitcond_flatten_reg_428_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            ap_phi_mux_buf_1_load_phi_fu_134_p4 <= tmp_63_reg_559;
        else 
            ap_phi_mux_buf_1_load_phi_fu_134_p4 <= ap_phi_reg_pp0_iter18_buf_1_load_reg_130;
        end if; 
    end process;


    ap_phi_mux_tmp_64_phi_fu_145_p4_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0, exitcond_flatten_reg_428_pp0_iter17_reg, or_cond3_reg_442_pp0_iter17_reg, tmp_59_reg_554, ap_phi_reg_pp0_iter18_tmp_64_reg_141)
    begin
        if (((or_cond3_reg_442_pp0_iter17_reg = ap_const_lv1_1) and (exitcond_flatten_reg_428_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            ap_phi_mux_tmp_64_phi_fu_145_p4 <= tmp_59_reg_554;
        else 
            ap_phi_mux_tmp_64_phi_fu_145_p4 <= ap_phi_reg_pp0_iter18_tmp_64_reg_141;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_buf_1_load_reg_130 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_tmp_64_reg_141 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op51_read_state3_assign_proc : process(exitcond_flatten_reg_428, or_cond3_reg_442)
    begin
                ap_predicate_op51_read_state3 <= ((or_cond3_reg_442 = ap_const_lv1_1) and (exitcond_flatten_reg_428 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    buf_1_load_toint_fu_415_p1 <= ap_phi_mux_buf_1_load_phi_fu_134_p4;
    c_4_fu_334_p2 <= std_logic_vector(unsigned(c_mid2_fu_242_p3) + unsigned(ap_const_lv11_1));
    c_mid2_fu_242_p3 <= 
        ap_const_lv11_0 when (exitcond7_fu_236_p2(0) = '1') else 
        c_reg_119;
    exitcond7_fu_236_p2 <= "1" when (c_reg_119 = ap_const_lv11_400) else "0";
    exitcond_flatten_fu_224_p2 <= "1" when (indvar_flatten_reg_97 = ap_const_lv19_6D000) else "0";

    grp_fu_152_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_152_ce <= ap_const_logic_1;
        else 
            grp_fu_152_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_156_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_156_ce <= ap_const_logic_1;
        else 
            grp_fu_156_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_160_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_160_ce <= ap_const_logic_1;
        else 
            grp_fu_160_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_164_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_164_ce <= ap_const_logic_1;
        else 
            grp_fu_164_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_168_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_168_ce <= ap_const_logic_1;
        else 
            grp_fu_168_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_172_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_172_ce <= ap_const_logic_1;
        else 
            grp_fu_172_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_176_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_180_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_180_ce <= ap_const_logic_1;
        else 
            grp_fu_180_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_184_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_184_ce <= ap_const_logic_1;
        else 
            grp_fu_184_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_188_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_188_ce <= ap_const_logic_1;
        else 
            grp_fu_188_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_192_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_192_ce <= ap_const_logic_1;
        else 
            grp_fu_192_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp8_fu_266_p2 <= "0" when (tmp_93_fu_256_p4 = ap_const_lv8_0) else "1";
    icmp9_fu_310_p2 <= "0" when (tmp_94_fu_300_p4 = ap_const_lv10_0) else "1";
    icmp_fu_206_p2 <= "0" when (tmp_fu_196_p4 = ap_const_lv8_0) else "1";
    indvar_flatten_next_fu_230_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_97) + unsigned(ap_const_lv19_1));
    or_cond3_fu_328_p2 <= (tmp2_fu_322_p2 and tmp1_mid2_fu_284_p3);

    outputs_blk_n_assign_proc : process(outputs_full_n, ap_enable_reg_pp0_iter18, ap_block_pp0_stage0, exitcond_flatten_reg_428_pp0_iter17_reg)
    begin
        if (((exitcond_flatten_reg_428_pp0_iter17_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1))) then 
            outputs_blk_n <= outputs_full_n;
        else 
            outputs_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    outputs_din <= (buf_1_load_toint_fu_415_p1 & tmp_162_toint_fu_411_p1);

    outputs_write_assign_proc : process(ap_enable_reg_pp0_iter18, exitcond_flatten_reg_428_pp0_iter17_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_428_pp0_iter17_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outputs_write <= ap_const_logic_1;
        else 
            outputs_write <= ap_const_logic_0;
        end if; 
    end process;

    r_mid2_fu_292_p3 <= 
        r_s_fu_250_p2 when (exitcond7_fu_236_p2(0) = '1') else 
        r_reg_108;
    r_s_fu_250_p2 <= std_logic_vector(unsigned(r_reg_108) + unsigned(ap_const_lv9_1));

    tensor_val_blk_n_assign_proc : process(tensor_val_empty_n, ap_block_pp0_stage0, exitcond_flatten_reg_428, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, or_cond3_reg_442)
    begin
        if (((or_cond3_reg_442 = ap_const_lv1_1) and (exitcond_flatten_reg_428 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            tensor_val_blk_n <= tensor_val_empty_n;
        else 
            tensor_val_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tensor_val_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_predicate_op51_read_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_predicate_op51_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            tensor_val_read <= ap_const_logic_1;
        else 
            tensor_val_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_fu_218_p2 <= (tmp_s_fu_212_p2 and icmp_fu_206_p2);
    tmp1_mid1_fu_278_p2 <= (tmp_mid1_fu_272_p2 and icmp8_fu_266_p2);
    tmp1_mid2_fu_284_p3 <= 
        tmp1_mid1_fu_278_p2 when (exitcond7_fu_236_p2(0) = '1') else 
        tmp1_fu_218_p2;
    tmp2_fu_322_p2 <= (tmp_52_fu_316_p2 and icmp9_fu_310_p2);
    tmp_162_toint_fu_411_p1 <= ap_phi_mux_tmp_64_phi_fu_145_p4;
    tmp_52_fu_316_p2 <= "1" when (unsigned(c_mid2_fu_242_p3) < unsigned(ap_const_lv11_3FE)) else "0";
    tmp_82_fu_384_p1 <= tmp_95_reg_451;
    tmp_84_fu_389_p1 <= tmp_83_reg_456;
    tmp_86_fu_394_p1 <= tmp_85_reg_461;
    tmp_88_fu_401_p1 <= tmp_87_reg_466;
    tmp_90_fu_406_p1 <= tmp_89_reg_471;
    tmp_93_fu_256_p4 <= r_s_fu_250_p2(8 downto 1);
    tmp_94_fu_300_p4 <= c_mid2_fu_242_p3(10 downto 1);
    tmp_95_fu_340_p1 <= tensor_val_dout(32 - 1 downto 0);
    tmp_fu_196_p4 <= r_reg_108(8 downto 1);
    tmp_mid1_fu_272_p2 <= "1" when (unsigned(r_s_fu_250_p2) < unsigned(ap_const_lv9_1B2)) else "0";
    tmp_s_fu_212_p2 <= "1" when (unsigned(r_reg_108) < unsigned(ap_const_lv9_1B2)) else "0";
end behav;
