-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_optical_flow is
port (
    frames_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    frames_V_empty_n : IN STD_LOGIC;
    frames_V_read : OUT STD_LOGIC;
    outputs_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    outputs_full_n : IN STD_LOGIC;
    outputs_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of a0_optical_flow is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "a0_optical_flow,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.001000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.057000,HLS_SYN_LAT=449694,HLS_SYN_TPT=449571,HLS_SYN_MEM=74,HLS_SYN_DSP=484,HLS_SYN_FF=62231,HLS_SYN_LUT=51016,HLS_VERSION=2018_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal ap_rst_n_inv : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_start : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_start_full_n : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_done : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_continue : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_idle : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_ap_ready : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_start_out : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_start_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frames_V_read : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame1_a_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame1_a_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame2_a_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame2_a_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame3_a_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame3_a_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame3_b_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame3_b_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame4_a_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame4_a_write : STD_LOGIC;
    signal Loop_FRAMES_CP_OUTER_U0_frame5_a_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_FRAMES_CP_OUTER_U0_frame5_a_write : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_start : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_done : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_continue : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_idle : STD_LOGIC;
    signal gradient_xy_calc_U0_ap_ready : STD_LOGIC;
    signal gradient_xy_calc_U0_start_out : STD_LOGIC;
    signal gradient_xy_calc_U0_start_write : STD_LOGIC;
    signal gradient_xy_calc_U0_frame3_a_read : STD_LOGIC;
    signal gradient_xy_calc_U0_gradient_x_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_xy_calc_U0_gradient_x_write : STD_LOGIC;
    signal gradient_xy_calc_U0_gradient_y_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_xy_calc_U0_gradient_y_write : STD_LOGIC;
    signal gradient_z_calc_U0_ap_start : STD_LOGIC;
    signal gradient_z_calc_U0_ap_done : STD_LOGIC;
    signal gradient_z_calc_U0_ap_continue : STD_LOGIC;
    signal gradient_z_calc_U0_ap_idle : STD_LOGIC;
    signal gradient_z_calc_U0_ap_ready : STD_LOGIC;
    signal gradient_z_calc_U0_frame1_a_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame2_a_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame3_b_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame4_a_read : STD_LOGIC;
    signal gradient_z_calc_U0_frame5_a_read : STD_LOGIC;
    signal gradient_z_calc_U0_gradient_z_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_z_calc_U0_gradient_z_write : STD_LOGIC;
    signal gradient_weight_y_U0_ap_start : STD_LOGIC;
    signal gradient_weight_y_U0_ap_done : STD_LOGIC;
    signal gradient_weight_y_U0_ap_continue : STD_LOGIC;
    signal gradient_weight_y_U0_ap_idle : STD_LOGIC;
    signal gradient_weight_y_U0_ap_ready : STD_LOGIC;
    signal gradient_weight_y_U0_start_out : STD_LOGIC;
    signal gradient_weight_y_U0_start_write : STD_LOGIC;
    signal gradient_weight_y_U0_gradient_x_read : STD_LOGIC;
    signal gradient_weight_y_U0_gradient_y_read : STD_LOGIC;
    signal gradient_weight_y_U0_gradient_z_read : STD_LOGIC;
    signal gradient_weight_y_U0_y_filtered_x_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_y_U0_y_filtered_x_write : STD_LOGIC;
    signal gradient_weight_y_U0_y_filtered_y_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_y_U0_y_filtered_y_write : STD_LOGIC;
    signal gradient_weight_y_U0_y_filtered_z_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_y_U0_y_filtered_z_write : STD_LOGIC;
    signal gradient_weight_x_U0_ap_start : STD_LOGIC;
    signal gradient_weight_x_U0_ap_done : STD_LOGIC;
    signal gradient_weight_x_U0_ap_continue : STD_LOGIC;
    signal gradient_weight_x_U0_ap_idle : STD_LOGIC;
    signal gradient_weight_x_U0_ap_ready : STD_LOGIC;
    signal gradient_weight_x_U0_start_out : STD_LOGIC;
    signal gradient_weight_x_U0_start_write : STD_LOGIC;
    signal gradient_weight_x_U0_y_filtered_x_read : STD_LOGIC;
    signal gradient_weight_x_U0_y_filtered_y_read : STD_LOGIC;
    signal gradient_weight_x_U0_y_filtered_z_read : STD_LOGIC;
    signal gradient_weight_x_U0_filtered_gradient_x_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_x_U0_filtered_gradient_x_write : STD_LOGIC;
    signal gradient_weight_x_U0_filtered_gradient_y_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_x_U0_filtered_gradient_y_write : STD_LOGIC;
    signal gradient_weight_x_U0_filtered_gradient_z_din : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_weight_x_U0_filtered_gradient_z_write : STD_LOGIC;
    signal outer_product_U0_ap_start : STD_LOGIC;
    signal outer_product_U0_ap_done : STD_LOGIC;
    signal outer_product_U0_ap_continue : STD_LOGIC;
    signal outer_product_U0_ap_idle : STD_LOGIC;
    signal outer_product_U0_ap_ready : STD_LOGIC;
    signal outer_product_U0_start_out : STD_LOGIC;
    signal outer_product_U0_start_write : STD_LOGIC;
    signal outer_product_U0_filtered_gradient_x_read : STD_LOGIC;
    signal outer_product_U0_filtered_gradient_y_read : STD_LOGIC;
    signal outer_product_U0_filtered_gradient_z_read : STD_LOGIC;
    signal outer_product_U0_out_product_val_din : STD_LOGIC_VECTOR (191 downto 0);
    signal outer_product_U0_out_product_val_write : STD_LOGIC;
    signal tensor_weight_y_U0_ap_start : STD_LOGIC;
    signal tensor_weight_y_U0_ap_done : STD_LOGIC;
    signal tensor_weight_y_U0_ap_continue : STD_LOGIC;
    signal tensor_weight_y_U0_ap_idle : STD_LOGIC;
    signal tensor_weight_y_U0_ap_ready : STD_LOGIC;
    signal tensor_weight_y_U0_start_out : STD_LOGIC;
    signal tensor_weight_y_U0_start_write : STD_LOGIC;
    signal tensor_weight_y_U0_out_product_val_read : STD_LOGIC;
    signal tensor_weight_y_U0_tensor_y_val_din : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_weight_y_U0_tensor_y_val_write : STD_LOGIC;
    signal tensor_weight_x_U0_ap_start : STD_LOGIC;
    signal tensor_weight_x_U0_ap_done : STD_LOGIC;
    signal tensor_weight_x_U0_ap_continue : STD_LOGIC;
    signal tensor_weight_x_U0_ap_idle : STD_LOGIC;
    signal tensor_weight_x_U0_ap_ready : STD_LOGIC;
    signal tensor_weight_x_U0_start_out : STD_LOGIC;
    signal tensor_weight_x_U0_start_write : STD_LOGIC;
    signal tensor_weight_x_U0_tensor_y_val_read : STD_LOGIC;
    signal tensor_weight_x_U0_tensor_val_din : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_weight_x_U0_tensor_val_write : STD_LOGIC;
    signal flow_calc_U0_ap_start : STD_LOGIC;
    signal flow_calc_U0_ap_done : STD_LOGIC;
    signal flow_calc_U0_ap_continue : STD_LOGIC;
    signal flow_calc_U0_ap_idle : STD_LOGIC;
    signal flow_calc_U0_ap_ready : STD_LOGIC;
    signal flow_calc_U0_outputs_din : STD_LOGIC_VECTOR (63 downto 0);
    signal flow_calc_U0_outputs_write : STD_LOGIC;
    signal flow_calc_U0_tensor_val_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal frame1_a_full_n : STD_LOGIC;
    signal frame1_a_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal frame1_a_empty_n : STD_LOGIC;
    signal frame2_a_full_n : STD_LOGIC;
    signal frame2_a_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal frame2_a_empty_n : STD_LOGIC;
    signal frame3_a_full_n : STD_LOGIC;
    signal frame3_a_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal frame3_a_empty_n : STD_LOGIC;
    signal frame3_b_full_n : STD_LOGIC;
    signal frame3_b_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal frame3_b_empty_n : STD_LOGIC;
    signal frame4_a_full_n : STD_LOGIC;
    signal frame4_a_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal frame4_a_empty_n : STD_LOGIC;
    signal frame5_a_full_n : STD_LOGIC;
    signal frame5_a_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal frame5_a_empty_n : STD_LOGIC;
    signal gradient_x_full_n : STD_LOGIC;
    signal gradient_x_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_x_empty_n : STD_LOGIC;
    signal gradient_y_full_n : STD_LOGIC;
    signal gradient_y_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_y_empty_n : STD_LOGIC;
    signal gradient_z_full_n : STD_LOGIC;
    signal gradient_z_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal gradient_z_empty_n : STD_LOGIC;
    signal y_filtered_x_full_n : STD_LOGIC;
    signal y_filtered_x_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_x_empty_n : STD_LOGIC;
    signal y_filtered_y_full_n : STD_LOGIC;
    signal y_filtered_y_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_y_empty_n : STD_LOGIC;
    signal y_filtered_z_full_n : STD_LOGIC;
    signal y_filtered_z_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal y_filtered_z_empty_n : STD_LOGIC;
    signal filtered_gradient_x_full_n : STD_LOGIC;
    signal filtered_gradient_x_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_x_empty_n : STD_LOGIC;
    signal filtered_gradient_y_full_n : STD_LOGIC;
    signal filtered_gradient_y_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_y_empty_n : STD_LOGIC;
    signal filtered_gradient_z_full_n : STD_LOGIC;
    signal filtered_gradient_z_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal filtered_gradient_z_empty_n : STD_LOGIC;
    signal out_product_val_full_n : STD_LOGIC;
    signal out_product_val_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal out_product_val_empty_n : STD_LOGIC;
    signal tensor_y_val_full_n : STD_LOGIC;
    signal tensor_y_val_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_y_val_empty_n : STD_LOGIC;
    signal tensor_val_full_n : STD_LOGIC;
    signal tensor_val_dout : STD_LOGIC_VECTOR (191 downto 0);
    signal tensor_val_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal start_for_gradient_xy_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_xy_calc_U0_full_n : STD_LOGIC;
    signal start_for_gradient_xy_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_xy_calc_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_z_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_z_calc_U0_full_n : STD_LOGIC;
    signal start_for_gradient_z_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_z_calc_U0_empty_n : STD_LOGIC;
    signal start_for_gradient_weight_y_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_y_U0_full_n : STD_LOGIC;
    signal start_for_gradient_weight_y_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_y_U0_empty_n : STD_LOGIC;
    signal gradient_z_calc_U0_start_full_n : STD_LOGIC;
    signal gradient_z_calc_U0_start_write : STD_LOGIC;
    signal start_for_gradient_weight_x_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_x_U0_full_n : STD_LOGIC;
    signal start_for_gradient_weight_x_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_gradient_weight_x_U0_empty_n : STD_LOGIC;
    signal start_for_outer_product_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_outer_product_U0_full_n : STD_LOGIC;
    signal start_for_outer_product_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_outer_product_U0_empty_n : STD_LOGIC;
    signal start_for_tensor_weight_y_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_y_U0_full_n : STD_LOGIC;
    signal start_for_tensor_weight_y_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_y_U0_empty_n : STD_LOGIC;
    signal start_for_tensor_weight_x_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_x_U0_full_n : STD_LOGIC;
    signal start_for_tensor_weight_x_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_tensor_weight_x_U0_empty_n : STD_LOGIC;
    signal start_for_flow_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_flow_calc_U0_full_n : STD_LOGIC;
    signal start_for_flow_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_flow_calc_U0_empty_n : STD_LOGIC;
    signal flow_calc_U0_start_full_n : STD_LOGIC;
    signal flow_calc_U0_start_write : STD_LOGIC;

    component a0_Loop_FRAMES_CP_OUTER IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        frames_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        frames_V_empty_n : IN STD_LOGIC;
        frames_V_read : OUT STD_LOGIC;
        frame1_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame1_a_full_n : IN STD_LOGIC;
        frame1_a_write : OUT STD_LOGIC;
        frame2_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame2_a_full_n : IN STD_LOGIC;
        frame2_a_write : OUT STD_LOGIC;
        frame3_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame3_a_full_n : IN STD_LOGIC;
        frame3_a_write : OUT STD_LOGIC;
        frame3_b_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame3_b_full_n : IN STD_LOGIC;
        frame3_b_write : OUT STD_LOGIC;
        frame4_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame4_a_full_n : IN STD_LOGIC;
        frame4_a_write : OUT STD_LOGIC;
        frame5_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        frame5_a_full_n : IN STD_LOGIC;
        frame5_a_write : OUT STD_LOGIC );
    end component;


    component a0_gradient_xy_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        frame3_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        frame3_a_empty_n : IN STD_LOGIC;
        frame3_a_read : OUT STD_LOGIC;
        gradient_x_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_x_full_n : IN STD_LOGIC;
        gradient_x_write : OUT STD_LOGIC;
        gradient_y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_y_full_n : IN STD_LOGIC;
        gradient_y_write : OUT STD_LOGIC );
    end component;


    component a0_gradient_z_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        frame1_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        frame1_a_empty_n : IN STD_LOGIC;
        frame1_a_read : OUT STD_LOGIC;
        frame2_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        frame2_a_empty_n : IN STD_LOGIC;
        frame2_a_read : OUT STD_LOGIC;
        frame3_b_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        frame3_b_empty_n : IN STD_LOGIC;
        frame3_b_read : OUT STD_LOGIC;
        frame4_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        frame4_a_empty_n : IN STD_LOGIC;
        frame4_a_read : OUT STD_LOGIC;
        frame5_a_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        frame5_a_empty_n : IN STD_LOGIC;
        frame5_a_read : OUT STD_LOGIC;
        gradient_z_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        gradient_z_full_n : IN STD_LOGIC;
        gradient_z_write : OUT STD_LOGIC );
    end component;


    component a0_gradient_weight_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        gradient_x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_x_empty_n : IN STD_LOGIC;
        gradient_x_read : OUT STD_LOGIC;
        gradient_y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_y_empty_n : IN STD_LOGIC;
        gradient_y_read : OUT STD_LOGIC;
        gradient_z_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        gradient_z_empty_n : IN STD_LOGIC;
        gradient_z_read : OUT STD_LOGIC;
        y_filtered_x_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_x_full_n : IN STD_LOGIC;
        y_filtered_x_write : OUT STD_LOGIC;
        y_filtered_y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_y_full_n : IN STD_LOGIC;
        y_filtered_y_write : OUT STD_LOGIC;
        y_filtered_z_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_z_full_n : IN STD_LOGIC;
        y_filtered_z_write : OUT STD_LOGIC );
    end component;


    component a0_gradient_weight_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        y_filtered_x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_x_empty_n : IN STD_LOGIC;
        y_filtered_x_read : OUT STD_LOGIC;
        y_filtered_y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_y_empty_n : IN STD_LOGIC;
        y_filtered_y_read : OUT STD_LOGIC;
        y_filtered_z_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        y_filtered_z_empty_n : IN STD_LOGIC;
        y_filtered_z_read : OUT STD_LOGIC;
        filtered_gradient_x_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_x_full_n : IN STD_LOGIC;
        filtered_gradient_x_write : OUT STD_LOGIC;
        filtered_gradient_y_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_y_full_n : IN STD_LOGIC;
        filtered_gradient_y_write : OUT STD_LOGIC;
        filtered_gradient_z_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_z_full_n : IN STD_LOGIC;
        filtered_gradient_z_write : OUT STD_LOGIC );
    end component;


    component a0_outer_product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        filtered_gradient_x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_x_empty_n : IN STD_LOGIC;
        filtered_gradient_x_read : OUT STD_LOGIC;
        filtered_gradient_y_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_y_empty_n : IN STD_LOGIC;
        filtered_gradient_y_read : OUT STD_LOGIC;
        filtered_gradient_z_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        filtered_gradient_z_empty_n : IN STD_LOGIC;
        filtered_gradient_z_read : OUT STD_LOGIC;
        out_product_val_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        out_product_val_full_n : IN STD_LOGIC;
        out_product_val_write : OUT STD_LOGIC );
    end component;


    component a0_tensor_weight_y IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        out_product_val_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        out_product_val_empty_n : IN STD_LOGIC;
        out_product_val_read : OUT STD_LOGIC;
        tensor_y_val_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        tensor_y_val_full_n : IN STD_LOGIC;
        tensor_y_val_write : OUT STD_LOGIC );
    end component;


    component a0_tensor_weight_x IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        tensor_y_val_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        tensor_y_val_empty_n : IN STD_LOGIC;
        tensor_y_val_read : OUT STD_LOGIC;
        tensor_val_din : OUT STD_LOGIC_VECTOR (191 downto 0);
        tensor_val_full_n : IN STD_LOGIC;
        tensor_val_write : OUT STD_LOGIC );
    end component;


    component a0_flow_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outputs_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        outputs_full_n : IN STD_LOGIC;
        outputs_write : OUT STD_LOGIC;
        tensor_val_dout : IN STD_LOGIC_VECTOR (191 downto 0);
        tensor_val_empty_n : IN STD_LOGIC;
        tensor_val_read : OUT STD_LOGIC );
    end component;


    component a0_fifo_w32_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_fifo_w32_d4096_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_fifo_w192_d1_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (191 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (191 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_start_for_gradienEe0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_start_for_gradienFfa IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_start_for_gradienGfk IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_start_for_gradienHfu IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_start_for_outer_pIfE IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_start_for_tensor_JfO IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_start_for_tensor_KfY IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component a0_start_for_flow_caLf8 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Loop_FRAMES_CP_OUTER_U0 : component a0_Loop_FRAMES_CP_OUTER
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_FRAMES_CP_OUTER_U0_ap_start,
        start_full_n => Loop_FRAMES_CP_OUTER_U0_start_full_n,
        ap_done => Loop_FRAMES_CP_OUTER_U0_ap_done,
        ap_continue => Loop_FRAMES_CP_OUTER_U0_ap_continue,
        ap_idle => Loop_FRAMES_CP_OUTER_U0_ap_idle,
        ap_ready => Loop_FRAMES_CP_OUTER_U0_ap_ready,
        start_out => Loop_FRAMES_CP_OUTER_U0_start_out,
        start_write => Loop_FRAMES_CP_OUTER_U0_start_write,
        frames_V_dout => frames_V_dout,
        frames_V_empty_n => frames_V_empty_n,
        frames_V_read => Loop_FRAMES_CP_OUTER_U0_frames_V_read,
        frame1_a_din => Loop_FRAMES_CP_OUTER_U0_frame1_a_din,
        frame1_a_full_n => frame1_a_full_n,
        frame1_a_write => Loop_FRAMES_CP_OUTER_U0_frame1_a_write,
        frame2_a_din => Loop_FRAMES_CP_OUTER_U0_frame2_a_din,
        frame2_a_full_n => frame2_a_full_n,
        frame2_a_write => Loop_FRAMES_CP_OUTER_U0_frame2_a_write,
        frame3_a_din => Loop_FRAMES_CP_OUTER_U0_frame3_a_din,
        frame3_a_full_n => frame3_a_full_n,
        frame3_a_write => Loop_FRAMES_CP_OUTER_U0_frame3_a_write,
        frame3_b_din => Loop_FRAMES_CP_OUTER_U0_frame3_b_din,
        frame3_b_full_n => frame3_b_full_n,
        frame3_b_write => Loop_FRAMES_CP_OUTER_U0_frame3_b_write,
        frame4_a_din => Loop_FRAMES_CP_OUTER_U0_frame4_a_din,
        frame4_a_full_n => frame4_a_full_n,
        frame4_a_write => Loop_FRAMES_CP_OUTER_U0_frame4_a_write,
        frame5_a_din => Loop_FRAMES_CP_OUTER_U0_frame5_a_din,
        frame5_a_full_n => frame5_a_full_n,
        frame5_a_write => Loop_FRAMES_CP_OUTER_U0_frame5_a_write);

    gradient_xy_calc_U0 : component a0_gradient_xy_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_xy_calc_U0_ap_start,
        start_full_n => start_for_gradient_weight_y_U0_full_n,
        ap_done => gradient_xy_calc_U0_ap_done,
        ap_continue => gradient_xy_calc_U0_ap_continue,
        ap_idle => gradient_xy_calc_U0_ap_idle,
        ap_ready => gradient_xy_calc_U0_ap_ready,
        start_out => gradient_xy_calc_U0_start_out,
        start_write => gradient_xy_calc_U0_start_write,
        frame3_a_dout => frame3_a_dout,
        frame3_a_empty_n => frame3_a_empty_n,
        frame3_a_read => gradient_xy_calc_U0_frame3_a_read,
        gradient_x_din => gradient_xy_calc_U0_gradient_x_din,
        gradient_x_full_n => gradient_x_full_n,
        gradient_x_write => gradient_xy_calc_U0_gradient_x_write,
        gradient_y_din => gradient_xy_calc_U0_gradient_y_din,
        gradient_y_full_n => gradient_y_full_n,
        gradient_y_write => gradient_xy_calc_U0_gradient_y_write);

    gradient_z_calc_U0 : component a0_gradient_z_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_z_calc_U0_ap_start,
        ap_done => gradient_z_calc_U0_ap_done,
        ap_continue => gradient_z_calc_U0_ap_continue,
        ap_idle => gradient_z_calc_U0_ap_idle,
        ap_ready => gradient_z_calc_U0_ap_ready,
        frame1_a_dout => frame1_a_dout,
        frame1_a_empty_n => frame1_a_empty_n,
        frame1_a_read => gradient_z_calc_U0_frame1_a_read,
        frame2_a_dout => frame2_a_dout,
        frame2_a_empty_n => frame2_a_empty_n,
        frame2_a_read => gradient_z_calc_U0_frame2_a_read,
        frame3_b_dout => frame3_b_dout,
        frame3_b_empty_n => frame3_b_empty_n,
        frame3_b_read => gradient_z_calc_U0_frame3_b_read,
        frame4_a_dout => frame4_a_dout,
        frame4_a_empty_n => frame4_a_empty_n,
        frame4_a_read => gradient_z_calc_U0_frame4_a_read,
        frame5_a_dout => frame5_a_dout,
        frame5_a_empty_n => frame5_a_empty_n,
        frame5_a_read => gradient_z_calc_U0_frame5_a_read,
        gradient_z_din => gradient_z_calc_U0_gradient_z_din,
        gradient_z_full_n => gradient_z_full_n,
        gradient_z_write => gradient_z_calc_U0_gradient_z_write);

    gradient_weight_y_U0 : component a0_gradient_weight_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_weight_y_U0_ap_start,
        start_full_n => start_for_gradient_weight_x_U0_full_n,
        ap_done => gradient_weight_y_U0_ap_done,
        ap_continue => gradient_weight_y_U0_ap_continue,
        ap_idle => gradient_weight_y_U0_ap_idle,
        ap_ready => gradient_weight_y_U0_ap_ready,
        start_out => gradient_weight_y_U0_start_out,
        start_write => gradient_weight_y_U0_start_write,
        gradient_x_dout => gradient_x_dout,
        gradient_x_empty_n => gradient_x_empty_n,
        gradient_x_read => gradient_weight_y_U0_gradient_x_read,
        gradient_y_dout => gradient_y_dout,
        gradient_y_empty_n => gradient_y_empty_n,
        gradient_y_read => gradient_weight_y_U0_gradient_y_read,
        gradient_z_dout => gradient_z_dout,
        gradient_z_empty_n => gradient_z_empty_n,
        gradient_z_read => gradient_weight_y_U0_gradient_z_read,
        y_filtered_x_din => gradient_weight_y_U0_y_filtered_x_din,
        y_filtered_x_full_n => y_filtered_x_full_n,
        y_filtered_x_write => gradient_weight_y_U0_y_filtered_x_write,
        y_filtered_y_din => gradient_weight_y_U0_y_filtered_y_din,
        y_filtered_y_full_n => y_filtered_y_full_n,
        y_filtered_y_write => gradient_weight_y_U0_y_filtered_y_write,
        y_filtered_z_din => gradient_weight_y_U0_y_filtered_z_din,
        y_filtered_z_full_n => y_filtered_z_full_n,
        y_filtered_z_write => gradient_weight_y_U0_y_filtered_z_write);

    gradient_weight_x_U0 : component a0_gradient_weight_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => gradient_weight_x_U0_ap_start,
        start_full_n => start_for_outer_product_U0_full_n,
        ap_done => gradient_weight_x_U0_ap_done,
        ap_continue => gradient_weight_x_U0_ap_continue,
        ap_idle => gradient_weight_x_U0_ap_idle,
        ap_ready => gradient_weight_x_U0_ap_ready,
        start_out => gradient_weight_x_U0_start_out,
        start_write => gradient_weight_x_U0_start_write,
        y_filtered_x_dout => y_filtered_x_dout,
        y_filtered_x_empty_n => y_filtered_x_empty_n,
        y_filtered_x_read => gradient_weight_x_U0_y_filtered_x_read,
        y_filtered_y_dout => y_filtered_y_dout,
        y_filtered_y_empty_n => y_filtered_y_empty_n,
        y_filtered_y_read => gradient_weight_x_U0_y_filtered_y_read,
        y_filtered_z_dout => y_filtered_z_dout,
        y_filtered_z_empty_n => y_filtered_z_empty_n,
        y_filtered_z_read => gradient_weight_x_U0_y_filtered_z_read,
        filtered_gradient_x_din => gradient_weight_x_U0_filtered_gradient_x_din,
        filtered_gradient_x_full_n => filtered_gradient_x_full_n,
        filtered_gradient_x_write => gradient_weight_x_U0_filtered_gradient_x_write,
        filtered_gradient_y_din => gradient_weight_x_U0_filtered_gradient_y_din,
        filtered_gradient_y_full_n => filtered_gradient_y_full_n,
        filtered_gradient_y_write => gradient_weight_x_U0_filtered_gradient_y_write,
        filtered_gradient_z_din => gradient_weight_x_U0_filtered_gradient_z_din,
        filtered_gradient_z_full_n => filtered_gradient_z_full_n,
        filtered_gradient_z_write => gradient_weight_x_U0_filtered_gradient_z_write);

    outer_product_U0 : component a0_outer_product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => outer_product_U0_ap_start,
        start_full_n => start_for_tensor_weight_y_U0_full_n,
        ap_done => outer_product_U0_ap_done,
        ap_continue => outer_product_U0_ap_continue,
        ap_idle => outer_product_U0_ap_idle,
        ap_ready => outer_product_U0_ap_ready,
        start_out => outer_product_U0_start_out,
        start_write => outer_product_U0_start_write,
        filtered_gradient_x_dout => filtered_gradient_x_dout,
        filtered_gradient_x_empty_n => filtered_gradient_x_empty_n,
        filtered_gradient_x_read => outer_product_U0_filtered_gradient_x_read,
        filtered_gradient_y_dout => filtered_gradient_y_dout,
        filtered_gradient_y_empty_n => filtered_gradient_y_empty_n,
        filtered_gradient_y_read => outer_product_U0_filtered_gradient_y_read,
        filtered_gradient_z_dout => filtered_gradient_z_dout,
        filtered_gradient_z_empty_n => filtered_gradient_z_empty_n,
        filtered_gradient_z_read => outer_product_U0_filtered_gradient_z_read,
        out_product_val_din => outer_product_U0_out_product_val_din,
        out_product_val_full_n => out_product_val_full_n,
        out_product_val_write => outer_product_U0_out_product_val_write);

    tensor_weight_y_U0 : component a0_tensor_weight_y
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tensor_weight_y_U0_ap_start,
        start_full_n => start_for_tensor_weight_x_U0_full_n,
        ap_done => tensor_weight_y_U0_ap_done,
        ap_continue => tensor_weight_y_U0_ap_continue,
        ap_idle => tensor_weight_y_U0_ap_idle,
        ap_ready => tensor_weight_y_U0_ap_ready,
        start_out => tensor_weight_y_U0_start_out,
        start_write => tensor_weight_y_U0_start_write,
        out_product_val_dout => out_product_val_dout,
        out_product_val_empty_n => out_product_val_empty_n,
        out_product_val_read => tensor_weight_y_U0_out_product_val_read,
        tensor_y_val_din => tensor_weight_y_U0_tensor_y_val_din,
        tensor_y_val_full_n => tensor_y_val_full_n,
        tensor_y_val_write => tensor_weight_y_U0_tensor_y_val_write);

    tensor_weight_x_U0 : component a0_tensor_weight_x
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => tensor_weight_x_U0_ap_start,
        start_full_n => start_for_flow_calc_U0_full_n,
        ap_done => tensor_weight_x_U0_ap_done,
        ap_continue => tensor_weight_x_U0_ap_continue,
        ap_idle => tensor_weight_x_U0_ap_idle,
        ap_ready => tensor_weight_x_U0_ap_ready,
        start_out => tensor_weight_x_U0_start_out,
        start_write => tensor_weight_x_U0_start_write,
        tensor_y_val_dout => tensor_y_val_dout,
        tensor_y_val_empty_n => tensor_y_val_empty_n,
        tensor_y_val_read => tensor_weight_x_U0_tensor_y_val_read,
        tensor_val_din => tensor_weight_x_U0_tensor_val_din,
        tensor_val_full_n => tensor_val_full_n,
        tensor_val_write => tensor_weight_x_U0_tensor_val_write);

    flow_calc_U0 : component a0_flow_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => flow_calc_U0_ap_start,
        ap_done => flow_calc_U0_ap_done,
        ap_continue => flow_calc_U0_ap_continue,
        ap_idle => flow_calc_U0_ap_idle,
        ap_ready => flow_calc_U0_ap_ready,
        outputs_din => flow_calc_U0_outputs_din,
        outputs_full_n => outputs_full_n,
        outputs_write => flow_calc_U0_outputs_write,
        tensor_val_dout => tensor_val_dout,
        tensor_val_empty_n => tensor_val_empty_n,
        tensor_val_read => flow_calc_U0_tensor_val_read);

    frame1_a_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame1_a_din,
        if_full_n => frame1_a_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame1_a_write,
        if_dout => frame1_a_dout,
        if_empty_n => frame1_a_empty_n,
        if_read => gradient_z_calc_U0_frame1_a_read);

    frame2_a_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame2_a_din,
        if_full_n => frame2_a_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame2_a_write,
        if_dout => frame2_a_dout,
        if_empty_n => frame2_a_empty_n,
        if_read => gradient_z_calc_U0_frame2_a_read);

    frame3_a_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame3_a_din,
        if_full_n => frame3_a_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame3_a_write,
        if_dout => frame3_a_dout,
        if_empty_n => frame3_a_empty_n,
        if_read => gradient_xy_calc_U0_frame3_a_read);

    frame3_b_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame3_b_din,
        if_full_n => frame3_b_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame3_b_write,
        if_dout => frame3_b_dout,
        if_empty_n => frame3_b_empty_n,
        if_read => gradient_z_calc_U0_frame3_b_read);

    frame4_a_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame4_a_din,
        if_full_n => frame4_a_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame4_a_write,
        if_dout => frame4_a_dout,
        if_empty_n => frame4_a_empty_n,
        if_read => gradient_z_calc_U0_frame4_a_read);

    frame5_a_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_FRAMES_CP_OUTER_U0_frame5_a_din,
        if_full_n => frame5_a_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_frame5_a_write,
        if_dout => frame5_a_dout,
        if_empty_n => frame5_a_empty_n,
        if_read => gradient_z_calc_U0_frame5_a_read);

    gradient_x_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_xy_calc_U0_gradient_x_din,
        if_full_n => gradient_x_full_n,
        if_write => gradient_xy_calc_U0_gradient_x_write,
        if_dout => gradient_x_dout,
        if_empty_n => gradient_x_empty_n,
        if_read => gradient_weight_y_U0_gradient_x_read);

    gradient_y_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_xy_calc_U0_gradient_y_din,
        if_full_n => gradient_y_full_n,
        if_write => gradient_xy_calc_U0_gradient_y_write,
        if_dout => gradient_y_dout,
        if_empty_n => gradient_y_empty_n,
        if_read => gradient_weight_y_U0_gradient_y_read);

    gradient_z_U : component a0_fifo_w32_d4096_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_z_calc_U0_gradient_z_din,
        if_full_n => gradient_z_full_n,
        if_write => gradient_z_calc_U0_gradient_z_write,
        if_dout => gradient_z_dout,
        if_empty_n => gradient_z_empty_n,
        if_read => gradient_weight_y_U0_gradient_z_read);

    y_filtered_x_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_y_U0_y_filtered_x_din,
        if_full_n => y_filtered_x_full_n,
        if_write => gradient_weight_y_U0_y_filtered_x_write,
        if_dout => y_filtered_x_dout,
        if_empty_n => y_filtered_x_empty_n,
        if_read => gradient_weight_x_U0_y_filtered_x_read);

    y_filtered_y_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_y_U0_y_filtered_y_din,
        if_full_n => y_filtered_y_full_n,
        if_write => gradient_weight_y_U0_y_filtered_y_write,
        if_dout => y_filtered_y_dout,
        if_empty_n => y_filtered_y_empty_n,
        if_read => gradient_weight_x_U0_y_filtered_y_read);

    y_filtered_z_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_y_U0_y_filtered_z_din,
        if_full_n => y_filtered_z_full_n,
        if_write => gradient_weight_y_U0_y_filtered_z_write,
        if_dout => y_filtered_z_dout,
        if_empty_n => y_filtered_z_empty_n,
        if_read => gradient_weight_x_U0_y_filtered_z_read);

    filtered_gradient_x_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_x_U0_filtered_gradient_x_din,
        if_full_n => filtered_gradient_x_full_n,
        if_write => gradient_weight_x_U0_filtered_gradient_x_write,
        if_dout => filtered_gradient_x_dout,
        if_empty_n => filtered_gradient_x_empty_n,
        if_read => outer_product_U0_filtered_gradient_x_read);

    filtered_gradient_y_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_x_U0_filtered_gradient_y_din,
        if_full_n => filtered_gradient_y_full_n,
        if_write => gradient_weight_x_U0_filtered_gradient_y_write,
        if_dout => filtered_gradient_y_dout,
        if_empty_n => filtered_gradient_y_empty_n,
        if_read => outer_product_U0_filtered_gradient_y_read);

    filtered_gradient_z_U : component a0_fifo_w32_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => gradient_weight_x_U0_filtered_gradient_z_din,
        if_full_n => filtered_gradient_z_full_n,
        if_write => gradient_weight_x_U0_filtered_gradient_z_write,
        if_dout => filtered_gradient_z_dout,
        if_empty_n => filtered_gradient_z_empty_n,
        if_read => outer_product_U0_filtered_gradient_z_read);

    out_product_val_U : component a0_fifo_w192_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => outer_product_U0_out_product_val_din,
        if_full_n => out_product_val_full_n,
        if_write => outer_product_U0_out_product_val_write,
        if_dout => out_product_val_dout,
        if_empty_n => out_product_val_empty_n,
        if_read => tensor_weight_y_U0_out_product_val_read);

    tensor_y_val_U : component a0_fifo_w192_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tensor_weight_y_U0_tensor_y_val_din,
        if_full_n => tensor_y_val_full_n,
        if_write => tensor_weight_y_U0_tensor_y_val_write,
        if_dout => tensor_y_val_dout,
        if_empty_n => tensor_y_val_empty_n,
        if_read => tensor_weight_x_U0_tensor_y_val_read);

    tensor_val_U : component a0_fifo_w192_d1_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => tensor_weight_x_U0_tensor_val_din,
        if_full_n => tensor_val_full_n,
        if_write => tensor_weight_x_U0_tensor_val_write,
        if_dout => tensor_val_dout,
        if_empty_n => tensor_val_empty_n,
        if_read => flow_calc_U0_tensor_val_read);

    start_for_gradienEe0_U : component a0_start_for_gradienEe0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_xy_calc_U0_din,
        if_full_n => start_for_gradient_xy_calc_U0_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_start_write,
        if_dout => start_for_gradient_xy_calc_U0_dout,
        if_empty_n => start_for_gradient_xy_calc_U0_empty_n,
        if_read => gradient_xy_calc_U0_ap_ready);

    start_for_gradienFfa_U : component a0_start_for_gradienFfa
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_z_calc_U0_din,
        if_full_n => start_for_gradient_z_calc_U0_full_n,
        if_write => Loop_FRAMES_CP_OUTER_U0_start_write,
        if_dout => start_for_gradient_z_calc_U0_dout,
        if_empty_n => start_for_gradient_z_calc_U0_empty_n,
        if_read => gradient_z_calc_U0_ap_ready);

    start_for_gradienGfk_U : component a0_start_for_gradienGfk
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_weight_y_U0_din,
        if_full_n => start_for_gradient_weight_y_U0_full_n,
        if_write => gradient_xy_calc_U0_start_write,
        if_dout => start_for_gradient_weight_y_U0_dout,
        if_empty_n => start_for_gradient_weight_y_U0_empty_n,
        if_read => gradient_weight_y_U0_ap_ready);

    start_for_gradienHfu_U : component a0_start_for_gradienHfu
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_gradient_weight_x_U0_din,
        if_full_n => start_for_gradient_weight_x_U0_full_n,
        if_write => gradient_weight_y_U0_start_write,
        if_dout => start_for_gradient_weight_x_U0_dout,
        if_empty_n => start_for_gradient_weight_x_U0_empty_n,
        if_read => gradient_weight_x_U0_ap_ready);

    start_for_outer_pIfE_U : component a0_start_for_outer_pIfE
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_outer_product_U0_din,
        if_full_n => start_for_outer_product_U0_full_n,
        if_write => gradient_weight_x_U0_start_write,
        if_dout => start_for_outer_product_U0_dout,
        if_empty_n => start_for_outer_product_U0_empty_n,
        if_read => outer_product_U0_ap_ready);

    start_for_tensor_JfO_U : component a0_start_for_tensor_JfO
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_tensor_weight_y_U0_din,
        if_full_n => start_for_tensor_weight_y_U0_full_n,
        if_write => outer_product_U0_start_write,
        if_dout => start_for_tensor_weight_y_U0_dout,
        if_empty_n => start_for_tensor_weight_y_U0_empty_n,
        if_read => tensor_weight_y_U0_ap_ready);

    start_for_tensor_KfY_U : component a0_start_for_tensor_KfY
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_tensor_weight_x_U0_din,
        if_full_n => start_for_tensor_weight_x_U0_full_n,
        if_write => tensor_weight_y_U0_start_write,
        if_dout => start_for_tensor_weight_x_U0_dout,
        if_empty_n => start_for_tensor_weight_x_U0_empty_n,
        if_read => tensor_weight_x_U0_ap_ready);

    start_for_flow_caLf8_U : component a0_start_for_flow_caLf8
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_flow_calc_U0_din,
        if_full_n => start_for_flow_calc_U0_full_n,
        if_write => tensor_weight_x_U0_start_write,
        if_dout => start_for_flow_calc_U0_dout,
        if_empty_n => start_for_flow_calc_U0_empty_n,
        if_read => flow_calc_U0_ap_ready);




    Loop_FRAMES_CP_OUTER_U0_ap_continue <= ap_const_logic_1;
    Loop_FRAMES_CP_OUTER_U0_ap_start <= ap_start;
    Loop_FRAMES_CP_OUTER_U0_start_full_n <= (start_for_gradient_z_calc_U0_full_n and start_for_gradient_xy_calc_U0_full_n);
    ap_done <= flow_calc_U0_ap_done;
    ap_idle <= (tensor_weight_y_U0_ap_idle and tensor_weight_x_U0_ap_idle and outer_product_U0_ap_idle and gradient_z_calc_U0_ap_idle and gradient_xy_calc_U0_ap_idle and gradient_weight_y_U0_ap_idle and gradient_weight_x_U0_ap_idle and flow_calc_U0_ap_idle and Loop_FRAMES_CP_OUTER_U0_ap_idle);
    ap_ready <= Loop_FRAMES_CP_OUTER_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= flow_calc_U0_ap_done;
    ap_sync_ready <= Loop_FRAMES_CP_OUTER_U0_ap_ready;
    flow_calc_U0_ap_continue <= ap_const_logic_1;
    flow_calc_U0_ap_start <= start_for_flow_calc_U0_empty_n;
    flow_calc_U0_start_full_n <= ap_const_logic_1;
    flow_calc_U0_start_write <= ap_const_logic_0;
    frames_V_read <= Loop_FRAMES_CP_OUTER_U0_frames_V_read;
    gradient_weight_x_U0_ap_continue <= ap_const_logic_1;
    gradient_weight_x_U0_ap_start <= start_for_gradient_weight_x_U0_empty_n;
    gradient_weight_y_U0_ap_continue <= ap_const_logic_1;
    gradient_weight_y_U0_ap_start <= start_for_gradient_weight_y_U0_empty_n;
    gradient_xy_calc_U0_ap_continue <= ap_const_logic_1;
    gradient_xy_calc_U0_ap_start <= start_for_gradient_xy_calc_U0_empty_n;
    gradient_z_calc_U0_ap_continue <= ap_const_logic_1;
    gradient_z_calc_U0_ap_start <= start_for_gradient_z_calc_U0_empty_n;
    gradient_z_calc_U0_start_full_n <= ap_const_logic_1;
    gradient_z_calc_U0_start_write <= ap_const_logic_0;
    outer_product_U0_ap_continue <= ap_const_logic_1;
    outer_product_U0_ap_start <= start_for_outer_product_U0_empty_n;
    outputs_din <= flow_calc_U0_outputs_din;
    outputs_write <= flow_calc_U0_outputs_write;
    start_for_flow_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_weight_x_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_weight_y_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_xy_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_gradient_z_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_outer_product_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_tensor_weight_x_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_tensor_weight_y_U0_din <= (0=>ap_const_logic_1, others=>'-');
    tensor_weight_x_U0_ap_continue <= ap_const_logic_1;
    tensor_weight_x_U0_ap_start <= start_for_tensor_weight_x_U0_empty_n;
    tensor_weight_y_U0_ap_continue <= ap_const_logic_1;
    tensor_weight_y_U0_ap_start <= start_for_tensor_weight_y_U0_empty_n;
end behav;
