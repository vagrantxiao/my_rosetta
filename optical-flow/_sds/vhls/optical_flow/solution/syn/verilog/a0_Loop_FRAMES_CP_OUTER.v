// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_Loop_FRAMES_CP_OUTER (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        frames_V_dout,
        frames_V_empty_n,
        frames_V_read,
        frame1_a_din,
        frame1_a_full_n,
        frame1_a_write,
        frame2_a_din,
        frame2_a_full_n,
        frame2_a_write,
        frame3_a_din,
        frame3_a_full_n,
        frame3_a_write,
        frame3_b_din,
        frame3_b_full_n,
        frame3_b_write,
        frame4_a_din,
        frame4_a_full_n,
        frame4_a_write,
        frame5_a_din,
        frame5_a_full_n,
        frame5_a_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state17 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] frames_V_dout;
input   frames_V_empty_n;
output   frames_V_read;
output  [31:0] frame1_a_din;
input   frame1_a_full_n;
output   frame1_a_write;
output  [31:0] frame2_a_din;
input   frame2_a_full_n;
output   frame2_a_write;
output  [31:0] frame3_a_din;
input   frame3_a_full_n;
output   frame3_a_write;
output  [31:0] frame3_b_din;
input   frame3_b_full_n;
output   frame3_b_write;
output  [31:0] frame4_a_din;
input   frame4_a_full_n;
output   frame4_a_write;
output  [31:0] frame5_a_din;
input   frame5_a_full_n;
output   frame5_a_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg frames_V_read;
reg frame1_a_write;
reg frame2_a_write;
reg frame3_a_write;
reg frame3_b_write;
reg frame4_a_write;
reg frame5_a_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    frames_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_322;
reg    frame1_a_blk_n;
reg    ap_enable_reg_pp0_iter14;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter13_reg;
reg    frame2_a_blk_n;
reg    frame3_a_blk_n;
reg    frame3_b_blk_n;
reg    frame4_a_blk_n;
reg    frame5_a_blk_n;
reg   [18:0] indvar_flatten_reg_190;
wire   [0:0] exitcond_flatten_fu_241_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_state9_pp0_stage0_iter7;
wire    ap_block_state10_pp0_stage0_iter8;
wire    ap_block_state11_pp0_stage0_iter9;
wire    ap_block_state12_pp0_stage0_iter10;
wire    ap_block_state13_pp0_stage0_iter11;
wire    ap_block_state14_pp0_stage0_iter12;
wire    ap_block_state15_pp0_stage0_iter13;
reg    ap_block_state16_pp0_stage0_iter14;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter6_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter7_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter8_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter9_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter10_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter11_reg;
reg   [0:0] exitcond_flatten_reg_322_pp0_iter12_reg;
wire   [18:0] indvar_flatten_next_fu_247_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] grp_fu_226_p1;
reg   [31:0] tmp_46_i_i_reg_356;
wire   [31:0] grp_fu_229_p1;
reg   [31:0] tmp_48_i_i_reg_361;
wire   [31:0] grp_fu_232_p1;
reg   [31:0] tmp_50_i_i_reg_366;
wire   [31:0] grp_fu_235_p1;
reg   [31:0] tmp_52_i_i_reg_371;
wire   [31:0] grp_fu_238_p1;
reg   [31:0] tmp_54_i_i_reg_376;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] tmp_47_i_i_reg_381;
wire   [31:0] grp_fu_206_p2;
reg   [31:0] tmp_49_i_i_reg_386;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] tmp_51_i_i_reg_391;
wire   [31:0] grp_fu_216_p2;
reg   [31:0] tmp_53_i_i_reg_397;
wire   [31:0] grp_fu_221_p2;
reg   [31:0] tmp_55_i_i_reg_402;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] grp_fu_226_p0;
wire   [31:0] grp_fu_229_p0;
wire   [31:0] grp_fu_232_p0;
wire   [31:0] grp_fu_235_p0;
wire   [31:0] grp_fu_238_p0;
wire   [7:0] tmp_fu_253_p1;
wire   [7:0] p_Result_1_i_i_fu_262_p4;
wire   [7:0] p_Result_2_i_i_fu_277_p4;
wire   [7:0] p_Result_3_i_i_fu_292_p4;
wire   [7:0] p_Result_4_i_i_fu_307_p4;
reg    grp_fu_201_ce;
reg    grp_fu_206_ce;
reg    grp_fu_211_ce;
reg    grp_fu_216_ce;
reg    grp_fu_221_ce;
reg    grp_fu_226_ce;
reg    grp_fu_229_ce;
reg    grp_fu_232_ce;
reg    grp_fu_235_ce;
reg    grp_fu_238_ce;
wire    ap_CS_fsm_state17;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
end

a0_optical_flow_fdivbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fdivbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_46_i_i_reg_356),
    .din1(32'd1132396544),
    .ce(grp_fu_201_ce),
    .dout(grp_fu_201_p2)
);

a0_optical_flow_fdivbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fdivbkb_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_48_i_i_reg_361),
    .din1(32'd1132396544),
    .ce(grp_fu_206_ce),
    .dout(grp_fu_206_p2)
);

a0_optical_flow_fdivbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fdivbkb_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_50_i_i_reg_366),
    .din1(32'd1132396544),
    .ce(grp_fu_211_ce),
    .dout(grp_fu_211_p2)
);

a0_optical_flow_fdivbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fdivbkb_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_52_i_i_reg_371),
    .din1(32'd1132396544),
    .ce(grp_fu_216_ce),
    .dout(grp_fu_216_p2)
);

a0_optical_flow_fdivbkb #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fdivbkb_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_54_i_i_reg_376),
    .din1(32'd1132396544),
    .ce(grp_fu_221_ce),
    .dout(grp_fu_221_p2)
);

a0_optical_flow_uitocud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_uitocud_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_226_p0),
    .ce(grp_fu_226_ce),
    .dout(grp_fu_226_p1)
);

a0_optical_flow_uitocud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_uitocud_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_229_p0),
    .ce(grp_fu_229_ce),
    .dout(grp_fu_229_p1)
);

a0_optical_flow_uitocud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_uitocud_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_232_p0),
    .ce(grp_fu_232_ce),
    .dout(grp_fu_232_p1)
);

a0_optical_flow_uitocud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_uitocud_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_235_p0),
    .ce(grp_fu_235_ce),
    .dout(grp_fu_235_p1)
);

a0_optical_flow_uitocud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_uitocud_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_238_p0),
    .ce(grp_fu_238_ce),
    .dout(grp_fu_238_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_241_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_190 <= indvar_flatten_next_fu_247_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_190 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_322 <= exitcond_flatten_fu_241_p2;
        exitcond_flatten_reg_322_pp0_iter1_reg <= exitcond_flatten_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_322_pp0_iter10_reg <= exitcond_flatten_reg_322_pp0_iter9_reg;
        exitcond_flatten_reg_322_pp0_iter11_reg <= exitcond_flatten_reg_322_pp0_iter10_reg;
        exitcond_flatten_reg_322_pp0_iter12_reg <= exitcond_flatten_reg_322_pp0_iter11_reg;
        exitcond_flatten_reg_322_pp0_iter13_reg <= exitcond_flatten_reg_322_pp0_iter12_reg;
        exitcond_flatten_reg_322_pp0_iter2_reg <= exitcond_flatten_reg_322_pp0_iter1_reg;
        exitcond_flatten_reg_322_pp0_iter3_reg <= exitcond_flatten_reg_322_pp0_iter2_reg;
        exitcond_flatten_reg_322_pp0_iter4_reg <= exitcond_flatten_reg_322_pp0_iter3_reg;
        exitcond_flatten_reg_322_pp0_iter5_reg <= exitcond_flatten_reg_322_pp0_iter4_reg;
        exitcond_flatten_reg_322_pp0_iter6_reg <= exitcond_flatten_reg_322_pp0_iter5_reg;
        exitcond_flatten_reg_322_pp0_iter7_reg <= exitcond_flatten_reg_322_pp0_iter6_reg;
        exitcond_flatten_reg_322_pp0_iter8_reg <= exitcond_flatten_reg_322_pp0_iter7_reg;
        exitcond_flatten_reg_322_pp0_iter9_reg <= exitcond_flatten_reg_322_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_322_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_46_i_i_reg_356 <= grp_fu_226_p1;
        tmp_48_i_i_reg_361 <= grp_fu_229_p1;
        tmp_50_i_i_reg_366 <= grp_fu_232_p1;
        tmp_52_i_i_reg_371 <= grp_fu_235_p1;
        tmp_54_i_i_reg_376 <= grp_fu_238_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_322_pp0_iter12_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_47_i_i_reg_381 <= grp_fu_201_p2;
        tmp_49_i_i_reg_386 <= grp_fu_206_p2;
        tmp_51_i_i_reg_391 <= grp_fu_211_p2;
        tmp_53_i_i_reg_397 <= grp_fu_216_p2;
        tmp_55_i_i_reg_402 <= grp_fu_221_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_241_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        frame1_a_blk_n = frame1_a_full_n;
    end else begin
        frame1_a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame1_a_write = 1'b1;
    end else begin
        frame1_a_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        frame2_a_blk_n = frame2_a_full_n;
    end else begin
        frame2_a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame2_a_write = 1'b1;
    end else begin
        frame2_a_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        frame3_a_blk_n = frame3_a_full_n;
    end else begin
        frame3_a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame3_a_write = 1'b1;
    end else begin
        frame3_a_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        frame3_b_blk_n = frame3_b_full_n;
    end else begin
        frame3_b_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame3_b_write = 1'b1;
    end else begin
        frame3_b_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        frame4_a_blk_n = frame4_a_full_n;
    end else begin
        frame4_a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame4_a_write = 1'b1;
    end else begin
        frame4_a_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter14 == 1'b1))) begin
        frame5_a_blk_n = frame5_a_full_n;
    end else begin
        frame5_a_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frame5_a_write = 1'b1;
    end else begin
        frame5_a_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        frames_V_blk_n = frames_V_empty_n;
    end else begin
        frames_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_322 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        frames_V_read = 1'b1;
    end else begin
        frames_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_201_ce = 1'b1;
    end else begin
        grp_fu_201_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_206_ce = 1'b1;
    end else begin
        grp_fu_206_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_211_ce = 1'b1;
    end else begin
        grp_fu_211_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_216_ce = 1'b1;
    end else begin
        grp_fu_216_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_221_ce = 1'b1;
    end else begin
        grp_fu_221_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_226_ce = 1'b1;
    end else begin
        grp_fu_226_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_229_ce = 1'b1;
    end else begin
        grp_fu_229_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_232_ce = 1'b1;
    end else begin
        grp_fu_232_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_235_ce = 1'b1;
    end else begin
        grp_fu_235_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_238_ce = 1'b1;
    end else begin
        grp_fu_238_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_241_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((ap_enable_reg_pp0_iter13 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter14 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter13 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter14 == 1'b1)) | ((exitcond_flatten_fu_241_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter14 == 1'b1) & (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame5_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame4_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame3_b_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame3_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame2_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame1_a_full_n == 1'b0)))) | ((exitcond_flatten_reg_322 == 1'd0) & (frames_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter14 == 1'b1) & (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame5_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame4_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame3_b_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame3_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame2_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame1_a_full_n == 1'b0)))) | ((exitcond_flatten_reg_322 == 1'd0) & (frames_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter14 == 1'b1) & (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame5_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame4_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame3_b_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame3_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame2_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame1_a_full_n == 1'b0)))) | ((exitcond_flatten_reg_322 == 1'd0) & (frames_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_pp0_stage0_iter14 = (((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame5_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame4_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame3_b_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame3_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame2_a_full_n == 1'b0)) | ((exitcond_flatten_reg_322_pp0_iter13_reg == 1'd0) & (frame1_a_full_n == 1'b0)));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_322 == 1'd0) & (frames_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_241_p2 = ((indvar_flatten_reg_190 == 19'd446464) ? 1'b1 : 1'b0);

assign frame1_a_din = tmp_47_i_i_reg_381;

assign frame2_a_din = tmp_49_i_i_reg_386;

assign frame3_a_din = tmp_51_i_i_reg_391;

assign frame3_b_din = tmp_51_i_i_reg_391;

assign frame4_a_din = tmp_53_i_i_reg_397;

assign frame5_a_din = tmp_55_i_i_reg_402;

assign grp_fu_226_p0 = tmp_fu_253_p1;

assign grp_fu_229_p0 = p_Result_1_i_i_fu_262_p4;

assign grp_fu_232_p0 = p_Result_2_i_i_fu_277_p4;

assign grp_fu_235_p0 = p_Result_3_i_i_fu_292_p4;

assign grp_fu_238_p0 = p_Result_4_i_i_fu_307_p4;

assign indvar_flatten_next_fu_247_p2 = (indvar_flatten_reg_190 + 19'd1);

assign p_Result_1_i_i_fu_262_p4 = {{frames_V_dout[15:8]}};

assign p_Result_2_i_i_fu_277_p4 = {{frames_V_dout[23:16]}};

assign p_Result_3_i_i_fu_292_p4 = {{frames_V_dout[31:24]}};

assign p_Result_4_i_i_fu_307_p4 = {{frames_V_dout[39:32]}};

assign start_out = real_start;

assign tmp_fu_253_p1 = frames_V_dout[7:0];

endmodule //a0_Loop_FRAMES_CP_OUTER
