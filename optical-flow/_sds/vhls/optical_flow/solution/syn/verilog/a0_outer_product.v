// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module a0_outer_product (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        filtered_gradient_x_dout,
        filtered_gradient_x_empty_n,
        filtered_gradient_x_read,
        filtered_gradient_y_dout,
        filtered_gradient_y_empty_n,
        filtered_gradient_y_read,
        filtered_gradient_z_dout,
        filtered_gradient_z_empty_n,
        filtered_gradient_z_read,
        out_product_val_din,
        out_product_val_full_n,
        out_product_val_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] filtered_gradient_x_dout;
input   filtered_gradient_x_empty_n;
output   filtered_gradient_x_read;
input  [31:0] filtered_gradient_y_dout;
input   filtered_gradient_y_empty_n;
output   filtered_gradient_y_read;
input  [31:0] filtered_gradient_z_dout;
input   filtered_gradient_z_empty_n;
output   filtered_gradient_z_read;
output  [191:0] out_product_val_din;
input   out_product_val_full_n;
output   out_product_val_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg filtered_gradient_x_read;
reg filtered_gradient_y_read;
reg filtered_gradient_z_read;
reg out_product_val_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    filtered_gradient_x_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_149;
reg    filtered_gradient_y_blk_n;
reg    filtered_gradient_z_blk_n;
reg    out_product_val_blk_n;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] exitcond_flatten_reg_149_pp0_iter4_reg;
reg   [18:0] indvar_flatten_reg_67;
wire   [0:0] exitcond_flatten_fu_102_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
reg    ap_block_state7_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_149_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_149_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_149_pp0_iter3_reg;
wire   [18:0] indvar_flatten_next_fu_108_p2;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] grad_x_reg_158;
reg   [31:0] grad_y_reg_166;
reg   [31:0] grad_z_reg_174;
wire   [31:0] grp_fu_78_p2;
reg   [31:0] tmp_7_reg_182;
wire   [31:0] grp_fu_82_p2;
reg   [31:0] tmp_8_reg_187;
wire   [31:0] grp_fu_86_p2;
reg   [31:0] tmp_9_reg_192;
wire   [31:0] grp_fu_90_p2;
reg   [31:0] tmp_10_reg_197;
wire   [31:0] grp_fu_94_p2;
reg   [31:0] tmp_11_reg_202;
wire   [31:0] grp_fu_98_p2;
reg   [31:0] tmp_12_reg_207;
reg    ap_block_state1;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] tmp_s_fu_129_p1;
wire   [31:0] tmp_73_fu_126_p1;
wire   [31:0] tmp_72_fu_123_p1;
wire   [31:0] tmp_71_fu_120_p1;
wire   [31:0] tmp_70_fu_117_p1;
wire   [31:0] tmp_69_fu_114_p1;
reg    grp_fu_78_ce;
reg    grp_fu_82_ce;
reg    grp_fu_86_ce;
reg    grp_fu_90_ce;
reg    grp_fu_94_ce;
reg    grp_fu_98_ce;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U154(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grad_x_reg_158),
    .din1(grad_x_reg_158),
    .ce(grp_fu_78_ce),
    .dout(grp_fu_78_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U155(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grad_y_reg_166),
    .din1(grad_y_reg_166),
    .ce(grp_fu_82_ce),
    .dout(grp_fu_82_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U156(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grad_z_reg_174),
    .din1(grad_z_reg_174),
    .ce(grp_fu_86_ce),
    .dout(grp_fu_86_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U157(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grad_x_reg_158),
    .din1(grad_y_reg_166),
    .ce(grp_fu_90_ce),
    .dout(grp_fu_90_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U158(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grad_x_reg_158),
    .din1(grad_z_reg_174),
    .ce(grp_fu_94_ce),
    .dout(grp_fu_94_p2)
);

a0_optical_flow_fmulibs #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
optical_flow_fmulibs_U159(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grad_y_reg_166),
    .din1(grad_z_reg_174),
    .ce(grp_fu_98_ce),
    .dout(grp_fu_98_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_102_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_67 <= indvar_flatten_next_fu_108_p2;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_67 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_flatten_reg_149 <= exitcond_flatten_fu_102_p2;
        exitcond_flatten_reg_149_pp0_iter1_reg <= exitcond_flatten_reg_149;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond_flatten_reg_149_pp0_iter2_reg <= exitcond_flatten_reg_149_pp0_iter1_reg;
        exitcond_flatten_reg_149_pp0_iter3_reg <= exitcond_flatten_reg_149_pp0_iter2_reg;
        exitcond_flatten_reg_149_pp0_iter4_reg <= exitcond_flatten_reg_149_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_149 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grad_x_reg_158 <= filtered_gradient_x_dout;
        grad_y_reg_166 <= filtered_gradient_y_dout;
        grad_z_reg_174 <= filtered_gradient_z_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_149_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_10_reg_197 <= grp_fu_90_p2;
        tmp_11_reg_202 <= grp_fu_94_p2;
        tmp_12_reg_207 <= grp_fu_98_p2;
        tmp_7_reg_182 <= grp_fu_78_p2;
        tmp_8_reg_187 <= grp_fu_82_p2;
        tmp_9_reg_192 <= grp_fu_86_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_102_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_149 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_x_blk_n = filtered_gradient_x_empty_n;
    end else begin
        filtered_gradient_x_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_149 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        filtered_gradient_x_read = 1'b1;
    end else begin
        filtered_gradient_x_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_149 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_y_blk_n = filtered_gradient_y_empty_n;
    end else begin
        filtered_gradient_y_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_149 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        filtered_gradient_y_read = 1'b1;
    end else begin
        filtered_gradient_y_read = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_149 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        filtered_gradient_z_blk_n = filtered_gradient_z_empty_n;
    end else begin
        filtered_gradient_z_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_149 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        filtered_gradient_z_read = 1'b1;
    end else begin
        filtered_gradient_z_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_78_ce = 1'b1;
    end else begin
        grp_fu_78_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_82_ce = 1'b1;
    end else begin
        grp_fu_82_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_86_ce = 1'b1;
    end else begin
        grp_fu_86_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_90_ce = 1'b1;
    end else begin
        grp_fu_90_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_94_ce = 1'b1;
    end else begin
        grp_fu_94_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_98_ce = 1'b1;
    end else begin
        grp_fu_98_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_149_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        out_product_val_blk_n = out_product_val_full_n;
    end else begin
        out_product_val_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_149_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_product_val_write = 1'b1;
    end else begin
        out_product_val_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_102_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten_fu_102_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((exitcond_flatten_reg_149_pp0_iter4_reg == 1'd0) & (out_product_val_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_z_empty_n == 1'b0)) | ((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_y_empty_n == 1'b0)) | ((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_x_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((exitcond_flatten_reg_149_pp0_iter4_reg == 1'd0) & (out_product_val_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_z_empty_n == 1'b0)) | ((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_y_empty_n == 1'b0)) | ((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_x_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((exitcond_flatten_reg_149_pp0_iter4_reg == 1'd0) & (out_product_val_full_n == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_z_empty_n == 1'b0)) | ((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_y_empty_n == 1'b0)) | ((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_x_empty_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = (((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_z_empty_n == 1'b0)) | ((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_y_empty_n == 1'b0)) | ((exitcond_flatten_reg_149 == 1'd0) & (filtered_gradient_x_empty_n == 1'b0)));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_pp0_stage0_iter5 = ((exitcond_flatten_reg_149_pp0_iter4_reg == 1'd0) & (out_product_val_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_102_p2 = ((indvar_flatten_reg_67 == 19'd446464) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_108_p2 = (indvar_flatten_reg_67 + 19'd1);

assign out_product_val_din = {{{{{{tmp_s_fu_129_p1}, {tmp_73_fu_126_p1}}, {tmp_72_fu_123_p1}}, {tmp_71_fu_120_p1}}, {tmp_70_fu_117_p1}}, {tmp_69_fu_114_p1}};

assign start_out = real_start;

assign tmp_69_fu_114_p1 = tmp_7_reg_182;

assign tmp_70_fu_117_p1 = tmp_8_reg_187;

assign tmp_71_fu_120_p1 = tmp_9_reg_192;

assign tmp_72_fu_123_p1 = tmp_10_reg_197;

assign tmp_73_fu_126_p1 = tmp_11_reg_202;

assign tmp_s_fu_129_p1 = tmp_12_reg_207;

endmodule //a0_outer_product
