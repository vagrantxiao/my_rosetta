-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity a0_Loop_FRAMES_CP_OUTER is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    frames_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    frames_V_empty_n : IN STD_LOGIC;
    frames_V_read : OUT STD_LOGIC;
    frame1_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    frame1_a_full_n : IN STD_LOGIC;
    frame1_a_write : OUT STD_LOGIC;
    frame2_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    frame2_a_full_n : IN STD_LOGIC;
    frame2_a_write : OUT STD_LOGIC;
    frame3_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    frame3_a_full_n : IN STD_LOGIC;
    frame3_a_write : OUT STD_LOGIC;
    frame3_b_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    frame3_b_full_n : IN STD_LOGIC;
    frame3_b_write : OUT STD_LOGIC;
    frame4_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    frame4_a_full_n : IN STD_LOGIC;
    frame4_a_write : OUT STD_LOGIC;
    frame5_a_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    frame5_a_full_n : IN STD_LOGIC;
    frame5_a_write : OUT STD_LOGIC );
end;


architecture behav of a0_Loop_FRAMES_CP_OUTER is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv19_6D000 : STD_LOGIC_VECTOR (18 downto 0) := "1101101000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal frames_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal frame1_a_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal exitcond_flatten_reg_322_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal frame2_a_blk_n : STD_LOGIC;
    signal frame3_a_blk_n : STD_LOGIC;
    signal frame3_b_blk_n : STD_LOGIC;
    signal frame4_a_blk_n : STD_LOGIC;
    signal frame5_a_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_190 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond_flatten_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond_flatten_reg_322_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_322_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_247_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal grp_fu_226_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_46_i_i_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_48_i_i_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_i_i_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_52_i_i_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_54_i_i_reg_376 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_47_i_i_reg_381 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_49_i_i_reg_386 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_i_i_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_216_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_53_i_i_reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_221_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_55_i_i_reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_226_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_229_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_232_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_235_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_238_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_253_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_1_i_i_fu_262_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_2_i_i_fu_277_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_3_i_i_fu_292_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Result_4_i_i_fu_307_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_201_ce : STD_LOGIC;
    signal grp_fu_206_ce : STD_LOGIC;
    signal grp_fu_211_ce : STD_LOGIC;
    signal grp_fu_216_ce : STD_LOGIC;
    signal grp_fu_221_ce : STD_LOGIC;
    signal grp_fu_226_ce : STD_LOGIC;
    signal grp_fu_229_ce : STD_LOGIC;
    signal grp_fu_232_ce : STD_LOGIC;
    signal grp_fu_235_ce : STD_LOGIC;
    signal grp_fu_238_ce : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component a0_optical_flow_fdivbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component a0_optical_flow_uitocud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    optical_flow_fdivbkb_U1 : component a0_optical_flow_fdivbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_46_i_i_reg_356,
        din1 => ap_const_lv32_437F0000,
        ce => grp_fu_201_ce,
        dout => grp_fu_201_p2);

    optical_flow_fdivbkb_U2 : component a0_optical_flow_fdivbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_48_i_i_reg_361,
        din1 => ap_const_lv32_437F0000,
        ce => grp_fu_206_ce,
        dout => grp_fu_206_p2);

    optical_flow_fdivbkb_U3 : component a0_optical_flow_fdivbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_50_i_i_reg_366,
        din1 => ap_const_lv32_437F0000,
        ce => grp_fu_211_ce,
        dout => grp_fu_211_p2);

    optical_flow_fdivbkb_U4 : component a0_optical_flow_fdivbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_52_i_i_reg_371,
        din1 => ap_const_lv32_437F0000,
        ce => grp_fu_216_ce,
        dout => grp_fu_216_p2);

    optical_flow_fdivbkb_U5 : component a0_optical_flow_fdivbkb
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_54_i_i_reg_376,
        din1 => ap_const_lv32_437F0000,
        ce => grp_fu_221_ce,
        dout => grp_fu_221_p2);

    optical_flow_uitocud_U6 : component a0_optical_flow_uitocud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_226_p0,
        ce => grp_fu_226_ce,
        dout => grp_fu_226_p1);

    optical_flow_uitocud_U7 : component a0_optical_flow_uitocud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_229_p0,
        ce => grp_fu_229_ce,
        dout => grp_fu_229_p1);

    optical_flow_uitocud_U8 : component a0_optical_flow_uitocud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_232_p0,
        ce => grp_fu_232_ce,
        dout => grp_fu_232_p1);

    optical_flow_uitocud_U9 : component a0_optical_flow_uitocud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_235_p0,
        ce => grp_fu_235_ce,
        dout => grp_fu_235_p1);

    optical_flow_uitocud_U10 : component a0_optical_flow_uitocud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_238_p0,
        ce => grp_fu_238_ce,
        dout => grp_fu_238_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_241_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_190 <= indvar_flatten_next_fu_247_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_190 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_flatten_reg_322 <= exitcond_flatten_fu_241_p2;
                exitcond_flatten_reg_322_pp0_iter1_reg <= exitcond_flatten_reg_322;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                exitcond_flatten_reg_322_pp0_iter10_reg <= exitcond_flatten_reg_322_pp0_iter9_reg;
                exitcond_flatten_reg_322_pp0_iter11_reg <= exitcond_flatten_reg_322_pp0_iter10_reg;
                exitcond_flatten_reg_322_pp0_iter12_reg <= exitcond_flatten_reg_322_pp0_iter11_reg;
                exitcond_flatten_reg_322_pp0_iter13_reg <= exitcond_flatten_reg_322_pp0_iter12_reg;
                exitcond_flatten_reg_322_pp0_iter2_reg <= exitcond_flatten_reg_322_pp0_iter1_reg;
                exitcond_flatten_reg_322_pp0_iter3_reg <= exitcond_flatten_reg_322_pp0_iter2_reg;
                exitcond_flatten_reg_322_pp0_iter4_reg <= exitcond_flatten_reg_322_pp0_iter3_reg;
                exitcond_flatten_reg_322_pp0_iter5_reg <= exitcond_flatten_reg_322_pp0_iter4_reg;
                exitcond_flatten_reg_322_pp0_iter6_reg <= exitcond_flatten_reg_322_pp0_iter5_reg;
                exitcond_flatten_reg_322_pp0_iter7_reg <= exitcond_flatten_reg_322_pp0_iter6_reg;
                exitcond_flatten_reg_322_pp0_iter8_reg <= exitcond_flatten_reg_322_pp0_iter7_reg;
                exitcond_flatten_reg_322_pp0_iter9_reg <= exitcond_flatten_reg_322_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_322_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_46_i_i_reg_356 <= grp_fu_226_p1;
                tmp_48_i_i_reg_361 <= grp_fu_229_p1;
                tmp_50_i_i_reg_366 <= grp_fu_232_p1;
                tmp_52_i_i_reg_371 <= grp_fu_235_p1;
                tmp_54_i_i_reg_376 <= grp_fu_238_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_322_pp0_iter12_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_47_i_i_reg_381 <= grp_fu_201_p2;
                tmp_49_i_i_reg_386 <= grp_fu_206_p2;
                tmp_51_i_i_reg_391 <= grp_fu_211_p2;
                tmp_53_i_i_reg_397 <= grp_fu_216_p2;
                tmp_55_i_i_reg_402 <= grp_fu_221_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter14, exitcond_flatten_fu_241_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter13)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_241_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((exitcond_flatten_fu_241_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(frames_V_empty_n, frame1_a_full_n, frame2_a_full_n, frame3_a_full_n, frame3_b_full_n, frame4_a_full_n, frame5_a_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_322, ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame5_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame4_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame3_b_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame3_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame2_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame1_a_full_n = ap_const_logic_0)))) or ((exitcond_flatten_reg_322 = ap_const_lv1_0) and (frames_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(frames_V_empty_n, frame1_a_full_n, frame2_a_full_n, frame3_a_full_n, frame3_b_full_n, frame4_a_full_n, frame5_a_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_322, ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame5_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame4_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame3_b_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame3_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame2_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame1_a_full_n = ap_const_logic_0)))) or ((exitcond_flatten_reg_322 = ap_const_lv1_0) and (frames_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(frames_V_empty_n, frame1_a_full_n, frame2_a_full_n, frame3_a_full_n, frame3_b_full_n, frame4_a_full_n, frame5_a_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_322, ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame5_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame4_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame3_b_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame3_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame2_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame1_a_full_n = ap_const_logic_0)))) or ((exitcond_flatten_reg_322 = ap_const_lv1_0) and (frames_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_pp0_stage0_iter14_assign_proc : process(frame1_a_full_n, frame2_a_full_n, frame3_a_full_n, frame3_b_full_n, frame4_a_full_n, frame5_a_full_n, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
                ap_block_state16_pp0_stage0_iter14 <= (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame5_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame4_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame3_b_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame3_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame2_a_full_n = ap_const_logic_0)) or ((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (frame1_a_full_n = ap_const_logic_0)));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(frames_V_empty_n, exitcond_flatten_reg_322)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_322 = ap_const_lv1_0) and (frames_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_241_p2)
    begin
        if ((exitcond_flatten_fu_241_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten_fu_241_p2 <= "1" when (indvar_flatten_reg_190 = ap_const_lv19_6D000) else "0";

    frame1_a_blk_n_assign_proc : process(frame1_a_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            frame1_a_blk_n <= frame1_a_full_n;
        else 
            frame1_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame1_a_din <= tmp_47_i_i_reg_381;

    frame1_a_write_assign_proc : process(ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame1_a_write <= ap_const_logic_1;
        else 
            frame1_a_write <= ap_const_logic_0;
        end if; 
    end process;


    frame2_a_blk_n_assign_proc : process(frame2_a_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            frame2_a_blk_n <= frame2_a_full_n;
        else 
            frame2_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame2_a_din <= tmp_49_i_i_reg_386;

    frame2_a_write_assign_proc : process(ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame2_a_write <= ap_const_logic_1;
        else 
            frame2_a_write <= ap_const_logic_0;
        end if; 
    end process;


    frame3_a_blk_n_assign_proc : process(frame3_a_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            frame3_a_blk_n <= frame3_a_full_n;
        else 
            frame3_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame3_a_din <= tmp_51_i_i_reg_391;

    frame3_a_write_assign_proc : process(ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame3_a_write <= ap_const_logic_1;
        else 
            frame3_a_write <= ap_const_logic_0;
        end if; 
    end process;


    frame3_b_blk_n_assign_proc : process(frame3_b_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            frame3_b_blk_n <= frame3_b_full_n;
        else 
            frame3_b_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame3_b_din <= tmp_51_i_i_reg_391;

    frame3_b_write_assign_proc : process(ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame3_b_write <= ap_const_logic_1;
        else 
            frame3_b_write <= ap_const_logic_0;
        end if; 
    end process;


    frame4_a_blk_n_assign_proc : process(frame4_a_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            frame4_a_blk_n <= frame4_a_full_n;
        else 
            frame4_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame4_a_din <= tmp_53_i_i_reg_397;

    frame4_a_write_assign_proc : process(ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame4_a_write <= ap_const_logic_1;
        else 
            frame4_a_write <= ap_const_logic_0;
        end if; 
    end process;


    frame5_a_blk_n_assign_proc : process(frame5_a_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1))) then 
            frame5_a_blk_n <= frame5_a_full_n;
        else 
            frame5_a_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    frame5_a_din <= tmp_55_i_i_reg_402;

    frame5_a_write_assign_proc : process(ap_enable_reg_pp0_iter14, exitcond_flatten_reg_322_pp0_iter13_reg, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_322_pp0_iter13_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frame5_a_write <= ap_const_logic_1;
        else 
            frame5_a_write <= ap_const_logic_0;
        end if; 
    end process;


    frames_V_blk_n_assign_proc : process(frames_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_322)
    begin
        if (((exitcond_flatten_reg_322 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            frames_V_blk_n <= frames_V_empty_n;
        else 
            frames_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    frames_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_322, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_322 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            frames_V_read <= ap_const_logic_1;
        else 
            frames_V_read <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_201_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_201_ce <= ap_const_logic_1;
        else 
            grp_fu_201_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_206_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_206_ce <= ap_const_logic_1;
        else 
            grp_fu_206_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_211_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_211_ce <= ap_const_logic_1;
        else 
            grp_fu_211_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_216_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_216_ce <= ap_const_logic_1;
        else 
            grp_fu_216_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_221_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_221_ce <= ap_const_logic_1;
        else 
            grp_fu_221_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_226_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_226_ce <= ap_const_logic_1;
        else 
            grp_fu_226_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_226_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_253_p1),32));

    grp_fu_229_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_229_ce <= ap_const_logic_1;
        else 
            grp_fu_229_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_229_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_1_i_i_fu_262_p4),32));

    grp_fu_232_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_232_ce <= ap_const_logic_1;
        else 
            grp_fu_232_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_232_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_2_i_i_fu_277_p4),32));

    grp_fu_235_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_235_ce <= ap_const_logic_1;
        else 
            grp_fu_235_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_235_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_3_i_i_fu_292_p4),32));

    grp_fu_238_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_238_ce <= ap_const_logic_1;
        else 
            grp_fu_238_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_238_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_4_i_i_fu_307_p4),32));
    indvar_flatten_next_fu_247_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_190) + unsigned(ap_const_lv19_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_1_i_i_fu_262_p4 <= frames_V_dout(15 downto 8);
    p_Result_2_i_i_fu_277_p4 <= frames_V_dout(23 downto 16);
    p_Result_3_i_i_fu_292_p4 <= frames_V_dout(31 downto 24);
    p_Result_4_i_i_fu_307_p4 <= frames_V_dout(39 downto 32);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_253_p1 <= frames_V_dout(8 - 1 downto 0);
end behav;
